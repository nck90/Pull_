{
  "repo_name": "Significant-Gravitas/AutoGPT",
  "repo_url": "https://github.com/Significant-Gravitas/AutoGPT",
  "description": "AutoGPT is the vision of accessible AI for everyone, to use and to build on. Our mission is to provide the tools, so that you can focus on what matters.",
  "stars": 173559,
  "language": "Python",
  "created_at": "2023-03-16T09:21:07Z",
  "updated_at": "2025-03-19T07:03:30Z",
  "files": {
    "autogpt_platform/autogpt_libs/autogpt_libs/auth/depends_tests.py": "import pytest\n\nfrom .depends import requires_admin_user, requires_user, verify_user\n\n\ndef test_verify_user_no_payload():\n    user = verify_user(None, admin_only=False)\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n\n\ndef test_verify_user_no_user_id():\n    with pytest.raises(Exception):\n        verify_user({\"role\": \"admin\"}, admin_only=False)\n\n\ndef test_verify_user_not_admin():\n    with pytest.raises(Exception):\n        verify_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n            admin_only=True,\n        )\n\n\ndef test_verify_user_with_admin_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"},\n        admin_only=True,\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n\n\ndef test_verify_user_with_user_role():\n    user = verify_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"},\n        admin_only=False,\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"\n\n\ndef test_requires_user():\n    user = requires_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"user\"\n\n\ndef test_requires_user_no_user_id():\n    with pytest.raises(Exception):\n        requires_user({\"role\": \"user\"})\n\n\ndef test_requires_admin_user():\n    user = requires_admin_user(\n        {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"admin\"}\n    )\n    assert user.user_id == \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\"\n    assert user.role == \"admin\"\n\n\ndef test_requires_admin_user_not_admin():\n    with pytest.raises(Exception):\n        requires_admin_user(\n            {\"sub\": \"3e53486c-cf57-477e-ba2a-cb02dc828e1a\", \"role\": \"user\"}\n        )\n",
    "autogpt_platform/autogpt_libs/autogpt_libs/feature_flag/client_test.py": "import pytest\nfrom ldclient import LDClient\n\nfrom autogpt_libs.feature_flag.client import feature_flag, mock_flag_variation\n\n\n@pytest.fixture\ndef ld_client(mocker):\n    client = mocker.Mock(spec=LDClient)\n    mocker.patch(\"ldclient.get\", return_value=client)\n    client.is_initialized.return_value = True\n    return client\n\n\n@pytest.mark.asyncio\nasync def test_feature_flag_enabled(ld_client):\n    ld_client.variation.return_value = True\n\n    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n    assert result == \"success\"\n    ld_client.variation.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_feature_flag_unauthorized_response(ld_client):\n    ld_client.variation.return_value = False\n\n    @feature_flag(\"test-flag\")\n    async def test_function(user_id: str):\n        return \"success\"\n\n    result = test_function(user_id=\"test-user\")\n    assert result == {\"error\": \"disabled\"}\n\n\ndef test_mock_flag_variation(ld_client):\n    with mock_flag_variation(\"test-flag\", True):\n        assert ld_client.variation(\"test-flag\", None, False)\n\n    with mock_flag_variation(\"test-flag\", False):\n        assert ld_client.variation(\"test-flag\", None, False)\n",
    "autogpt_platform/autogpt_libs/autogpt_libs/logging/test_utils.py": "import pytest\n\nfrom .utils import remove_color_codes\n\n\n@pytest.mark.parametrize(\n    \"raw_text, clean_text\",\n    [\n        (\n            \"COMMAND = \\x1b[36mbrowse_website\\x1b[0m  \"\n            \"ARGUMENTS = \\x1b[36m{'url': 'https://www.google.com',\"\n            \" 'question': 'What is the capital of France?'}\\x1b[0m\",\n            \"COMMAND = browse_website  \"\n            \"ARGUMENTS = {'url': 'https://www.google.com',\"\n            \" 'question': 'What is the capital of France?'}\",\n        ),\n        (\n            \"{'Schaue dir meine Projekte auf github () an, als auch meine Webseiten': \"\n            \"'https://github.com/Significant-Gravitas/AutoGPT,\"\n            \" https://discord.gg/autogpt und https://twitter.com/Auto_GPT'}\",\n            \"{'Schaue dir meine Projekte auf github () an, als auch meine Webseiten': \"\n            \"'https://github.com/Significant-Gravitas/AutoGPT,\"\n            \" https://discord.gg/autogpt und https://twitter.com/Auto_GPT'}\",\n        ),\n        (\"\", \"\"),\n        (\"hello\", \"hello\"),\n        (\"hello\\x1b[31m world\", \"hello world\"),\n        (\"\\x1b[36mHello,\\x1b[32m World!\", \"Hello, World!\"),\n        (\n            \"\\x1b[1m\\x1b[31mError:\\x1b[0m\\x1b[31m file not found\",\n            \"Error: file not found\",\n        ),\n    ],\n)\ndef test_remove_color_codes(raw_text, clean_text):\n    assert remove_color_codes(raw_text) == clean_text\n",
    "autogpt_platform/backend/backend/server/v2/library/db_test.py": "from datetime import datetime\n\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\n\nimport backend.server.v2.library.db as db\nimport backend.server.v2.store.exceptions\n\n\n@pytest.fixture(autouse=True)\nasync def setup_prisma():\n    # Don't register client if already registered\n    try:\n        Prisma()\n    except prisma.errors.ClientAlreadyRegisteredError:\n        pass\n    yield\n\n\n@pytest.mark.asyncio\nasync def test_get_library_agents(mocker):\n    # Mock data\n    mock_user_created = [\n        prisma.models.AgentGraph(\n            id=\"agent1\",\n            version=1,\n            name=\"Test Agent 1\",\n            description=\"Test Description 1\",\n            userId=\"test-user\",\n            isActive=True,\n            createdAt=datetime.now(),\n            isTemplate=False,\n        )\n    ]\n\n    mock_library_agents = [\n        prisma.models.LibraryAgent(\n            id=\"ua1\",\n            userId=\"test-user\",\n            agentId=\"agent2\",\n            agentVersion=1,\n            isCreatedByUser=False,\n            isDeleted=False,\n            isArchived=False,\n            createdAt=datetime.now(),\n            updatedAt=datetime.now(),\n            isFavorite=False,\n            useGraphIsActiveVersion=True,\n            Agent=prisma.models.AgentGraph(\n                id=\"agent2\",\n                version=1,\n                name=\"Test Agent 2\",\n                description=\"Test Description 2\",\n                userId=\"other-user\",\n                isActive=True,\n                createdAt=datetime.now(),\n                isTemplate=False,\n            ),\n        )\n    ]\n\n    # Mock prisma calls\n    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")\n    mock_agent_graph.return_value.find_many = mocker.AsyncMock(\n        return_value=mock_user_created\n    )\n\n    mock_library_agent = mocker.patch(\"prisma.models.LibraryAgent.prisma\")\n    mock_library_agent.return_value.find_many = mocker.AsyncMock(\n        return_value=mock_library_agents\n    )\n    mock_library_agent.return_value.count = mocker.AsyncMock(return_value=1)\n\n    # Call function\n    result = await db.list_library_agents(\"test-user\")\n\n    # Verify results\n    assert len(result.agents) == 1\n    assert result.agents[0].id == \"ua1\"\n    assert result.agents[0].name == \"Test Agent 2\"\n    assert result.agents[0].description == \"Test Description 2\"\n    assert result.agents[0].agent_id == \"agent2\"\n    assert result.agents[0].agent_version == 1\n    assert result.agents[0].can_access_graph is False\n    assert result.agents[0].is_latest_version is True\n    assert result.pagination.total_items == 1\n    assert result.pagination.total_pages == 1\n    assert result.pagination.current_page == 1\n    assert result.pagination.page_size == 50\n\n\n@pytest.mark.asyncio\nasync def test_add_agent_to_library(mocker):\n    # Mock data\n    mock_store_listing = prisma.models.StoreListingVersion(\n        id=\"version123\",\n        version=1,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        agentId=\"agent1\",\n        agentVersion=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        subHeading=\"Test Agent Subheading\",\n        imageUrls=[\"https://example.com/image.jpg\"],\n        description=\"Test Description\",\n        categories=[\"test\"],\n        isFeatured=False,\n        isDeleted=False,\n        isAvailable=True,\n        isApproved=True,\n        Agent=prisma.models.AgentGraph(\n            id=\"agent1\",\n            version=1,\n            name=\"Test Agent\",\n            description=\"Test Description\",\n            userId=\"creator\",\n            isActive=True,\n            createdAt=datetime.now(),\n            isTemplate=False,\n        ),\n    )\n\n    # Mock prisma calls\n    mock_store_listing_version = mocker.patch(\n        \"prisma.models.StoreListingVersion.prisma\"\n    )\n    mock_store_listing_version.return_value.find_unique = mocker.AsyncMock(\n        return_value=mock_store_listing\n    )\n\n    mock_library_agent = mocker.patch(\"prisma.models.LibraryAgent.prisma\")\n    mock_library_agent.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_library_agent.return_value.create = mocker.AsyncMock()\n\n    # Call function\n    await db.add_store_agent_to_library(\"version123\", \"test-user\")\n\n    # Verify mocks called correctly\n    mock_store_listing_version.return_value.find_unique.assert_called_once_with(\n        where={\"id\": \"version123\"}, include={\"Agent\": True}\n    )\n    mock_library_agent.return_value.find_first.assert_called_once_with(\n        where={\n            \"userId\": \"test-user\",\n            \"agentId\": \"agent1\",\n            \"agentVersion\": 1,\n        }\n    )\n    mock_library_agent.return_value.create.assert_called_once_with(\n        data=prisma.types.LibraryAgentCreateInput(\n            userId=\"test-user\", agentId=\"agent1\", agentVersion=1, isCreatedByUser=False\n        )\n    )\n\n\n@pytest.mark.asyncio\nasync def test_add_agent_to_library_not_found(mocker):\n    # Mock prisma calls\n    mock_store_listing_version = mocker.patch(\n        \"prisma.models.StoreListingVersion.prisma\"\n    )\n    mock_store_listing_version.return_value.find_unique = mocker.AsyncMock(\n        return_value=None\n    )\n\n    # Call function and verify exception\n    with pytest.raises(backend.server.v2.store.exceptions.AgentNotFoundError):\n        await db.add_store_agent_to_library(\"version123\", \"test-user\")\n\n    # Verify mock called correctly\n    mock_store_listing_version.return_value.find_unique.assert_called_once_with(\n        where={\"id\": \"version123\"}, include={\"Agent\": True}\n    )\n",
    "autogpt_platform/backend/backend/server/v2/library/model_test.py": "import datetime\n\nimport prisma.fields\nimport prisma.models\n\nimport backend.server.v2.library.model as library_model\n\n\ndef test_agent_preset_from_db():\n    # Create mock DB agent\n    db_agent = prisma.models.AgentPreset(\n        id=\"test-agent-123\",\n        createdAt=datetime.datetime.now(),\n        updatedAt=datetime.datetime.now(),\n        agentId=\"agent-123\",\n        agentVersion=1,\n        name=\"Test Agent\",\n        description=\"Test agent description\",\n        isActive=True,\n        userId=\"test-user-123\",\n        isDeleted=False,\n        InputPresets=[\n            prisma.models.AgentNodeExecutionInputOutput(\n                id=\"input-123\",\n                time=datetime.datetime.now(),\n                name=\"input1\",\n                data=prisma.fields.Json({\"type\": \"string\", \"value\": \"test value\"}),\n            )\n        ],\n    )\n\n    # Convert to LibraryAgentPreset\n    agent = library_model.LibraryAgentPreset.from_db(db_agent)\n\n    assert agent.id == \"test-agent-123\"\n    assert agent.agent_version == 1\n    assert agent.is_active is True\n    assert agent.name == \"Test Agent\"\n    assert agent.description == \"Test agent description\"\n    assert agent.inputs == {\"input1\": {\"type\": \"string\", \"value\": \"test value\"}}\n",
    "autogpt_platform/backend/backend/server/v2/library/routes_test.py": "import datetime\n\nimport autogpt_libs.auth as autogpt_auth_lib\nimport fastapi\nimport fastapi.testclient\nimport pytest\nimport pytest_mock\n\nimport backend.server.model as server_model\nimport backend.server.v2.library.model as library_model\nfrom backend.server.v2.library.routes import router as library_router\n\napp = fastapi.FastAPI()\napp.include_router(library_router)\n\nclient = fastapi.testclient.TestClient(app)\n\n\ndef override_auth_middleware():\n    \"\"\"Override auth middleware for testing\"\"\"\n    return {\"sub\": \"test-user-id\"}\n\n\ndef override_get_user_id():\n    \"\"\"Override get_user_id for testing\"\"\"\n    return \"test-user-id\"\n\n\napp.dependency_overrides[autogpt_auth_lib.auth_middleware] = override_auth_middleware\napp.dependency_overrides[autogpt_auth_lib.depends.get_user_id] = override_get_user_id\n\n\ndef test_get_library_agents_success(mocker: pytest_mock.MockFixture):\n    mocked_value = [\n        library_model.LibraryAgentResponse(\n            agents=[\n                library_model.LibraryAgent(\n                    id=\"test-agent-1\",\n                    agent_id=\"test-agent-1\",\n                    agent_version=1,\n                    name=\"Test Agent 1\",\n                    description=\"Test Description 1\",\n                    image_url=None,\n                    creator_name=\"Test Creator\",\n                    creator_image_url=\"\",\n                    input_schema={\"type\": \"object\", \"properties\": {}},\n                    status=library_model.LibraryAgentStatus.COMPLETED,\n                    new_output=False,\n                    can_access_graph=True,\n                    is_latest_version=True,\n                    updated_at=datetime.datetime(2023, 1, 1, 0, 0, 0),\n                ),\n                library_model.LibraryAgent(\n                    id=\"test-agent-2\",\n                    agent_id=\"test-agent-2\",\n                    agent_version=1,\n                    name=\"Test Agent 2\",\n                    description=\"Test Description 2\",\n                    image_url=None,\n                    creator_name=\"Test Creator\",\n                    creator_image_url=\"\",\n                    input_schema={\"type\": \"object\", \"properties\": {}},\n                    status=library_model.LibraryAgentStatus.COMPLETED,\n                    new_output=False,\n                    can_access_graph=False,\n                    is_latest_version=True,\n                    updated_at=datetime.datetime(2023, 1, 1, 0, 0, 0),\n                ),\n            ],\n            pagination=server_model.Pagination(\n                total_items=2, total_pages=1, current_page=1, page_size=50\n            ),\n        ),\n    ]\n    mock_db_call = mocker.patch(\"backend.server.v2.library.db.get_library_agents\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/agents?search_term=test\")\n    assert response.status_code == 200\n\n    data = library_model.LibraryAgentResponse.model_validate(response.json())\n    assert len(data.agents) == 2\n    assert data.agents[0].agent_id == \"test-agent-1\"\n    assert data.agents[0].can_access_graph is True\n    assert data.agents[1].agent_id == \"test-agent-2\"\n    assert data.agents[1].can_access_graph is False\n    mock_db_call.assert_called_once_with(\n        user_id=\"test-user-id\",\n        search_term=\"test\",\n        sort_by=library_model.LibraryAgentSort.UPDATED_AT,\n        page=1,\n        page_size=15,\n    )\n\n\ndef test_get_library_agents_error(mocker: pytest_mock.MockFixture):\n    mock_db_call = mocker.patch(\"backend.server.v2.library.db.get_library_agents\")\n    mock_db_call.side_effect = Exception(\"Test error\")\n\n    response = client.get(\"/agents?search_term=test\")\n    assert response.status_code == 500\n    mock_db_call.assert_called_once_with(\n        user_id=\"test-user-id\",\n        search_term=\"test\",\n        sort_by=library_model.LibraryAgentSort.UPDATED_AT,\n        page=1,\n        page_size=15,\n    )\n\n\n@pytest.mark.skip(reason=\"Mocker Not implemented\")\ndef test_add_agent_to_library_success(mocker: pytest_mock.MockFixture):\n    mock_db_call = mocker.patch(\"backend.server.v2.library.db.add_agent_to_library\")\n    mock_db_call.return_value = None\n\n    response = client.post(\"/agents/test-version-id\")\n    assert response.status_code == 201\n    mock_db_call.assert_called_once_with(\n        store_listing_version_id=\"test-version-id\", user_id=\"test-user-id\"\n    )\n\n\n@pytest.mark.skip(reason=\"Mocker Not implemented\")\ndef test_add_agent_to_library_error(mocker: pytest_mock.MockFixture):\n    mock_db_call = mocker.patch(\"backend.server.v2.library.db.add_agent_to_library\")\n    mock_db_call.side_effect = Exception(\"Test error\")\n\n    response = client.post(\"/agents/test-version-id\")\n    assert response.status_code == 500\n    assert response.json()[\"detail\"] == \"Failed to add agent to library\"\n    mock_db_call.assert_called_once_with(\n        store_listing_version_id=\"test-version-id\", user_id=\"test-user-id\"\n    )\n",
    "autogpt_platform/backend/backend/server/v2/store/db_test.py": "from datetime import datetime\n\nimport prisma.errors\nimport prisma.models\nimport pytest\nfrom prisma import Prisma\n\nimport backend.server.v2.store.db as db\nfrom backend.server.v2.store.model import Profile\n\n\n@pytest.fixture(autouse=True)\nasync def setup_prisma():\n    # Don't register client if already registered\n    try:\n        Prisma()\n    except prisma.errors.ClientAlreadyRegisteredError:\n        pass\n    yield\n\n\n@pytest.mark.asyncio\nasync def test_get_store_agents(mocker):\n    # Mock data\n    mock_agents = [\n        prisma.models.StoreAgent(\n            listing_id=\"test-id\",\n            storeListingVersionId=\"version123\",\n            slug=\"test-agent\",\n            agent_name=\"Test Agent\",\n            agent_video=None,\n            agent_image=[\"image.jpg\"],\n            featured=False,\n            creator_username=\"creator\",\n            creator_avatar=\"avatar.jpg\",\n            sub_heading=\"Test heading\",\n            description=\"Test description\",\n            categories=[],\n            runs=10,\n            rating=4.5,\n            versions=[\"1.0\"],\n            updated_at=datetime.now(),\n        )\n    ]\n\n    # Mock prisma calls\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_many = mocker.AsyncMock(return_value=mock_agents)\n    mock_store_agent.return_value.count = mocker.AsyncMock(return_value=1)\n\n    # Call function\n    result = await db.get_store_agents()\n\n    # Verify results\n    assert len(result.agents) == 1\n    assert result.agents[0].slug == \"test-agent\"\n    assert result.pagination.total_items == 1\n\n    # Verify mocks called correctly\n    mock_store_agent.return_value.find_many.assert_called_once()\n    mock_store_agent.return_value.count.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_get_store_agent_details(mocker):\n    # Mock data\n    mock_agent = prisma.models.StoreAgent(\n        listing_id=\"test-id\",\n        storeListingVersionId=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image.jpg\"],\n        featured=False,\n        creator_username=\"creator\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test heading\",\n        description=\"Test description\",\n        categories=[\"test\"],\n        runs=10,\n        rating=4.5,\n        versions=[\"1.0\"],\n        updated_at=datetime.now(),\n    )\n\n    # Mock prisma call\n    mock_store_agent = mocker.patch(\"prisma.models.StoreAgent.prisma\")\n    mock_store_agent.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n\n    # Call function\n    result = await db.get_store_agent_details(\"creator\", \"test-agent\")\n\n    # Verify results\n    assert result.slug == \"test-agent\"\n    assert result.agent_name == \"Test Agent\"\n\n    # Verify mock called correctly\n    mock_store_agent.return_value.find_first.assert_called_once_with(\n        where={\"creator_username\": \"creator\", \"slug\": \"test-agent\"}\n    )\n\n\n@pytest.mark.asyncio\nasync def test_get_store_creator_details(mocker):\n    # Mock data\n    mock_creator_data = prisma.models.Creator(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        num_agents=1,\n        agent_rating=4.5,\n        agent_runs=10,\n        top_categories=[\"test\"],\n        is_featured=False,\n    )\n\n    # Mock prisma call\n    mock_creator = mocker.patch(\"prisma.models.Creator.prisma\")\n    mock_creator.return_value.find_unique = mocker.AsyncMock()\n    # Configure the mock to return values that will pass validation\n    mock_creator.return_value.find_unique.return_value = mock_creator_data\n\n    # Call function\n    result = await db.get_store_creator_details(\"creator\")\n\n    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n    assert result.description == \"Test description\"\n    assert result.avatar_url == \"avatar.jpg\"\n\n    # Verify mock called correctly\n    mock_creator.return_value.find_unique.assert_called_once_with(\n        where={\"username\": \"creator\"}\n    )\n\n\n@pytest.mark.asyncio\nasync def test_create_store_submission(mocker):\n    # Mock data\n    mock_agent = prisma.models.AgentGraph(\n        id=\"agent-id\",\n        version=1,\n        userId=\"user-id\",\n        createdAt=datetime.now(),\n        isActive=True,\n        isTemplate=False,\n    )\n\n    mock_listing = prisma.models.StoreListing(\n        id=\"listing-id\",\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        isDeleted=False,\n        isApproved=False,\n        agentId=\"agent-id\",\n        agentVersion=1,\n        owningUserId=\"user-id\",\n        StoreListingVersions=[\n            prisma.models.StoreListingVersion(\n                id=\"version-id\",\n                agentId=\"agent-id\",\n                agentVersion=1,\n                slug=\"test-agent\",\n                name=\"Test Agent\",\n                description=\"Test description\",\n                createdAt=datetime.now(),\n                updatedAt=datetime.now(),\n                subHeading=\"Test heading\",\n                imageUrls=[\"image.jpg\"],\n                categories=[\"test\"],\n                isFeatured=False,\n                isDeleted=False,\n                version=1,\n                isAvailable=True,\n                isApproved=False,\n            )\n        ],\n    )\n\n    # Mock prisma calls\n    mock_agent_graph = mocker.patch(\"prisma.models.AgentGraph.prisma\")\n    mock_agent_graph.return_value.find_first = mocker.AsyncMock(return_value=mock_agent)\n\n    mock_store_listing = mocker.patch(\"prisma.models.StoreListing.prisma\")\n    mock_store_listing.return_value.find_first = mocker.AsyncMock(return_value=None)\n    mock_store_listing.return_value.create = mocker.AsyncMock(return_value=mock_listing)\n\n    # Call function\n    result = await db.create_store_submission(\n        user_id=\"user-id\",\n        agent_id=\"agent-id\",\n        agent_version=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        description=\"Test description\",\n    )\n\n    # Verify results\n    assert result.name == \"Test Agent\"\n    assert result.description == \"Test description\"\n    assert result.store_listing_version_id == \"version-id\"\n\n    # Verify mocks called correctly\n    mock_agent_graph.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.find_first.assert_called_once()\n    mock_store_listing.return_value.create.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_update_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test Creator\",\n        username=\"creator\",\n        userId=\"user-id\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n    )\n\n    # Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n    mock_profile_db.return_value.update = mocker.AsyncMock(return_value=mock_profile)\n\n    # Test data\n    profile = Profile(\n        name=\"Test Creator\",\n        username=\"creator\",\n        description=\"Test description\",\n        links=[\"link1\"],\n        avatar_url=\"avatar.jpg\",\n        is_featured=False,\n    )\n\n    # Call function\n    result = await db.update_profile(\"user-id\", profile)\n\n    # Verify results\n    assert result.username == \"creator\"\n    assert result.name == \"Test Creator\"\n\n    # Verify mocks called correctly\n    mock_profile_db.return_value.find_first.assert_called_once()\n    mock_profile_db.return_value.update.assert_called_once()\n\n\n@pytest.mark.asyncio\nasync def test_get_user_profile(mocker):\n    # Mock data\n    mock_profile = prisma.models.Profile(\n        id=\"profile-id\",\n        name=\"Test User\",\n        username=\"testuser\",\n        description=\"Test description\",\n        links=[\"link1\", \"link2\"],\n        avatarUrl=\"avatar.jpg\",\n        isFeatured=False,\n        createdAt=datetime.now(),\n        updatedAt=datetime.now(),\n        userId=\"user-id\",\n    )\n\n    # Mock prisma calls\n    mock_profile_db = mocker.patch(\"prisma.models.Profile.prisma\")\n    mock_profile_db.return_value.find_first = mocker.AsyncMock(\n        return_value=mock_profile\n    )\n\n    # Call function\n    result = await db.get_user_profile(\"user-id\")\n\n    assert result is not None\n    # Verify results\n    assert result.name == \"Test User\"\n    assert result.username == \"testuser\"\n    assert result.description == \"Test description\"\n    assert result.links == [\"link1\", \"link2\"]\n    assert result.avatar_url == \"avatar.jpg\"\n",
    "autogpt_platform/backend/backend/server/v2/store/media_test.py": "import io\nimport unittest.mock\n\nimport fastapi\nimport pytest\nimport starlette.datastructures\n\nimport backend.server.v2.store.exceptions\nimport backend.server.v2.store.media\nfrom backend.util.settings import Settings\n\n\n@pytest.fixture\ndef mock_settings(monkeypatch):\n    settings = Settings()\n    settings.config.media_gcs_bucket_name = \"test-bucket\"\n    settings.config.google_application_credentials = \"test-credentials\"\n    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)\n    return settings\n\n\n@pytest.fixture\ndef mock_storage_client(mocker):\n    mock_client = unittest.mock.MagicMock()\n    mock_bucket = unittest.mock.MagicMock()\n    mock_blob = unittest.mock.MagicMock()\n\n    mock_client.bucket.return_value = mock_bucket\n    mock_bucket.blob.return_value = mock_blob\n    mock_blob.public_url = \"http://test-url/media/laptop.jpeg\"\n\n    mocker.patch(\"google.cloud.storage.Client\", return_value=mock_client)\n\n    return mock_client\n\n\nasync def test_upload_media_success(mock_settings, mock_storage_client):\n    # Create test JPEG data with valid signature\n    test_data = b\"\\xFF\\xD8\\xFF\" + b\"test data\"\n\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(test_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_called_once()\n\n\nasync def test_upload_media_invalid_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.txt\",\n        file=io.BytesIO(b\"test data\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"text/plain\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_not_called()\n\n\nasync def test_upload_media_missing_credentials(monkeypatch):\n    settings = Settings()\n    settings.config.media_gcs_bucket_name = \"\"\n    settings.config.google_application_credentials = \"\"\n    monkeypatch.setattr(\"backend.server.v2.store.media.Settings\", lambda: settings)\n\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(b\"\\xFF\\xD8\\xFF\" + b\"test data\"),  # Valid JPEG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.StorageConfigError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\nasync def test_upload_media_video_type(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.mp4\",\n        file=io.BytesIO(b\"\\x00\\x00\\x00\\x18ftypmp42\"),  # Valid MP4 signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/mp4\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n    assert result == \"http://test-url/media/laptop.jpeg\"\n    mock_bucket = mock_storage_client.bucket.return_value\n    mock_blob = mock_bucket.blob.return_value\n    mock_blob.upload_from_string.assert_called_once()\n\n\nasync def test_upload_media_file_too_large(mock_settings, mock_storage_client):\n    large_data = b\"\\xFF\\xD8\\xFF\" + b\"x\" * (\n        50 * 1024 * 1024 + 1\n    )  # 50MB + 1 byte with valid JPEG signature\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(large_data),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.FileSizeTooLargeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\nasync def test_upload_media_file_read_error(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"laptop.jpeg\",\n        file=io.BytesIO(b\"\"),  # Empty file that will raise error on read\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n    test_file.read = unittest.mock.AsyncMock(side_effect=Exception(\"Read error\"))\n\n    with pytest.raises(backend.server.v2.store.exceptions.FileReadError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\nasync def test_upload_media_png_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.png\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # Valid PNG signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/png\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\nasync def test_upload_media_gif_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.gif\",\n        file=io.BytesIO(b\"GIF89a\"),  # Valid GIF signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/gif\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\nasync def test_upload_media_webp_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.webp\",\n        file=io.BytesIO(b\"RIFF\\x00\\x00\\x00\\x00WEBP\"),  # Valid WebP signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/webp\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\nasync def test_upload_media_webm_success(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.webm\",\n        file=io.BytesIO(b\"\\x1a\\x45\\xdf\\xa3\"),  # Valid WebM signature\n        headers=starlette.datastructures.Headers({\"content-type\": \"video/webm\"}),\n    )\n\n    result = await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n    assert result == \"http://test-url/media/laptop.jpeg\"\n\n\nasync def test_upload_media_mismatched_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"\\x89PNG\\r\\n\\x1a\\n\"),  # PNG signature with JPEG content type\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n\n\nasync def test_upload_media_invalid_signature(mock_settings, mock_storage_client):\n    test_file = fastapi.UploadFile(\n        filename=\"test.jpeg\",\n        file=io.BytesIO(b\"invalid signature\"),\n        headers=starlette.datastructures.Headers({\"content-type\": \"image/jpeg\"}),\n    )\n\n    with pytest.raises(backend.server.v2.store.exceptions.InvalidFileTypeError):\n        await backend.server.v2.store.media.upload_media(\"test-user\", test_file)\n",
    "autogpt_platform/backend/backend/server/v2/store/model_test.py": "import datetime\n\nimport prisma.enums\n\nimport backend.server.v2.store.model\n\n\ndef test_pagination():\n    pagination = backend.server.v2.store.model.Pagination(\n        total_items=100, total_pages=5, current_page=2, page_size=20\n    )\n    assert pagination.total_items == 100\n    assert pagination.total_pages == 5\n    assert pagination.current_page == 2\n    assert pagination.page_size == 20\n\n\ndef test_store_agent():\n    agent = backend.server.v2.store.model.StoreAgent(\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_image=\"test.jpg\",\n        creator=\"creator1\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test subheading\",\n        description=\"Test description\",\n        runs=50,\n        rating=4.5,\n    )\n    assert agent.slug == \"test-agent\"\n    assert agent.agent_name == \"Test Agent\"\n    assert agent.runs == 50\n    assert agent.rating == 4.5\n\n\ndef test_store_agents_response():\n    response = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"test-agent\",\n                agent_name=\"Test Agent\",\n                agent_image=\"test.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar.jpg\",\n                sub_heading=\"Test subheading\",\n                description=\"Test description\",\n                runs=50,\n                rating=4.5,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            total_items=1, total_pages=1, current_page=1, page_size=20\n        ),\n    )\n    assert len(response.agents) == 1\n    assert response.pagination.total_items == 1\n\n\ndef test_store_agent_details():\n    details = backend.server.v2.store.model.StoreAgentDetails(\n        store_listing_version_id=\"version123\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image1.jpg\", \"image2.jpg\"],\n        creator=\"creator1\",\n        creator_avatar=\"avatar.jpg\",\n        sub_heading=\"Test subheading\",\n        description=\"Test description\",\n        categories=[\"cat1\", \"cat2\"],\n        runs=50,\n        rating=4.5,\n        versions=[\"1.0\", \"2.0\"],\n        last_updated=datetime.datetime.now(),\n    )\n    assert details.slug == \"test-agent\"\n    assert len(details.agent_image) == 2\n    assert len(details.categories) == 2\n    assert len(details.versions) == 2\n\n\ndef test_creator():\n    creator = backend.server.v2.store.model.Creator(\n        agent_rating=4.8,\n        agent_runs=1000,\n        name=\"Test Creator\",\n        username=\"creator1\",\n        description=\"Test description\",\n        avatar_url=\"avatar.jpg\",\n        num_agents=5,\n        is_featured=False,\n    )\n    assert creator.name == \"Test Creator\"\n    assert creator.num_agents == 5\n\n\ndef test_creators_response():\n    response = backend.server.v2.store.model.CreatorsResponse(\n        creators=[\n            backend.server.v2.store.model.Creator(\n                agent_rating=4.8,\n                agent_runs=1000,\n                name=\"Test Creator\",\n                username=\"creator1\",\n                description=\"Test description\",\n                avatar_url=\"avatar.jpg\",\n                num_agents=5,\n                is_featured=False,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            total_items=1, total_pages=1, current_page=1, page_size=20\n        ),\n    )\n    assert len(response.creators) == 1\n    assert response.pagination.total_items == 1\n\n\ndef test_creator_details():\n    details = backend.server.v2.store.model.CreatorDetails(\n        name=\"Test Creator\",\n        username=\"creator1\",\n        description=\"Test description\",\n        links=[\"link1.com\", \"link2.com\"],\n        avatar_url=\"avatar.jpg\",\n        agent_rating=4.8,\n        agent_runs=1000,\n        top_categories=[\"cat1\", \"cat2\"],\n    )\n    assert details.name == \"Test Creator\"\n    assert len(details.links) == 2\n    assert details.agent_rating == 4.8\n    assert len(details.top_categories) == 2\n\n\ndef test_store_submission():\n    submission = backend.server.v2.store.model.StoreSubmission(\n        agent_id=\"agent123\",\n        agent_version=1,\n        sub_heading=\"Test subheading\",\n        name=\"Test Agent\",\n        slug=\"test-agent\",\n        description=\"Test description\",\n        image_urls=[\"image1.jpg\", \"image2.jpg\"],\n        date_submitted=datetime.datetime(2023, 1, 1),\n        status=prisma.enums.SubmissionStatus.PENDING,\n        runs=50,\n        rating=4.5,\n    )\n    assert submission.name == \"Test Agent\"\n    assert len(submission.image_urls) == 2\n    assert submission.status == prisma.enums.SubmissionStatus.PENDING\n\n\ndef test_store_submissions_response():\n    response = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[\n            backend.server.v2.store.model.StoreSubmission(\n                agent_id=\"agent123\",\n                agent_version=1,\n                sub_heading=\"Test subheading\",\n                name=\"Test Agent\",\n                slug=\"test-agent\",\n                description=\"Test description\",\n                image_urls=[\"image1.jpg\"],\n                date_submitted=datetime.datetime(2023, 1, 1),\n                status=prisma.enums.SubmissionStatus.PENDING,\n                runs=50,\n                rating=4.5,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            total_items=1, total_pages=1, current_page=1, page_size=20\n        ),\n    )\n    assert len(response.submissions) == 1\n    assert response.pagination.total_items == 1\n\n\ndef test_store_submission_request():\n    request = backend.server.v2.store.model.StoreSubmissionRequest(\n        agent_id=\"agent123\",\n        agent_version=1,\n        slug=\"test-agent\",\n        name=\"Test Agent\",\n        sub_heading=\"Test subheading\",\n        video_url=\"video.mp4\",\n        image_urls=[\"image1.jpg\", \"image2.jpg\"],\n        description=\"Test description\",\n        categories=[\"cat1\", \"cat2\"],\n    )\n    assert request.agent_id == \"agent123\"\n    assert request.agent_version == 1\n    assert len(request.image_urls) == 2\n    assert len(request.categories) == 2\n",
    "autogpt_platform/backend/backend/server/v2/store/routes_test.py": "import datetime\n\nimport autogpt_libs.auth.depends\nimport autogpt_libs.auth.middleware\nimport fastapi\nimport fastapi.testclient\nimport prisma.enums\nimport pytest_mock\n\nimport backend.server.v2.store.model\nimport backend.server.v2.store.routes\n\napp = fastapi.FastAPI()\napp.include_router(backend.server.v2.store.routes.router)\n\nclient = fastapi.testclient.TestClient(app)\n\n\ndef override_auth_middleware():\n    \"\"\"Override auth middleware for testing\"\"\"\n    return {\"sub\": \"test-user-id\"}\n\n\ndef override_get_user_id():\n    \"\"\"Override get_user_id for testing\"\"\"\n    return \"test-user-id\"\n\n\napp.dependency_overrides[autogpt_libs.auth.middleware.auth_middleware] = (\n    override_auth_middleware\n)\napp.dependency_overrides[autogpt_libs.auth.depends.get_user_id] = override_get_user_id\n\n\ndef test_get_agents_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.total_pages == 0\n    assert data.agents == []\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_featured(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"featured-agent\",\n                agent_name=\"Featured Agent\",\n                agent_image=\"featured.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Featured agent subheading\",\n                description=\"Featured agent description\",\n                runs=100,\n                rating=4.5,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?featured=true\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].slug == \"featured-agent\"\n    mock_db_call.assert_called_once_with(\n        featured=True,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_by_creator(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"creator-agent\",\n                agent_name=\"Creator Agent\",\n                agent_image=\"agent.jpg\",\n                creator=\"specific-creator\",\n                creator_avatar=\"avatar.jpg\",\n                sub_heading=\"Creator agent subheading\",\n                description=\"Creator agent description\",\n                runs=50,\n                rating=4.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?creator=specific-creator\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].creator == \"specific-creator\"\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=\"specific-creator\",\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_sorted(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"top-agent\",\n                agent_name=\"Top Agent\",\n                agent_image=\"top.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Top agent subheading\",\n                description=\"Top agent description\",\n                runs=1000,\n                rating=5.0,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?sorted_by=runs\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert data.agents[0].runs == 1000\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=\"runs\",\n        search_query=None,\n        category=None,\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_search(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"search-agent\",\n                agent_name=\"Search Agent\",\n                agent_image=\"search.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Search agent subheading\",\n                description=\"Specific search term description\",\n                runs=75,\n                rating=4.2,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?search_query=specific\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    assert \"specific\" in data.agents[0].description.lower()\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=\"specific\",\n        category=None,\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_category(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=\"category-agent\",\n                agent_name=\"Category Agent\",\n                agent_image=\"category.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=\"Category agent subheading\",\n                description=\"Category agent description\",\n                runs=60,\n                rating=4.1,\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?category=test-category\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 1\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=\"test-category\",\n        page=1,\n        page_size=20,\n    )\n\n\ndef test_get_agents_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentsResponse(\n        agents=[\n            backend.server.v2.store.model.StoreAgent(\n                slug=f\"agent-{i}\",\n                agent_name=f\"Agent {i}\",\n                agent_image=f\"agent{i}.jpg\",\n                creator=\"creator1\",\n                creator_avatar=\"avatar1.jpg\",\n                sub_heading=f\"Agent {i} subheading\",\n                description=f\"Agent {i} description\",\n                runs=i * 10,\n                rating=4.0,\n            )\n            for i in range(5)\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=15,\n            total_pages=3,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.return_value = mocked_value\n    response = client.get(\"/agents?page=2&page_size=5\")\n    assert response.status_code == 200\n    data = backend.server.v2.store.model.StoreAgentsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.agents) == 5\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(\n        featured=False,\n        creator=None,\n        sorted_by=None,\n        search_query=None,\n        category=None,\n        page=2,\n        page_size=5,\n    )\n\n\ndef test_get_agents_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/agents?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/agents?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/agents?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agents\")\n    mock_db_call.assert_not_called()\n\n\ndef test_get_agent_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreAgentDetails(\n        store_listing_version_id=\"test-version-id\",\n        slug=\"test-agent\",\n        agent_name=\"Test Agent\",\n        agent_video=\"video.mp4\",\n        agent_image=[\"image1.jpg\", \"image2.jpg\"],\n        creator=\"creator1\",\n        creator_avatar=\"avatar1.jpg\",\n        sub_heading=\"Test agent subheading\",\n        description=\"Test agent description\",\n        categories=[\"category1\", \"category2\"],\n        runs=100,\n        rating=4.5,\n        versions=[\"1.0.0\", \"1.1.0\"],\n        last_updated=datetime.datetime.now(),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_agent_details\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/agents/creator1/test-agent\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreAgentDetails.model_validate(\n        response.json()\n    )\n    assert data.agent_name == \"Test Agent\"\n    assert data.creator == \"creator1\"\n    mock_db_call.assert_called_once_with(username=\"creator1\", agent_name=\"test-agent\")\n\n\ndef test_get_creators_defaults(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=0,\n            total_items=0,\n            total_pages=0,\n            page_size=10,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creators\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.total_pages == 0\n    assert data.creators == []\n    mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=1, page_size=20\n    )\n\n\ndef test_get_creators_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorsResponse(\n        creators=[\n            backend.server.v2.store.model.Creator(\n                name=f\"Creator {i}\",\n                username=f\"creator{i}\",\n                description=f\"Creator {i} description\",\n                avatar_url=f\"avatar{i}.jpg\",\n                num_agents=1,\n                agent_rating=4.5,\n                agent_runs=100,\n                is_featured=False,\n            )\n            for i in range(5)\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=15,\n            total_pages=3,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creators?page=2&page_size=5\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.creators) == 5\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(\n        featured=False, search_query=None, sorted_by=None, page=2, page_size=5\n    )\n\n\ndef test_get_creators_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/creators?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/creators?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/creators?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creators\")\n    mock_db_call.assert_not_called()\n\n\ndef test_get_creator_details(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.CreatorDetails(\n        name=\"Test User\",\n        username=\"creator1\",\n        description=\"Test creator description\",\n        links=[\"link1.com\", \"link2.com\"],\n        avatar_url=\"avatar.jpg\",\n        agent_rating=4.8,\n        agent_runs=1000,\n        top_categories=[\"category1\", \"category2\"],\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_creator_details\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/creator/creator1\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.CreatorDetails.model_validate(response.json())\n    assert data.username == \"creator1\"\n    assert data.name == \"Test User\"\n    mock_db_call.assert_called_once_with(username=\"creator1\")\n\n\ndef test_get_submissions_success(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[\n            backend.server.v2.store.model.StoreSubmission(\n                name=\"Test Agent\",\n                description=\"Test agent description\",\n                image_urls=[\"test.jpg\"],\n                date_submitted=datetime.datetime.now(),\n                status=prisma.enums.SubmissionStatus.APPROVED,\n                runs=50,\n                rating=4.2,\n                agent_id=\"test-agent-id\",\n                agent_version=1,\n                sub_heading=\"Test agent subheading\",\n                slug=\"test-agent\",\n            )\n        ],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=1,\n            total_items=1,\n            total_pages=1,\n            page_size=20,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/submissions\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert len(data.submissions) == 1\n    assert data.submissions[0].name == \"Test Agent\"\n    assert data.pagination.current_page == 1\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=1, page_size=20)\n\n\ndef test_get_submissions_pagination(mocker: pytest_mock.MockFixture):\n    mocked_value = backend.server.v2.store.model.StoreSubmissionsResponse(\n        submissions=[],\n        pagination=backend.server.v2.store.model.Pagination(\n            current_page=2,\n            total_items=10,\n            total_pages=2,\n            page_size=5,\n        ),\n    )\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.return_value = mocked_value\n\n    response = client.get(\"/submissions?page=2&page_size=5\")\n    assert response.status_code == 200\n\n    data = backend.server.v2.store.model.StoreSubmissionsResponse.model_validate(\n        response.json()\n    )\n    assert data.pagination.current_page == 2\n    assert data.pagination.page_size == 5\n    mock_db_call.assert_called_once_with(user_id=\"test-user-id\", page=2, page_size=5)\n\n\ndef test_get_submissions_malformed_request(mocker: pytest_mock.MockFixture):\n    # Test with invalid page number\n    response = client.get(\"/submissions?page=-1\")\n    assert response.status_code == 422\n\n    # Test with invalid page size\n    response = client.get(\"/submissions?page_size=0\")\n    assert response.status_code == 422\n\n    # Test with non-numeric values\n    response = client.get(\"/submissions?page=abc&page_size=def\")\n    assert response.status_code == 422\n\n    # Verify no DB calls were made\n    mock_db_call = mocker.patch(\"backend.server.v2.store.db.get_store_submissions\")\n    mock_db_call.assert_not_called()\n"
  },
  "requirements": null
}