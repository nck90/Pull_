{
  "repo_name": "CorentinJ/Real-Time-Voice-Cloning",
  "repo_url": "https://github.com/CorentinJ/Real-Time-Voice-Cloning",
  "description": "Clone a voice in 5 seconds to generate arbitrary speech in real-time",
  "stars": 53753,
  "language": "Python",
  "created_at": "2019-05-26T08:56:15Z",
  "updated_at": "2025-03-18T23:30:42Z",
  "files": {
    "demo_cli.py": "import argparse\nimport os\nfrom pathlib import Path\n\nimport librosa\nimport numpy as np\nimport soundfile as sf\nimport torch\n\nfrom encoder import inference as encoder\nfrom encoder.params_model import model_embedding_size as speaker_embedding_size\nfrom synthesizer.inference import Synthesizer\nfrom utils.argutils import print_args\nfrom utils.default_models import ensure_default_models\nfrom vocoder import inference as vocoder\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n    parser.add_argument(\"-e\", \"--enc_model_fpath\", type=Path,\n                        default=\"saved_models/default/encoder.pt\",\n                        help=\"Path to a saved encoder\")\n    parser.add_argument(\"-s\", \"--syn_model_fpath\", type=Path,\n                        default=\"saved_models/default/synthesizer.pt\",\n                        help=\"Path to a saved synthesizer\")\n    parser.add_argument(\"-v\", \"--voc_model_fpath\", type=Path,\n                        default=\"saved_models/default/vocoder.pt\",\n                        help=\"Path to a saved vocoder\")\n    parser.add_argument(\"--cpu\", action=\"store_true\", help=\\\n        \"If True, processing is done on CPU, even when a GPU is available.\")\n    parser.add_argument(\"--no_sound\", action=\"store_true\", help=\\\n        \"If True, audio won't be played.\")\n    parser.add_argument(\"--seed\", type=int, default=None, help=\\\n        \"Optional random number seed value to make toolbox deterministic.\")\n    args = parser.parse_args()\n    arg_dict = vars(args)\n    print_args(args, parser)\n\n    # Hide GPUs from Pytorch to force CPU processing\n    if arg_dict.pop(\"cpu\"):\n        os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n    print(\"Running a test of your configuration...\\n\")\n\n    if torch.cuda.is_available():\n        device_id = torch.cuda.current_device()\n        gpu_properties = torch.cuda.get_device_properties(device_id)\n        ## Print some environment information (for debugging purposes)\n        print(\"Found %d GPUs available. Using GPU %d (%s) of compute capability %d.%d with \"\n            \"%.1fGb total memory.\\n\" %\n            (torch.cuda.device_count(),\n            device_id,\n            gpu_properties.name,\n            gpu_properties.major,\n            gpu_properties.minor,\n            gpu_properties.total_memory / 1e9))\n    else:\n        print(\"Using CPU for inference.\\n\")\n\n    ## Load the models one by one.\n    print(\"Preparing the encoder, the synthesizer and the vocoder...\")\n    ensure_default_models(Path(\"saved_models\"))\n    encoder.load_model(args.enc_model_fpath)\n    synthesizer = Synthesizer(args.syn_model_fpath)\n    vocoder.load_model(args.voc_model_fpath)\n\n\n    ## Run a test\n    print(\"Testing your configuration with small inputs.\")\n    # Forward an audio waveform of zeroes that lasts 1 second. Notice how we can get the encoder's\n    # sampling rate, which may differ.\n    # If you're unfamiliar with digital audio, know that it is encoded as an array of floats\n    # (or sometimes integers, but mostly floats in this projects) ranging from -1 to 1.\n    # The sampling rate is the number of values (samples) recorded per second, it is set to\n    # 16000 for the encoder. Creating an array of length <sampling_rate> will always correspond\n    # to an audio of 1 second.\n    print(\"\\tTesting the encoder...\")\n    encoder.embed_utterance(np.zeros(encoder.sampling_rate))\n\n    # Create a dummy embedding. You would normally use the embedding that encoder.embed_utterance\n    # returns, but here we're going to make one ourselves just for the sake of showing that it's\n    # possible.\n    embed = np.random.rand(speaker_embedding_size)\n    # Embeddings are L2-normalized (this isn't important here, but if you want to make your own\n    # embeddings it will be).\n    embed /= np.linalg.norm(embed)\n    # The synthesizer can handle multiple inputs with batching. Let's create another embedding to\n    # illustrate that\n    embeds = [embed, np.zeros(speaker_embedding_size)]\n    texts = [\"test 1\", \"test 2\"]\n    print(\"\\tTesting the synthesizer... (loading the model will output a lot of text)\")\n    mels = synthesizer.synthesize_spectrograms(texts, embeds)\n\n    # The vocoder synthesizes one waveform at a time, but it's more efficient for long ones. We\n    # can concatenate the mel spectrograms to a single one.\n    mel = np.concatenate(mels, axis=1)\n    # The vocoder can take a callback function to display the generation. More on that later. For\n    # now we'll simply hide it like this:\n    no_action = lambda *args: None\n    print(\"\\tTesting the vocoder...\")\n    # For the sake of making this test short, we'll pass a short target length. The target length\n    # is the length of the wav segments that are processed in parallel. E.g. for audio sampled\n    # at 16000 Hertz, a target length of 8000 means that the target audio will be cut in chunks of\n    # 0.5 seconds which will all be generated together. The parameters here are absurdly short, and\n    # that has a detrimental effect on the quality of the audio. The default parameters are\n    # recommended in general.\n    vocoder.infer_waveform(mel, target=200, overlap=50, progress_callback=no_action)\n\n    print(\"All test passed! You can now synthesize speech.\\n\\n\")\n\n\n    ## Interactive speech generation\n    print(\"This is a GUI-less example of interface to SV2TTS. The purpose of this script is to \"\n          \"show how you can interface this project easily with your own. See the source code for \"\n          \"an explanation of what is happening.\\n\")\n\n    print(\"Interactive generation loop\")\n    num_generated = 0\n    while True:\n        try:\n            # Get the reference audio filepath\n            message = \"Reference voice: enter an audio filepath of a voice to be cloned (mp3, \" \\\n                      \"wav, m4a, flac, ...):\\n\"\n            in_fpath = Path(input(message).replace(\"\\\"\", \"\").replace(\"\\'\", \"\"))\n\n            ## Computing the embedding\n            # First, we load the wav using the function that the speaker encoder provides. This is\n            # important: there is preprocessing that must be applied.\n\n            # The following two methods are equivalent:\n            # - Directly load from the filepath:\n            preprocessed_wav = encoder.preprocess_wav(in_fpath)\n            # - If the wav is already loaded:\n            original_wav, sampling_rate = librosa.load(str(in_fpath))\n            preprocessed_wav = encoder.preprocess_wav(original_wav, sampling_rate)\n            print(\"Loaded file succesfully\")\n\n            # Then we derive the embedding. There are many functions and parameters that the\n            # speaker encoder interfaces. These are mostly for in-depth research. You will typically\n            # only use this function (with its default parameters):\n            embed = encoder.embed_utterance(preprocessed_wav)\n            print(\"Created the embedding\")\n\n\n            ## Generating the spectrogram\n            text = input(\"Write a sentence (+-20 words) to be synthesized:\\n\")\n\n            # If seed is specified, reset torch seed and force synthesizer reload\n            if args.seed is not None:\n                torch.manual_seed(args.seed)\n                synthesizer = Synthesizer(args.syn_model_fpath)\n\n            # The synthesizer works in batch, so you need to put your data in a list or numpy array\n            texts = [text]\n            embeds = [embed]\n            # If you know what the attention layer alignments are, you can retrieve them here by\n            # passing return_alignments=True\n            specs = synthesizer.synthesize_spectrograms(texts, embeds)\n            spec = specs[0]\n            print(\"Created the mel spectrogram\")\n\n\n            ## Generating the waveform\n            print(\"Synthesizing the waveform:\")\n\n            # If seed is specified, reset torch seed and reload vocoder\n            if args.seed is not None:\n                torch.manual_seed(args.seed)\n                vocoder.load_model(args.voc_model_fpath)\n\n            # Synthesizing the waveform is fairly straightforward. Remember that the longer the\n            # spectrogram, the more time-efficient the vocoder.\n            generated_wav = vocoder.infer_waveform(spec)\n\n\n            ## Post-generation\n            # There's a bug with sounddevice that makes the audio cut one second earlier, so we\n            # pad it.\n            generated_wav = np.pad(generated_wav, (0, synthesizer.sample_rate), mode=\"constant\")\n\n            # Trim excess silences to compensate for gaps in spectrograms (issue #53)\n            generated_wav = encoder.preprocess_wav(generated_wav)\n\n            # Play the audio (non-blocking)\n            if not args.no_sound:\n                import sounddevice as sd\n                try:\n                    sd.stop()\n                    sd.play(generated_wav, synthesizer.sample_rate)\n                except sd.PortAudioError as e:\n                    print(\"\\nCaught exception: %s\" % repr(e))\n                    print(\"Continuing without audio playback. Suppress this message with the \\\"--no_sound\\\" flag.\\n\")\n                except:\n                    raise\n\n            # Save it on the disk\n            filename = \"demo_output_%02d.wav\" % num_generated\n            print(generated_wav.dtype)\n            sf.write(filename, generated_wav.astype(np.float32), synthesizer.sample_rate)\n            num_generated += 1\n            print(\"\\nSaved output as %s\\n\\n\" % filename)\n\n\n        except Exception as e:\n            print(\"Caught exception: %s\" % repr(e))\n            print(\"Restarting\\n\")\n",
    "demo_toolbox.py": "import argparse\nimport os\nfrom pathlib import Path\n\nfrom toolbox import Toolbox\nfrom utils.argutils import print_args\nfrom utils.default_models import ensure_default_models\n\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(\n        description=\"Runs the toolbox.\",\n        formatter_class=argparse.ArgumentDefaultsHelpFormatter\n    )\n\n    parser.add_argument(\"-d\", \"--datasets_root\", type=Path, help= \\\n        \"Path to the directory containing your datasets. See toolbox/__init__.py for a list of \"\n        \"supported datasets.\", default=None)\n    parser.add_argument(\"-m\", \"--models_dir\", type=Path, default=\"saved_models\",\n                        help=\"Directory containing all saved models\")\n    parser.add_argument(\"--cpu\", action=\"store_true\", help=\\\n        \"If True, all inference will be done on CPU\")\n    parser.add_argument(\"--seed\", type=int, default=None, help=\\\n        \"Optional random number seed value to make toolbox deterministic.\")\n    args = parser.parse_args()\n    arg_dict = vars(args)\n    print_args(args, parser)\n\n    # Hide GPUs from Pytorch to force CPU processing\n    if arg_dict.pop(\"cpu\"):\n        os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n\n    # Remind the user to download pretrained models if needed\n    ensure_default_models(args.models_dir)\n\n    # Launch the toolbox\n    Toolbox(**arg_dict)\n",
    "encoder/audio.py": "from scipy.ndimage.morphology import binary_dilation\nfrom encoder.params_data import *\nfrom pathlib import Path\nfrom typing import Optional, Union\nfrom warnings import warn\nimport numpy as np\nimport librosa\nimport struct\n\ntry:\n    import webrtcvad\nexcept:\n    warn(\"Unable to import 'webrtcvad'. This package enables noise removal and is recommended.\")\n    webrtcvad=None\n\nint16_max = (2 ** 15) - 1\n\n\ndef preprocess_wav(fpath_or_wav: Union[str, Path, np.ndarray],\n                   source_sr: Optional[int] = None,\n                   normalize: Optional[bool] = True,\n                   trim_silence: Optional[bool] = True):\n    \"\"\"\n    Applies the preprocessing operations used in training the Speaker Encoder to a waveform \n    either on disk or in memory. The waveform will be resampled to match the data hyperparameters.\n\n    :param fpath_or_wav: either a filepath to an audio file (many extensions are supported, not \n    just .wav), either the waveform as a numpy array of floats.\n    :param source_sr: if passing an audio waveform, the sampling rate of the waveform before \n    preprocessing. After preprocessing, the waveform's sampling rate will match the data \n    hyperparameters. If passing a filepath, the sampling rate will be automatically detected and \n    this argument will be ignored.\n    \"\"\"\n    # Load the wav from disk if needed\n    if isinstance(fpath_or_wav, str) or isinstance(fpath_or_wav, Path):\n        wav, source_sr = librosa.load(str(fpath_or_wav), sr=None)\n    else:\n        wav = fpath_or_wav\n    \n    # Resample the wav if needed\n    if source_sr is not None and source_sr != sampling_rate:\n        wav = librosa.resample(wav, source_sr, sampling_rate)\n        \n    # Apply the preprocessing: normalize volume and shorten long silences \n    if normalize:\n        wav = normalize_volume(wav, audio_norm_target_dBFS, increase_only=True)\n    if webrtcvad and trim_silence:\n        wav = trim_long_silences(wav)\n    \n    return wav\n\n\ndef wav_to_mel_spectrogram(wav):\n    \"\"\"\n    Derives a mel spectrogram ready to be used by the encoder from a preprocessed audio waveform.\n    Note: this not a log-mel spectrogram.\n    \"\"\"\n    frames = librosa.feature.melspectrogram(\n        wav,\n        sampling_rate,\n        n_fft=int(sampling_rate * mel_window_length / 1000),\n        hop_length=int(sampling_rate * mel_window_step / 1000),\n        n_mels=mel_n_channels\n    )\n    return frames.astype(np.float32).T\n\n\ndef trim_long_silences(wav):\n    \"\"\"\n    Ensures that segments without voice in the waveform remain no longer than a \n    threshold determined by the VAD parameters in params.py.\n\n    :param wav: the raw waveform as a numpy array of floats \n    :return: the same waveform with silences trimmed away (length <= original wav length)\n    \"\"\"\n    # Compute the voice detection window size\n    samples_per_window = (vad_window_length * sampling_rate) // 1000\n    \n    # Trim the end of the audio to have a multiple of the window size\n    wav = wav[:len(wav) - (len(wav) % samples_per_window)]\n    \n    # Convert the float waveform to 16-bit mono PCM\n    pcm_wave = struct.pack(\"%dh\" % len(wav), *(np.round(wav * int16_max)).astype(np.int16))\n    \n    # Perform voice activation detection\n    voice_flags = []\n    vad = webrtcvad.Vad(mode=3)\n    for window_start in range(0, len(wav), samples_per_window):\n        window_end = window_start + samples_per_window\n        voice_flags.append(vad.is_speech(pcm_wave[window_start * 2:window_end * 2],\n                                         sample_rate=sampling_rate))\n    voice_flags = np.array(voice_flags)\n    \n    # Smooth the voice detection with a moving average\n    def moving_average(array, width):\n        array_padded = np.concatenate((np.zeros((width - 1) // 2), array, np.zeros(width // 2)))\n        ret = np.cumsum(array_padded, dtype=float)\n        ret[width:] = ret[width:] - ret[:-width]\n        return ret[width - 1:] / width\n    \n    audio_mask = moving_average(voice_flags, vad_moving_average_width)\n    audio_mask = np.round(audio_mask).astype(np.bool)\n    \n    # Dilate the voiced regions\n    audio_mask = binary_dilation(audio_mask, np.ones(vad_max_silence_length + 1))\n    audio_mask = np.repeat(audio_mask, samples_per_window)\n    \n    return wav[audio_mask == True]\n\n\ndef normalize_volume(wav, target_dBFS, increase_only=False, decrease_only=False):\n    if increase_only and decrease_only:\n        raise ValueError(\"Both increase only and decrease only are set\")\n    dBFS_change = target_dBFS - 10 * np.log10(np.mean(wav ** 2))\n    if (dBFS_change < 0 and increase_only) or (dBFS_change > 0 and decrease_only):\n        return wav\n    return wav * (10 ** (dBFS_change / 20))\n",
    "encoder/config.py": "librispeech_datasets = {\n    \"train\": {\n        \"clean\": [\"LibriSpeech/train-clean-100\", \"LibriSpeech/train-clean-360\"],\n        \"other\": [\"LibriSpeech/train-other-500\"]\n    },\n    \"test\": {\n        \"clean\": [\"LibriSpeech/test-clean\"],\n        \"other\": [\"LibriSpeech/test-other\"]\n    },\n    \"dev\": {\n        \"clean\": [\"LibriSpeech/dev-clean\"],\n        \"other\": [\"LibriSpeech/dev-other\"]\n    },\n}\nlibritts_datasets = {\n    \"train\": {\n        \"clean\": [\"LibriTTS/train-clean-100\", \"LibriTTS/train-clean-360\"],\n        \"other\": [\"LibriTTS/train-other-500\"]\n    },\n    \"test\": {\n        \"clean\": [\"LibriTTS/test-clean\"],\n        \"other\": [\"LibriTTS/test-other\"]\n    },\n    \"dev\": {\n        \"clean\": [\"LibriTTS/dev-clean\"],\n        \"other\": [\"LibriTTS/dev-other\"]\n    },\n}\nvoxceleb_datasets = {\n    \"voxceleb1\" : {\n        \"train\": [\"VoxCeleb1/wav\"],\n        \"test\": [\"VoxCeleb1/test_wav\"]\n    },\n    \"voxceleb2\" : {\n        \"train\": [\"VoxCeleb2/dev/aac\"],\n        \"test\": [\"VoxCeleb2/test_wav\"]\n    }\n}\n\nother_datasets = [\n    \"LJSpeech-1.1\",\n    \"VCTK-Corpus/wav48\",\n]\n\nanglophone_nationalites = [\"australia\", \"canada\", \"ireland\", \"uk\", \"usa\"]\n",
    "encoder/data_objects/__init__.py": "from encoder.data_objects.speaker_verification_dataset import SpeakerVerificationDataset\nfrom encoder.data_objects.speaker_verification_dataset import SpeakerVerificationDataLoader\n",
    "encoder/data_objects/random_cycler.py": "import random\n\nclass RandomCycler:\n    \"\"\"\n    Creates an internal copy of a sequence and allows access to its items in a constrained random \n    order. For a source sequence of n items and one or several consecutive queries of a total \n    of m items, the following guarantees hold (one implies the other):\n        - Each item will be returned between m // n and ((m - 1) // n) + 1 times.\n        - Between two appearances of the same item, there may be at most 2 * (n - 1) other items.\n    \"\"\"\n    \n    def __init__(self, source):\n        if len(source) == 0:\n            raise Exception(\"Can't create RandomCycler from an empty collection\")\n        self.all_items = list(source)\n        self.next_items = []\n    \n    def sample(self, count: int):\n        shuffle = lambda l: random.sample(l, len(l))\n        \n        out = []\n        while count > 0:\n            if count >= len(self.all_items):\n                out.extend(shuffle(list(self.all_items)))\n                count -= len(self.all_items)\n                continue\n            n = min(count, len(self.next_items))\n            out.extend(self.next_items[:n])\n            count -= n\n            self.next_items = self.next_items[n:]\n            if len(self.next_items) == 0:\n                self.next_items = shuffle(list(self.all_items))\n        return out\n    \n    def __next__(self):\n        return self.sample(1)[0]\n\n",
    "encoder/data_objects/speaker.py": "from encoder.data_objects.random_cycler import RandomCycler\nfrom encoder.data_objects.utterance import Utterance\nfrom pathlib import Path\n\n# Contains the set of utterances of a single speaker\nclass Speaker:\n    def __init__(self, root: Path):\n        self.root = root\n        self.name = root.name\n        self.utterances = None\n        self.utterance_cycler = None\n        \n    def _load_utterances(self):\n        with self.root.joinpath(\"_sources.txt\").open(\"r\") as sources_file:\n            sources = [l.split(\",\") for l in sources_file]\n        sources = {frames_fname: wave_fpath for frames_fname, wave_fpath in sources}\n        self.utterances = [Utterance(self.root.joinpath(f), w) for f, w in sources.items()]\n        self.utterance_cycler = RandomCycler(self.utterances)\n               \n    def random_partial(self, count, n_frames):\n        \"\"\"\n        Samples a batch of <count> unique partial utterances from the disk in a way that all \n        utterances come up at least once every two cycles and in a random order every time.\n        \n        :param count: The number of partial utterances to sample from the set of utterances from \n        that speaker. Utterances are guaranteed not to be repeated if <count> is not larger than \n        the number of utterances available.\n        :param n_frames: The number of frames in the partial utterance.\n        :return: A list of tuples (utterance, frames, range) where utterance is an Utterance, \n        frames are the frames of the partial utterances and range is the range of the partial \n        utterance with regard to the complete utterance.\n        \"\"\"\n        if self.utterances is None:\n            self._load_utterances()\n\n        utterances = self.utterance_cycler.sample(count)\n\n        a = [(u,) + u.random_partial(n_frames) for u in utterances]\n\n        return a\n",
    "encoder/data_objects/speaker_batch.py": "import numpy as np\nfrom typing import List\nfrom encoder.data_objects.speaker import Speaker\n\n\nclass SpeakerBatch:\n    def __init__(self, speakers: List[Speaker], utterances_per_speaker: int, n_frames: int):\n        self.speakers = speakers\n        self.partials = {s: s.random_partial(utterances_per_speaker, n_frames) for s in speakers}\n\n        # Array of shape (n_speakers * n_utterances, n_frames, mel_n), e.g. for 3 speakers with\n        # 4 utterances each of 160 frames of 40 mel coefficients: (12, 160, 40)\n        self.data = np.array([frames for s in speakers for _, frames, _ in self.partials[s]])\n",
    "encoder/data_objects/speaker_verification_dataset.py": "from encoder.data_objects.random_cycler import RandomCycler\nfrom encoder.data_objects.speaker_batch import SpeakerBatch\nfrom encoder.data_objects.speaker import Speaker\nfrom encoder.params_data import partials_n_frames\nfrom torch.utils.data import Dataset, DataLoader\nfrom pathlib import Path\n\n# TODO: improve with a pool of speakers for data efficiency\n\nclass SpeakerVerificationDataset(Dataset):\n    def __init__(self, datasets_root: Path):\n        self.root = datasets_root\n        speaker_dirs = [f for f in self.root.glob(\"*\") if f.is_dir()]\n        if len(speaker_dirs) == 0:\n            raise Exception(\"No speakers found. Make sure you are pointing to the directory \"\n                            \"containing all preprocessed speaker directories.\")\n        self.speakers = [Speaker(speaker_dir) for speaker_dir in speaker_dirs]\n        self.speaker_cycler = RandomCycler(self.speakers)\n\n    def __len__(self):\n        return int(1e10)\n        \n    def __getitem__(self, index):\n        return next(self.speaker_cycler)\n    \n    def get_logs(self):\n        log_string = \"\"\n        for log_fpath in self.root.glob(\"*.txt\"):\n            with log_fpath.open(\"r\") as log_file:\n                log_string += \"\".join(log_file.readlines())\n        return log_string\n    \n    \nclass SpeakerVerificationDataLoader(DataLoader):\n    def __init__(self, dataset, speakers_per_batch, utterances_per_speaker, sampler=None, \n                 batch_sampler=None, num_workers=0, pin_memory=False, timeout=0, \n                 worker_init_fn=None):\n        self.utterances_per_speaker = utterances_per_speaker\n\n        super().__init__(\n            dataset=dataset, \n            batch_size=speakers_per_batch, \n            shuffle=False, \n            sampler=sampler, \n            batch_sampler=batch_sampler, \n            num_workers=num_workers,\n            collate_fn=self.collate, \n            pin_memory=pin_memory, \n            drop_last=False, \n            timeout=timeout, \n            worker_init_fn=worker_init_fn\n        )\n\n    def collate(self, speakers):\n        return SpeakerBatch(speakers, self.utterances_per_speaker, partials_n_frames) \n    "
  },
  "requirements": "﻿inflect==5.3.0\r\nlibrosa==0.8.1\r\nmatplotlib==3.5.1\r\nnumpy==1.20.3\r\nPillow==8.4.0\r\nPyQt5==5.15.6\r\nscikit-learn==1.0.2\r\nscipy==1.7.3\r\nsounddevice==0.4.3\r\nSoundFile==0.10.3.post1\r\ntqdm==4.62.3\r\numap-learn==0.5.2\r\nUnidecode==1.3.2\r\nurllib3==1.26.7\r\nvisdom==0.1.8.9\r\nwebrtcvad==2.0.10\r\n"
}