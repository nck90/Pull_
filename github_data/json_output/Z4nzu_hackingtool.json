{
  "repo_name": "Z4nzu/hackingtool",
  "repo_url": "https://github.com/Z4nzu/hackingtool",
  "description": "ALL IN ONE Hacking Tool For Hackers",
  "stars": 51915,
  "language": "Python",
  "created_at": "2020-04-11T09:21:31Z",
  "updated_at": "2025-03-19T06:35:56Z",
  "files": {
    "core.py": "import os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom traceback import print_exc\nfrom typing import Callable\nfrom typing import List\nfrom typing import Tuple\n\n\ndef clear_screen():\n    os.system(\"cls\" if system() == \"Windows\" else \"clear\")\n\n\ndef validate_input(ip, val_range):\n    val_range = val_range or []\n    try:\n        ip = int(ip)\n        if ip in val_range:\n            return ip\n    except Exception:\n        return None\n    return None\n\n\nclass HackingTool(object):\n    # About the HackingTool\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n\n    INSTALL_COMMANDS: List[str] = []\n    INSTALLATION_DIR: str = \"\"\n\n    UNINSTALL_COMMANDS: List[str] = []\n\n    RUN_COMMANDS: List[str] = []\n\n    OPTIONS: List[Tuple[str, Callable]] = []\n\n    PROJECT_URL: str = \"\"\n\n    def __init__(self, options = None, installable: bool = True,\n                 runnable: bool = True):\n        options = options or []\n        if isinstance(options, list):\n            self.OPTIONS = []\n            if installable:\n                self.OPTIONS.append(('Install', self.install))\n            if runnable:\n                self.OPTIONS.append(('Run', self.run))\n            self.OPTIONS.extend(options)\n        else:\n            raise Exception(\n                \"options must be a list of (option_name, option_fn) tuples\")\n\n    def show_info(self):\n        desc = self.DESCRIPTION\n        if self.PROJECT_URL:\n            desc += '\\n\\t[*] '\n            desc += self.PROJECT_URL\n        os.system(f'echo \"{desc}\"|boxes -d boy | lolcat')\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, option in enumerate(self.OPTIONS):\n            print(f\"[{index + 1}] {option[0]}\")\n        if self.PROJECT_URL:\n            print(f\"[{98}] Open project page\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        option_index = input(\"Select an option : \").strip()\n        try:\n            option_index = int(option_index)\n            if option_index - 1 in range(len(self.OPTIONS)):\n                ret_code = self.OPTIONS[option_index - 1][1]()\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif option_index == 98:\n                self.show_project_page()\n            elif option_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n\n    def before_install(self):\n        pass\n\n    def install(self):\n        self.before_install()\n        if isinstance(self.INSTALL_COMMANDS, (list, tuple)):\n            for INSTALL_COMMAND in self.INSTALL_COMMANDS:\n                os.system(INSTALL_COMMAND)\n            self.after_install()\n\n    def after_install(self):\n        print(\"Successfully installed!\")\n\n    def before_uninstall(self) -> bool:\n        \"\"\" Ask for confirmation from the user and return \"\"\"\n        return True\n\n    def uninstall(self):\n        if self.before_uninstall():\n            if isinstance(self.UNINSTALL_COMMANDS, (list, tuple)):\n                for UNINSTALL_COMMAND in self.UNINSTALL_COMMANDS:\n                    os.system(UNINSTALL_COMMAND)\n            self.after_uninstall()\n\n    def after_uninstall(self):\n        pass\n\n    def before_run(self):\n        pass\n\n    def run(self):\n        self.before_run()\n        if isinstance(self.RUN_COMMANDS, (list, tuple)):\n            for RUN_COMMAND in self.RUN_COMMANDS:\n                os.system(RUN_COMMAND)\n            self.after_run()\n\n    def after_run(self):\n        pass\n\n    def is_installed(self, dir_to_check = None):\n        print(\"Unimplemented: DO NOT USE\")\n        return \"?\"\n\n    def show_project_page(self):\n        webbrowser.open_new_tab(self.PROJECT_URL)\n\n\nclass HackingToolsCollection(object):\n    TITLE: str = \"\"  # used to show info in the menu\n    DESCRIPTION: str = \"\"\n    TOOLS = []  # type: List[Any[HackingTool, HackingToolsCollection]]\n\n    def __init__(self):\n        pass\n\n    def show_info(self):\n        os.system(\"figlet -f standard -c {} | lolcat\".format(self.TITLE))\n        # os.system(f'echo \"{self.DESCRIPTION}\"|boxes -d boy | lolcat')\n        # print(self.DESCRIPTION)\n\n    def show_options(self, parent = None):\n        clear_screen()\n        self.show_info()\n        for index, tool in enumerate(self.TOOLS):\n            print(f\"[{index} {tool.TITLE}\")\n        print(f\"[{99}] Back to {parent.TITLE if parent is not None else 'Exit'}\")\n        tool_index = input(\"Choose a tool to proceed: \").strip()\n        try:\n            tool_index = int(tool_index)\n            if tool_index in range(len(self.TOOLS)):\n                ret_code = self.TOOLS[tool_index].show_options(parent = self)\n                if ret_code != 99:\n                    input(\"\\n\\nPress ENTER to continue:\").strip()\n            elif tool_index == 99:\n                if parent is None:\n                    sys.exit()\n                return 99\n        except (TypeError, ValueError):\n            print(\"Please enter a valid option\")\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        except Exception:\n            print_exc()\n            input(\"\\n\\nPress ENTER to continue:\").strip()\n        return self.show_options(parent = parent)\n",
    "generate_readme.py": "import re\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom hackingtool import all_tools\n\n\ndef sanitize_anchor(s):\n    return re.sub(r\"\\W\", \"-\", s.lower())\n\n\ndef get_toc(tools, indentation = \"\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"- [{}](#{})\\n\".format(\n                tool.TITLE, sanitize_anchor(tool.TITLE)))\n            md += get_toc(tool.TOOLS, indentation = indentation + '    ')\n    return md\n\n\ndef get_tools_toc(tools, indentation = \"##\"):\n    md = \"\"\n    for tool in tools:\n        if isinstance(tool, HackingToolsCollection):\n            md += (indentation + \"# {}\\n\".format(tool.TITLE))\n            md += get_tools_toc(tool.TOOLS, indentation = indentation + '#')\n        elif isinstance(tool, HackingTool):\n            if tool.PROJECT_URL:\n                md += (\"- [{}]({})\\n\".format(tool.TITLE, tool.PROJECT_URL))\n            else:\n                md += (\"- {}\\n\".format(tool.TITLE))\n    return md\n\n\ndef generate_readme():\n    toc = get_toc(all_tools[:-1])\n    tools_desc = get_tools_toc(all_tools[:-1])\n\n    with open(\"README_template.md\") as fh:\n        readme_template = fh.read()\n\n    readme_template = readme_template.replace(\"{{toc}}\", toc)\n    readme_template = readme_template.replace(\"{{tools}}\", tools_desc)\n\n    with open(\"README.md\", \"w\") as fh:\n        fh.write(readme_template)\n\n\nif __name__ == '__main__':\n    generate_readme()\n",
    "hackingtool.py": "#!/usr/bin/env python3\n# Version 1.1.0\nimport os\nimport sys\nimport webbrowser\nfrom platform import system\nfrom time import sleep\n\nfrom core import HackingToolsCollection\nfrom tools.anonsurf import AnonSurfTools\nfrom tools.ddos import DDOSTools\nfrom tools.exploit_frameworks import ExploitFrameworkTools\nfrom tools.forensic_tools import ForensicTools\nfrom tools.information_gathering_tools import InformationGatheringTools\nfrom tools.other_tools import OtherTools\nfrom tools.payload_creator import PayloadCreatorTools\nfrom tools.phising_attack import PhishingAttackTools\nfrom tools.post_exploitation import PostExploitationTools\nfrom tools.remote_administration import RemoteAdministrationTools\nfrom tools.reverse_engineering import ReverseEngineeringTools\nfrom tools.sql_tools import SqlInjectionTools\nfrom tools.steganography import SteganographyTools\nfrom tools.tool_manager import ToolManager\nfrom tools.webattack import WebAttackTools\nfrom tools.wireless_attack_tools import WirelessAttackTools\nfrom tools.wordlist_generator import WordlistGeneratorTools\nfrom tools.xss_attack import XSSAttackTools\n\nlogo = \"\"\"\\033[33m\n   ▄█    █▄       ▄████████  ▄████████    ▄█   ▄█▄  ▄█  ███▄▄▄▄      ▄██████▄           ███      ▄██████▄   ▄██████▄   ▄█       \n  ███    ███     ███    ███ ███    ███   ███ ▄███▀ ███  ███▀▀▀██▄   ███    ███      ▀█████████▄ ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    █▀    ███▐██▀   ███▌ ███   ███   ███    █▀          ▀███▀▀██ ███    ███ ███    ███ ███       \n ▄███▄▄▄▄███▄▄   ███    ███ ███         ▄█████▀    ███▌ ███   ███  ▄███                 ███   ▀ ███    ███ ███    ███ ███       \n▀▀███▀▀▀▀███▀  ▀███████████ ███        ▀▀█████▄    ███▌ ███   ███ ▀▀███ ████▄           ███     ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    █▄    ███▐██▄   ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███       \n  ███    ███     ███    ███ ███    ███   ███ ▀███▄ ███  ███   ███   ███    ███          ███     ███    ███ ███    ███ ███▌    ▄ \n  ███    █▀      ███    █▀  ████████▀    ███   ▀█▀ █▀    ▀█   █▀    ████████▀          ▄████▀    ▀██████▀   ▀██████▀  █████▄▄██ \n                                         ▀                                                                            ▀                             \n                                    \\033[34m[✔] https://github.com/Z4nzu/hackingtool   [✔]\n                                    \\033[34m[✔]            Version 1.1.0               [✔]\n                                    \\033[91m[X] Please Don't Use For illegal Activity  [X]\n\\033[97m \"\"\"\n\nall_tools = [\n    AnonSurfTools(),\n    InformationGatheringTools(),\n    WordlistGeneratorTools(),\n    WirelessAttackTools(),\n    SqlInjectionTools(),\n    PhishingAttackTools(),\n    WebAttackTools(),\n    PostExploitationTools(),\n    ForensicTools(),\n    PayloadCreatorTools(),\n    ExploitFrameworkTools(),\n    ReverseEngineeringTools(),\n    DDOSTools(),\n    RemoteAdministrationTools(),\n    XSSAttackTools(),\n    SteganographyTools(),\n    OtherTools(),\n    ToolManager()\n]\n\n\nclass AllTools(HackingToolsCollection):\n    TITLE = \"All tools\"\n    TOOLS = all_tools\n\n    def show_info(self):\n        print(logo + '\\033[0m \\033[97m')\n\n\nif __name__ == \"__main__\":\n    try:\n        if system() == 'Linux':\n            fpath = os.path.expanduser(\"~/hackingtoolpath.txt\")\n            if not os.path.exists(fpath):\n                os.system('clear')\n                # run.menu()\n                print(\"\"\"\n                        [@] Set Path (All your tools will be installed in that directory)\n                        [1] Manual \n                        [2] Default\n                \"\"\")\n                choice = input(\"Z4nzu =>> \").strip()\n\n                if choice == \"1\":\n                    inpath = input(\"Enter Path (with Directory Name) >> \").strip()\n                    with open(fpath, \"w\") as f:\n                        f.write(inpath)\n                    print(\"Successfully Set Path to: {}\".format(inpath))\n                elif choice == \"2\":\n                    autopath = \"/home/hackingtool/\"\n                    with open(fpath, \"w\") as f:\n                        f.write(autopath)\n                    print(\"Your Default Path Is: {}\".format(autopath))\n                    sleep(3)\n                else:\n                    print(\"Try Again..!!\")\n                    sys.exit(0)\n\n            with open(fpath) as f:\n                archive = f.readline()\n                os.makedirs(archive, exist_ok=True)\n                os.chdir(archive)\n                AllTools().show_options()\n\n        # If not Linux and probably Windows\n        elif system() == \"Windows\":\n            print(\n                r\"\\033[91m Please Run This Tool On A Debian System For Best Results\\e[00m\"\n            )\n            sleep(2)\n            webbrowser.open_new_tab(\"https://tinyurl.com/y522modc\")\n\n        else:\n            print(\"Please Check Your System or Open New Issue ...\")\n\n    except KeyboardInterrupt:\n        print(\"\\nExiting ..!!!\")\n        sleep(2)\n",
    "tools/anonsurf.py": "# coding=utf-8\nimport os\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass AnonymouslySurf(HackingTool):\n    TITLE = \"Anonymously Surf\"\n    DESCRIPTION = \"It automatically overwrites the RAM when\\n\" \\\n                  \"the system is shutting down and also change Ip.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Und3rf10w/kali-anonsurf.git\",\n        \"cd kali-anonsurf && sudo ./installer.sh && cd .. && sudo rm -r kali-anonsurf\"\n    ]\n    RUN_COMMANDS = [\"sudo anonsurf start\"]\n    PROJECT_URL = \"https://github.com/Und3rf10w/kali-anonsurf\"\n\n    def __init__(self):\n        super(AnonymouslySurf, self).__init__([('Stop', self.stop)])\n\n    def stop(self):\n        os.system(\"sudo anonsurf stop\")\n\n\nclass Multitor(HackingTool):\n    TITLE = \"Multitor\"\n    DESCRIPTION = \"How to stay in multi places at the same time\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/trimstray/multitor.git\",\n        \"cd multitor;sudo bash setup.sh install\"\n    ]\n    RUN_COMMANDS = [\"multitor --init 2 --user debian-tor --socks-port 9000 --control-port 9900 --proxy privoxy --haproxy\"]\n    PROJECT_URL = \"https://github.com/trimstray/multitor\"\n\n    def __init__(self):\n        super(Multitor, self).__init__(runnable = False)\n\n\nclass AnonSurfTools(HackingToolsCollection):\n    TITLE = \"Anonymously Hiding Tools\"\n    DESCRIPTION = \"\"\n    TOOLS = [\n        AnonymouslySurf(),\n        Multitor()\n    ]\n",
    "tools/ddos.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass ddos(HackingTool):\n    TITLE = \"ddos\"\n    DESCRIPTION = (\n        \"Best DDoS Attack Script With 36 Plus Methods.\"\n        \"DDoS attacks\\n\\b \"\n        \"for SECURITY TESTING PURPOSES ONLY! \"\n    )\n\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/the-deepnet/ddos.git\",\n        \"cd ddos;sudo pip3 install -r requirements.txt\",\n    ]\n    PROJECT_URL = \"https://github.com/the-deepnet/ddos.git\"\n\n    def run(self):\n        method = input(\"Enter Method >> \")\n        url = input(\"Enter URL >> \")\n        threads = input(\"Enter Threads >> \")\n        proxylist = input(\" Enter ProxyList >> \")\n        multiple = input(\" Enter Multiple >> \")\n        timer = input(\" Enter Timer >> \")\n        os.system(\"cd ddos;\")\n        subprocess.run(\n            [\n                \"sudo\",\n                \"python3 ddos\",\n                method,\n                url,\n                \"socks_type5.4.1\",\n                threads,\n                proxylist,\n                multiple,\n                timer,\n            ]\n        )\n\n\nclass SlowLoris(HackingTool):\n    TITLE = \"SlowLoris\"\n    DESCRIPTION = (\n        \"Slowloris is basically an HTTP Denial of Service attack.\"\n        \"It send lots of HTTP Request\"\n    )\n    INSTALL_COMMANDS = [\"sudo pip3 install slowloris\"]\n\n    def run(self):\n        target_site = input(\"Enter Target Site:- \")\n        subprocess.run([\"slowloris\", target_site])\n\n\nclass Asyncrone(HackingTool):\n    TITLE = \"Asyncrone | Multifunction SYN Flood DDoS Weapon\"\n    DESCRIPTION = (\n        \"aSYNcrone is a C language based, mulltifunction SYN Flood \"\n        \"DDoS Weapon.\\nDisable the destination system by sending a \"\n        \"SYN packet intensively to the destination.\"\n    )\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/fatih4842/aSYNcrone.git\",\n        \"cd aSYNcrone;sudo gcc aSYNcrone.c -o aSYNcrone -lpthread\",\n    ]\n    PROJECT_URL = \"https://github.com/fatihsnsy/aSYNcrone\"\n\n    def run(self):\n        source_port = input(\"Enter Source Port >> \")\n        target_ip = input(\"Enter Target IP >> \")\n        target_port = input(\"Enter Target port >> \")\n        os.system(\"cd aSYNcrone;\")\n        subprocess.run(\n            [\"sudo\", \"./aSYNcrone\", source_port, target_ip, target_port, 1000]\n        )\n\n\nclass UFONet(HackingTool):\n    TITLE = \"UFOnet\"\n    DESCRIPTION = (\n        \"UFONet - is a free software, P2P and cryptographic \"\n        \"-disruptive \\n toolkit- that allows to perform DoS and \"\n        \"DDoS attacks\\n\\b \"\n        \"More Usage Visit\"\n    )\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/epsylon/ufonet.git\",\n        \"cd ufonet;sudo python3 setup.py install;sudo pip3 install GeoIP;sudo pip3 install python-geoip;sudo pip3 install pygeoip;sudo pip3 install requests;sudo pip3 install pycrypto;sudo pip3 install pycurl;sudo pip3 install whois;sudo pip3 install scapy-python3\",\n    ]\n    RUN_COMMANDS = [\"sudo python3 ufonet --gui\"]\n    PROJECT_URL = \"https://github.com/epsylon/ufonet\"\n\n\nclass GoldenEye(HackingTool):\n    TITLE = \"GoldenEye\"\n    DESCRIPTION = (\n        \"GoldenEye is a python3 app for SECURITY TESTING PURPOSES ONLY!\\n\"\n        \"GoldenEye is a HTTP DoS Test Tool.\"\n    )\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/jseidl/GoldenEye.git;\"\n        \"chmod -R 755 GoldenEye\"\n    ]\n    PROJECT_URL = \"https://github.com/jseidl/GoldenEye\"\n\n    def run(self):\n        os.system(\"cd GoldenEye ;sudo ./goldeneye.py\")\n        print(\"\\033[96m Go to Directory \\n [*] USAGE: ./goldeneye.py <url> [OPTIONS]\")\n\n\nclass Saphyra(HackingTool):\n    TITLE = \"SaphyraDDoS\"\n    DESCRIPTION = \"A complex python code to DDoS any website with a very easy usage.!\\n\"\n    INSTALL_COMMANDS = [\n        \"sudo su\",\n        \"git clone https://github.com/anonymous24x7/Saphyra-DDoS.git\",\n        \"cd Saphyra-DDoS\",\n        \"chmod +x saphyra.py\",\n        \"python saphyra.py\",\n    ]\n    PROJECT_URL = \"https://github.com/anonymous24x7/Saphyra-DDoS\"\n\n    def run(self):\n        url = input(\"Enter url>>> \")\n        try:\n            os.system(\"python saphyra.py \" + url)\n        except Exception:\n            print(\"Enter a valid url.\")\n\n\nclass DDOSTools(HackingToolsCollection):\n    TITLE = \"DDOS Attack Tools\"\n    TOOLS = [SlowLoris(), Asyncrone(), UFONet(), GoldenEye(), Saphyra()]\n",
    "tools/exploit_frameworks.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom tools.webattack import Web2Attack\n\n\nclass RouterSploit(HackingTool):\n    TITLE = \"RouterSploit\"\n    DESCRIPTION = \"The RouterSploit Framework is an open-source exploitation \" \\\n                  \"framework dedicated to embedded devices\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/threat9/routersploit.git\",\n        \"cd routersploit && sudo python3 -m pip install -r requirements.txt\"\n    ]\n    RUN_COMMANDS = [\"cd routersploit && sudo python3 rsf.py\"]\n    PROJECT_URL = \"https://github.com/threat9/routersploit\"\n\n\nclass WebSploit(HackingTool):\n    TITLE = \"WebSploit\"\n    DESCRIPTION = \"Websploit is an advanced MITM framework.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/The404Hacking/websploit.git;cd websploit/Setup;sudo chmod +x install.sh && sudo bash install.sh\"\n    ]\n    RUN_COMMANDS = [\"sudo websploit\"]\n    PROJECT_URL = \"https://github.com/The404Hacking/websploit \"\n\n\nclass Commix(HackingTool):\n    TITLE = \"Commix\"\n    DESCRIPTION = \"Automated All-in-One OS command injection and exploitation \" \\\n                  \"tool.\\nCommix can be used from web developers, penetration \" \\\n                  \"testers or even security researchers\\n in order to test \" \\\n                  \"web-based applications with the view to find bugs,\\n \" \\\n                  \"errors or vulnerabilities related to command injection \" \\\n                  \"attacks.\\n Usage: python commix.py [option(s)]\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/commixproject/commix.git commix\",\n        \"cd commix;sudo python setup.py install\"\n    ]\n    RUN_COMMANDS = [\"sudo python commix.py --wizard\"]\n    PROJECT_URL = \"https://github.com/commixproject/commix\"\n\n    def __init__(self):\n        super(Commix, self).__init__(runnable = False)\n\n\nclass ExploitFrameworkTools(HackingToolsCollection):\n    TITLE = \"Exploit framework\"\n    TOOLS = [\n        RouterSploit(),\n        WebSploit(),\n        Commix(),\n        Web2Attack()\n    ]\n",
    "tools/forensic_tools.py": "# coding=utf-8\nimport os\n\nimport sys\n\n# Fetching parent directory for importing core.py\ncurrent_dir = os.path.dirname(__file__)\nparent_dir = os.path.dirname(current_dir)\nsys.path.append(parent_dir)\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Autopsy(HackingTool):\n    TITLE = \"Autopsy\"\n    DESCRIPTION = \"Autopsy is a platform that is used by Cyber Investigators.\\n\" \\\n                  \"[!] Works in any OS\\n\" \\\n                  \"[!] Recover Deleted Files from any OS & Media \\n\" \\\n                  \"[!] Extract Image Metadata\"\n    RUN_COMMANDS = [\"sudo autopsy\"]\n\n    def __init__(self):\n        super(Autopsy, self).__init__(installable = False)\n\n\nclass Wireshark(HackingTool):\n    TITLE = \"Wireshark\"\n    DESCRIPTION = \"Wireshark is a network capture and analyzer \\n\" \\\n                  \"tool to see what’s happening in your network.\\n \" \\\n                  \"And also investigate Network related incident\"\n    RUN_COMMANDS = [\"sudo wireshark\"]\n\n    def __init__(self):\n        super(Wireshark, self).__init__(installable = False)\n\n\nclass BulkExtractor(HackingTool):\n    TITLE = \"Bulk extractor\"\n    DESCRIPTION = \"Extract useful information without parsing the file system\"\n    PROJECT_URL = \"https://github.com/simsong/bulk_extractor\"\n\n    def __init__(self):\n        super(BulkExtractor, self).__init__([\n            ('GUI Mode (Download required)', self.gui_mode),\n            ('CLI Mode', self.cli_mode)\n        ], installable = False, runnable = False)\n\n    def gui_mode(self):\n        os.system(\n            \"sudo git clone https://github.com/simsong/bulk_extractor.git\")\n        os.system(\"ls src/ && cd .. && cd java_gui && ./BEViewer\")\n        print(\n            \"If you getting error after clone go to /java_gui/src/ And Compile .Jar file && run ./BEViewer\")\n        print(\n            \"Please Visit For More Details About Installation >> https://github.com/simsong/bulk_extractor\")\n\n    def cli_mode(self):\n        os.system(\"sudo apt install bulk-extractor\")\n        print(\"bulk_extractor and options\")\n        os.system(\"bulk_extractor -h\")\n        os.system(\n            'echo \"bulk_extractor [options] imagefile\" | boxes -d headline | lolcat')\n\n\nclass Guymager(HackingTool):\n    TITLE = \"Disk Clone and ISO Image Acquire\"\n    DESCRIPTION = \"Guymager is a free forensic imager for media acquisition.\"\n    INSTALL_COMMANDS = [\"sudo apt install guymager\"]\n    RUN_COMMANDS = [\"sudo guymager\"]\n    PROJECT_URL = \"https://guymager.sourceforge.io/\"\n\n\nclass Toolsley(HackingTool):\n    TITLE = \"Toolsley\"\n    DESCRIPTION = \"Toolsley got more than ten useful tools for investigation.\\n\" \\\n                  \"[+]File signature verifier\\n\" \\\n                  \"[+]File identifier \\n\" \\\n                  \"[+]Hash & Validate \\n\" \\\n                  \"[+]Binary inspector \\n \" \\\n                  \"[+]Encode text \\n\" \\\n                  \"[+]Data URI generator \\n\" \\\n                  \"[+]Password generator\"\n    PROJECT_URL = \"https://www.toolsley.com/\"\n\n    def __init__(self):\n        super(Toolsley, self).__init__(installable = False, runnable = False)\n\n\nclass ForensicTools(HackingToolsCollection):\n    TITLE = \"Forensic tools\"\n    TOOLS = [\n        Autopsy(),\n        Wireshark(),\n        BulkExtractor(),\n        Guymager(),\n        Toolsley()\n    ]\n",
    "tools/information_gathering_tools.py": "# coding=utf-8\nimport os\nimport socket\nimport subprocess\nimport webbrowser\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom core import clear_screen\n\n\nclass NMAP(HackingTool):\n    TITLE = \"Network Map (nmap)\"\n    DESCRIPTION = \"Free and open source utility for network discovery and security auditing\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/nmap/nmap.git\",\n        \"sudo chmod -R 755 nmap && cd nmap && sudo ./configure && make && sudo make install\"\n    ]\n    PROJECT_URL = \"https://github.com/nmap/nmap\"\n\n    def __init__(self):\n        super(NMAP, self).__init__(runnable = False)\n\n\nclass Dracnmap(HackingTool):\n    TITLE = \"Dracnmap\"\n    DESCRIPTION = \"Dracnmap is an open source program which is using to \\n\" \\\n                  \"exploit the network and gathering information with nmap help.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/Screetsec/Dracnmap.git\",\n        \"cd Dracnmap && chmod +x dracnmap-v2.2-dracOs.sh  dracnmap-v2.2.sh\"\n    ]\n    RUN_COMMANDS = [\"cd Dracnmap;sudo ./dracnmap-v2.2.sh\"]\n    PROJECT_URL = \"https://github.com/Screetsec/Dracnmap\"\n\n#    def __init__(self):\n#        super(Dracnmap, self).__init__(runnable = False)\n\n\nclass PortScan(HackingTool):\n    TITLE = \"Port scanning\"\n\n    def __init__(self):\n        super(PortScan, self).__init__(installable = False)\n\n    def run(self):\n        clear_screen()\n        target = input('Select a Target IP: ')\n        subprocess.run([\"sudo\", \"nmap\", \"-O\", \"-Pn\", target])\n\n\nclass Host2IP(HackingTool):\n    TITLE = \"Host to IP \"\n\n    def __init__(self):\n        super(Host2IP, self).__init__(installable = False)\n\n    def run(self):\n        clear_screen()\n        host = input(\"Enter host name (e.g. www.google.com):-  \")\n        ips = socket.gethostbyname(host)\n        print(ips)\n\n\nclass XeroSploit(HackingTool):\n    TITLE = \"Xerosploit\"\n    DESCRIPTION = \"Xerosploit is a penetration testing toolkit whose goal is to perform\\n\" \\\n                  \"man-in-the-middle attacks for testing purposes\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/LionSec/xerosploit.git\",\n        \"cd xerosploit && sudo python install.py\"\n    ]\n    RUN_COMMANDS = [\"sudo xerosploit\"]\n    PROJECT_URL = \"https://github.com/LionSec/xerosploit\"\n\n\nclass RedHawk(HackingTool):\n    TITLE = \"RED HAWK (All In One Scanning)\"\n    DESCRIPTION = \"All in one tool for Information Gathering and Vulnerability Scanning.\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/Tuhinshubhra/RED_HAWK.git\"]\n    RUN_COMMANDS = [\"cd RED_HAWK;php rhawk.php\"]\n    PROJECT_URL = \"https://github.com/Tuhinshubhra/RED_HAWK\"\n\n\nclass ReconSpider(HackingTool):\n    TITLE = \"ReconSpider(For All Scanning)\"\n    DESCRIPTION = \"ReconSpider is most Advanced Open Source Intelligence (OSINT)\" \\\n                  \" Framework for scanning IP Address, Emails, \\n\" \\\n                  \"Websites, Organizations and find out information from\" \\\n                  \" different sources.\\n\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/bhavsec/reconspider.git\",\n        \"sudo apt install python3 python3-pip && cd reconspider && sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd reconspider;python3 reconspider.py\"]\n    PROJECT_URL = \"https://github.com/bhavsec/reconspider\"\n\n#    def __init__(self):\n#        super(ReconSpider, self).__init__(runnable = False)\n\n\nclass IsItDown(HackingTool):\n    TITLE = \"IsItDown (Check Website Down/Up)\"\n    DESCRIPTION = \"Check Website Is Online or Not\"\n\n    def __init__(self):\n        super(IsItDown, self).__init__(\n            [('Open', self.open)], installable = False, runnable = False)\n\n    def open(self):\n        webbrowser.open_new_tab(\"https://www.isitdownrightnow.com/\")\n\n\nclass Infoga(HackingTool):\n    TITLE = \"Infoga - Email OSINT\"\n    DESCRIPTION = \"Infoga is a tool gathering email accounts information\\n\" \\\n                  \"(ip, hostname, country,...) from different public source\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/m4ll0k/Infoga.git\",\n        \"cd Infoga;sudo python3 setup.py install\"\n    ]\n    RUN_COMMANDS = [\"cd Infoga;python3 infoga.py\"]\n    PROJECT_URL = \"https://github.com/m4ll0k/Infoga\"\n\n\nclass ReconDog(HackingTool):\n    TITLE = \"ReconDog\"\n    DESCRIPTION = \"ReconDog Information Gathering Suite\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/s0md3v/ReconDog.git\"]\n    RUN_COMMANDS = [\"cd ReconDog;sudo python dog\"]\n    PROJECT_URL = \"https://github.com/s0md3v/ReconDog\"\n\n\nclass Striker(HackingTool):\n    TITLE = \"Striker\"\n    DESCRIPTION = \"Recon & Vulnerability Scanning Suite\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/s0md3v/Striker.git\",\n        \"cd Striker && pip3 install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/s0md3v/Striker\"\n\n    def run(self):\n        site = input(\"Enter Site Name (example.com) >> \")\n        os.chdir(\"Striker\")\n        subprocess.run([\"sudo\", \"python3\", \"striker.py\", site])\n\n\nclass SecretFinder(HackingTool):\n    TITLE = \"SecretFinder (like API & etc)\"\n    DESCRIPTION = \"SecretFinder - A python script for find sensitive data \\n\" \\\n                  \"like apikeys, accesstoken, authorizations, jwt,..etc \\n \" \\\n                  \"and search anything on javascript files.\\n\\n \" \\\n                  \"Usage: python SecretFinder.py -h\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/m4ll0k/SecretFinder.git secretfinder\",\n        \"cd secretfinder; sudo pip3 install -r requirements.txt\"\n    ]\n    PROJECT_URL = \"https://github.com/m4ll0k/SecretFinder\"\n\n    def __init__(self):\n        super(SecretFinder, self).__init__(runnable = False)\n\n\nclass Shodan(HackingTool):\n    TITLE = \"Find Info Using Shodan\"\n    DESCRIPTION = \"Get ports, vulnerabilities, information, banners,..etc \\n \" \\\n                  \"for any IP with Shodan (no apikey! no rate limit!)\\n\" \\\n                  \"[X] Don't use this tool because your ip will be blocked by Shodan!\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/m4ll0k/Shodanfy.py.git\"]\n    PROJECT_URL = \"https://github.com/m4ll0k/Shodanfy.py\"\n\n    def __init__(self):\n        super(Shodan, self).__init__(runnable = False)\n\n\nclass PortScannerRanger(HackingTool):\n    TITLE = \"Port Scanner - rang3r\"\n    DESCRIPTION = \"rang3r is a python script which scans in multi thread\\n \" \\\n                  \"all alive hosts within your range that you specify.\"\n    INSTALL_COMMANDS = [\n        \"git clone https://github.com/floriankunushevci/rang3r.git;\"\n        \"sudo pip install termcolor\"]\n    PROJECT_URL = \"https://github.com/floriankunushevci/rang3r\"\n\n    def run(self):\n        ip = input(\"Enter Ip >> \")\n        os.chdir(\"rang3r\")\n        subprocess.run([\"sudo\", \"python\", \"rang3r.py\", \"--ip\", ip])\n\n\nclass Breacher(HackingTool):\n    TITLE = \"Breacher\"\n    DESCRIPTION = \"An advanced multithreaded admin panel finder written in python.\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/s0md3v/Breacher.git\"]\n    PROJECT_URL = \"https://github.com/s0md3v/Breacher\"\n    \n    def run(self):\n        domain = input(\"Enter domain (example.com) >> \")\n        os.chdir(\"Breacher\")\n        subprocess.run([\"python3\", \"breacher.py\", \"-u\", domain])\n\nclass InformationGatheringTools(HackingToolsCollection):\n    TITLE = \"Information gathering tools\"\n    TOOLS = [\n        NMAP(),\n        Dracnmap(),\n        PortScan(),\n        Host2IP(),\n        XeroSploit(),\n        RedHawk(),\n        ReconSpider(),\n        IsItDown(),\n        Infoga(),\n        ReconDog(),\n        Striker(),\n        SecretFinder(),\n        Shodan(),\n        PortScannerRanger(),\n        Breacher()\n    ]\n",
    "tools/other_tools.py": "# coding=utf-8\nimport os\nimport subprocess\n\nfrom core import HackingTool\nfrom core import HackingToolsCollection\nfrom tools.others.android_attack import AndroidAttackTools\nfrom tools.others.email_verifier import EmailVerifyTools\nfrom tools.others.hash_crack import HashCrackingTools\nfrom tools.others.homograph_attacks import IDNHomographAttackTools\nfrom tools.others.mix_tools import MixTools\nfrom tools.others.payload_injection import PayloadInjectorTools\nfrom tools.others.socialmedia import SocialMediaBruteforceTools\nfrom tools.others.socialmedia_finder import SocialMediaFinderTools\nfrom tools.others.web_crawling import WebCrawlingTools\nfrom tools.others.wifi_jamming import WifiJammingTools\n\n\nclass HatCloud(HackingTool):\n    TITLE = \"HatCloud(Bypass CloudFlare for IP)\"\n    DESCRIPTION = \"HatCloud build in Ruby. It makes bypass in CloudFlare for \" \\\n                  \"discover real IP.\"\n    INSTALL_COMMANDS = [\"git clone https://github.com/HatBashBR/HatCloud.git\"]\n    PROJECT_URL = \"https://github.com/HatBashBR/HatCloud\"\n\n    def run(self):\n        site = input(\"Enter Site >> \")\n        os.chdir(\"HatCloud\")\n        subprocess.run([\"sudo\", \"ruby\", \"hatcloud.rb\", \"-b\", site])\n\n\nclass OtherTools(HackingToolsCollection):\n    TITLE = \"Other tools\"\n    TOOLS = [\n        SocialMediaBruteforceTools(),\n        AndroidAttackTools(),\n        HatCloud(),\n        IDNHomographAttackTools(),\n        EmailVerifyTools(),\n        HashCrackingTools(),\n        WifiJammingTools(),\n        SocialMediaFinderTools(),\n        PayloadInjectorTools(),\n        WebCrawlingTools(),\n        MixTools()\n    ]\n",
    "tools/others/android_attack.py": "# coding=utf-8\nfrom core import HackingTool\nfrom core import HackingToolsCollection\n\n\nclass Keydroid(HackingTool):\n    TITLE = \"Keydroid\"\n    DESCRIPTION = \"Android Keylogger + Reverse Shell\\n\" \\\n                  \"[!] You have to install Some Manually Refer Below Link:\\n \" \\\n                  \"[+] https://github.com/F4dl0/keydroid\"\n    INSTALL_COMMANDS = [\"sudo git clone https://github.com/F4dl0/keydroid.git\"]\n    RUN_COMMANDS = [\"cd keydroid && bash keydroid.sh\"]\n    PROJECT_URL = \"https://github.com/F4dl0/keydroid\"\n\n\nclass MySMS(HackingTool):\n    TITLE = \"MySMS\"\n    DESCRIPTION = \"Script that generates an Android App to hack SMS through WAN \\n\" \\\n                  \"[!] You have to install Some Manually Refer Below Link:\\n\\t \" \\\n                  \"[+] https://github.com/papusingh2sms/mysms\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/papusingh2sms/mysms.git\"]\n    RUN_COMMANDS = [\"cd mysms && bash mysms.sh\"]\n    PROJECT_URL = \"https://github.com/papusingh2sms/mysms\"\n\n\nclass LockPhish(HackingTool):\n    TITLE = \"Lockphish (Grab target LOCK PIN)\"\n    DESCRIPTION = \"Lockphish it's the first tool for phishing attacks on the \" \\\n                  \"lock screen, designed to\\n Grab Windows credentials,Android\" \\\n                  \" PIN and iPhone Passcode using a https link.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/JasonJerry/lockphish.git\"]\n    RUN_COMMANDS = [\"cd lockphish && bash lockphish.sh\"]\n    PROJECT_URL = \"https://github.com/JasonJerry/lockphish\"\n\n\nclass Droidcam(HackingTool):\n    TITLE = \"DroidCam (Capture Image)\"\n    DESCRIPTION = \"Powerful Tool For Grab Front Camera Snap Using A Link\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/kinghacker0/WishFish.git;\"\n        \"sudo apt install php wget openssh-client\"\n    ]\n    RUN_COMMANDS = [\"cd WishFish && sudo bash wishfish.sh\"]\n    PROJECT_URL = \"https://github.com/kinghacker0/WishFish\"\n\n\nclass EvilApp(HackingTool):\n    TITLE = \"EvilApp (Hijack Session)\"\n    DESCRIPTION = \"EvilApp is a script to generate Android App that can \" \\\n                  \"hijack authenticated sessions in cookies.\"\n    INSTALL_COMMANDS = [\n        \"sudo git clone https://github.com/crypticterminal/EvilApp.git\"]\n    RUN_COMMANDS = [\"cd EvilApp && bash evilapp.sh\"]\n    PROJECT_URL = \"https://github.com/crypticterminal/EvilApp\"\n\n\nclass AndroidAttackTools(HackingToolsCollection):\n    TITLE = \"Android Hacking tools\"\n    TOOLS = [\n        Keydroid(),\n        MySMS(),\n        LockPhish(),\n        Droidcam(),\n        EvilApp()\n    ]\n"
  },
  "requirements": "boxes\nflask\nlolcat\nrequests"
}