{
  "repo_name": "AUTOMATIC1111/stable-diffusion-webui",
  "repo_url": "https://github.com/AUTOMATIC1111/stable-diffusion-webui",
  "description": "Stable Diffusion web UI",
  "stars": 149632,
  "language": "Python",
  "created_at": "2022-08-22T14:05:26Z",
  "updated_at": "2025-03-19T07:04:53Z",
  "files": {
    "test/conftest.py": "import base64\nimport os\n\nimport pytest\n\ntest_files_path = os.path.dirname(__file__) + \"/test_files\"\ntest_outputs_path = os.path.dirname(__file__) + \"/test_outputs\"\n\n\ndef pytest_configure(config):\n    # We don't want to fail on Py.test command line arguments being\n    # parsed by webui:\n    os.environ.setdefault(\"IGNORE_CMD_ARGS_ERRORS\", \"1\")\n\n\ndef file_to_base64(filename):\n    with open(filename, \"rb\") as file:\n        data = file.read()\n\n    base64_str = str(base64.b64encode(data), \"utf-8\")\n    return \"data:image/png;base64,\" + base64_str\n\n\n@pytest.fixture(scope=\"session\")  # session so we don't read this over and over\ndef img2img_basic_image_base64() -> str:\n    return file_to_base64(os.path.join(test_files_path, \"img2img_basic.png\"))\n\n\n@pytest.fixture(scope=\"session\")  # session so we don't read this over and over\ndef mask_basic_image_base64() -> str:\n    return file_to_base64(os.path.join(test_files_path, \"mask_basic.png\"))\n\n\n@pytest.fixture(scope=\"session\")\ndef initialize() -> None:\n    import webui  # noqa: F401\n",
    "test/test_extras.py": "import requests\n\n\ndef test_simple_upscaling_performed(base_url, img2img_basic_image_base64):\n    payload = {\n        \"resize_mode\": 0,\n        \"show_extras_results\": True,\n        \"gfpgan_visibility\": 0,\n        \"codeformer_visibility\": 0,\n        \"codeformer_weight\": 0,\n        \"upscaling_resize\": 2,\n        \"upscaling_resize_w\": 128,\n        \"upscaling_resize_h\": 128,\n        \"upscaling_crop\": True,\n        \"upscaler_1\": \"Lanczos\",\n        \"upscaler_2\": \"None\",\n        \"extras_upscaler_2_visibility\": 0,\n        \"image\": img2img_basic_image_base64,\n    }\n    assert requests.post(f\"{base_url}/sdapi/v1/extra-single-image\", json=payload).status_code == 200\n\n\ndef test_png_info_performed(base_url, img2img_basic_image_base64):\n    payload = {\n        \"image\": img2img_basic_image_base64,\n    }\n    assert requests.post(f\"{base_url}/sdapi/v1/extra-single-image\", json=payload).status_code == 200\n\n\ndef test_interrogate_performed(base_url, img2img_basic_image_base64):\n    payload = {\n        \"image\": img2img_basic_image_base64,\n        \"model\": \"clip\",\n    }\n    assert requests.post(f\"{base_url}/sdapi/v1/extra-single-image\", json=payload).status_code == 200\n",
    "test/test_face_restorers.py": "import os\nfrom test.conftest import test_files_path, test_outputs_path\n\nimport numpy as np\nimport pytest\nfrom PIL import Image\n\n\n@pytest.mark.usefixtures(\"initialize\")\n@pytest.mark.parametrize(\"restorer_name\", [\"gfpgan\", \"codeformer\"])\ndef test_face_restorers(restorer_name):\n    from modules import shared\n\n    if restorer_name == \"gfpgan\":\n        from modules import gfpgan_model\n        gfpgan_model.setup_model(shared.cmd_opts.gfpgan_models_path)\n        restorer = gfpgan_model.gfpgan_fix_faces\n    elif restorer_name == \"codeformer\":\n        from modules import codeformer_model\n        codeformer_model.setup_model(shared.cmd_opts.codeformer_models_path)\n        restorer = codeformer_model.codeformer.restore\n    else:\n        raise NotImplementedError(\"...\")\n    img = Image.open(os.path.join(test_files_path, \"two-faces.jpg\"))\n    np_img = np.array(img, dtype=np.uint8)\n    fixed_image = restorer(np_img)\n    assert fixed_image.shape == np_img.shape\n    assert not np.allclose(fixed_image, np_img)  # should have visibly changed\n    Image.fromarray(fixed_image).save(os.path.join(test_outputs_path, f\"{restorer_name}.png\"))\n",
    "test/test_img2img.py": "\nimport pytest\nimport requests\n\n\n@pytest.fixture()\ndef url_img2img(base_url):\n    return f\"{base_url}/sdapi/v1/img2img\"\n\n\n@pytest.fixture()\ndef simple_img2img_request(img2img_basic_image_base64):\n    return {\n        \"batch_size\": 1,\n        \"cfg_scale\": 7,\n        \"denoising_strength\": 0.75,\n        \"eta\": 0,\n        \"height\": 64,\n        \"include_init_images\": False,\n        \"init_images\": [img2img_basic_image_base64],\n        \"inpaint_full_res\": False,\n        \"inpaint_full_res_padding\": 0,\n        \"inpainting_fill\": 0,\n        \"inpainting_mask_invert\": False,\n        \"mask\": None,\n        \"mask_blur\": 4,\n        \"n_iter\": 1,\n        \"negative_prompt\": \"\",\n        \"override_settings\": {},\n        \"prompt\": \"example prompt\",\n        \"resize_mode\": 0,\n        \"restore_faces\": False,\n        \"s_churn\": 0,\n        \"s_noise\": 1,\n        \"s_tmax\": 0,\n        \"s_tmin\": 0,\n        \"sampler_index\": \"Euler a\",\n        \"seed\": -1,\n        \"seed_resize_from_h\": -1,\n        \"seed_resize_from_w\": -1,\n        \"steps\": 3,\n        \"styles\": [],\n        \"subseed\": -1,\n        \"subseed_strength\": 0,\n        \"tiling\": False,\n        \"width\": 64,\n    }\n\n\ndef test_img2img_simple_performed(url_img2img, simple_img2img_request):\n    assert requests.post(url_img2img, json=simple_img2img_request).status_code == 200\n\n\ndef test_inpainting_masked_performed(url_img2img, simple_img2img_request, mask_basic_image_base64):\n    simple_img2img_request[\"mask\"] = mask_basic_image_base64\n    assert requests.post(url_img2img, json=simple_img2img_request).status_code == 200\n\n\ndef test_inpainting_with_inverted_masked_performed(url_img2img, simple_img2img_request, mask_basic_image_base64):\n    simple_img2img_request[\"mask\"] = mask_basic_image_base64\n    simple_img2img_request[\"inpainting_mask_invert\"] = True\n    assert requests.post(url_img2img, json=simple_img2img_request).status_code == 200\n\n\ndef test_img2img_sd_upscale_performed(url_img2img, simple_img2img_request):\n    simple_img2img_request[\"script_name\"] = \"sd upscale\"\n    simple_img2img_request[\"script_args\"] = [\"\", 8, \"Lanczos\", 2.0]\n    assert requests.post(url_img2img, json=simple_img2img_request).status_code == 200\n",
    "test/test_torch_utils.py": "import types\n\nimport pytest\nimport torch\n\nfrom modules import torch_utils\n\n\n@pytest.mark.parametrize(\"wrapped\", [True, False])\ndef test_get_param(wrapped):\n    mod = torch.nn.Linear(1, 1)\n    cpu = torch.device(\"cpu\")\n    mod.to(dtype=torch.float16, device=cpu)\n    if wrapped:\n        # more or less how spandrel wraps a thing\n        mod = types.SimpleNamespace(model=mod)\n    p = torch_utils.get_param(mod)\n    assert p.dtype == torch.float16\n    assert p.device == cpu\n",
    "test/test_txt2img.py": "\nimport pytest\nimport requests\n\n\n@pytest.fixture()\ndef url_txt2img(base_url):\n    return f\"{base_url}/sdapi/v1/txt2img\"\n\n\n@pytest.fixture()\ndef simple_txt2img_request():\n    return {\n        \"batch_size\": 1,\n        \"cfg_scale\": 7,\n        \"denoising_strength\": 0,\n        \"enable_hr\": False,\n        \"eta\": 0,\n        \"firstphase_height\": 0,\n        \"firstphase_width\": 0,\n        \"height\": 64,\n        \"n_iter\": 1,\n        \"negative_prompt\": \"\",\n        \"prompt\": \"example prompt\",\n        \"restore_faces\": False,\n        \"s_churn\": 0,\n        \"s_noise\": 1,\n        \"s_tmax\": 0,\n        \"s_tmin\": 0,\n        \"sampler_index\": \"Euler a\",\n        \"seed\": -1,\n        \"seed_resize_from_h\": -1,\n        \"seed_resize_from_w\": -1,\n        \"steps\": 3,\n        \"styles\": [],\n        \"subseed\": -1,\n        \"subseed_strength\": 0,\n        \"tiling\": False,\n        \"width\": 64,\n    }\n\n\ndef test_txt2img_simple_performed(url_txt2img, simple_txt2img_request):\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_with_negative_prompt_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"negative_prompt\"] = \"example negative prompt\"\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_with_complex_prompt_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"prompt\"] = \"((emphasis)), (emphasis1:1.1), [to:1], [from::2], [from:to:0.3], [alt|alt1]\"\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_not_square_image_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"height\"] = 128\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_with_hrfix_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"enable_hr\"] = True\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_with_tiling_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"tiling\"] = True\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_with_restore_faces_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"restore_faces\"] = True\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\n@pytest.mark.parametrize(\"sampler\", [\"PLMS\", \"DDIM\", \"UniPC\"])\ndef test_txt2img_with_vanilla_sampler_performed(url_txt2img, simple_txt2img_request, sampler):\n    simple_txt2img_request[\"sampler_index\"] = sampler\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_multiple_batches_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"n_iter\"] = 2\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n\n\ndef test_txt2img_batch_performed(url_txt2img, simple_txt2img_request):\n    simple_txt2img_request[\"batch_size\"] = 2\n    assert requests.post(url_txt2img, json=simple_txt2img_request).status_code == 200\n",
    "test/test_utils.py": "import pytest\nimport requests\n\n\ndef test_options_write(base_url):\n    url_options = f\"{base_url}/sdapi/v1/options\"\n    response = requests.get(url_options)\n    assert response.status_code == 200\n\n    pre_value = response.json()[\"send_seed\"]\n\n    assert requests.post(url_options, json={'send_seed': (not pre_value)}).status_code == 200\n\n    response = requests.get(url_options)\n    assert response.status_code == 200\n    assert response.json()['send_seed'] == (not pre_value)\n\n    requests.post(url_options, json={\"send_seed\": pre_value})\n\n\n@pytest.mark.parametrize(\"url\", [\n    \"sdapi/v1/cmd-flags\",\n    \"sdapi/v1/samplers\",\n    \"sdapi/v1/upscalers\",\n    \"sdapi/v1/sd-models\",\n    \"sdapi/v1/hypernetworks\",\n    \"sdapi/v1/face-restorers\",\n    \"sdapi/v1/realesrgan-models\",\n    \"sdapi/v1/prompt-styles\",\n    \"sdapi/v1/embeddings\",\n])\ndef test_get_api_url(base_url, url):\n    assert requests.get(f\"{base_url}/{url}\").status_code == 200\n"
  },
  "requirements": "GitPython\r\nPillow\r\naccelerate\r\n\r\nblendmodes\r\nclean-fid\r\ndiskcache\r\neinops\r\nfacexlib\r\nfastapi>=0.90.1\r\ngradio==3.41.2\r\ninflection\r\njsonmerge\r\nkornia\r\nlark\r\nnumpy\r\nomegaconf\r\nopen-clip-torch\r\n\r\npiexif\r\nprotobuf==3.20.0\r\npsutil\r\npytorch_lightning\r\nrequests\r\nresize-right\r\n\r\nsafetensors\r\nscikit-image>=0.19\r\ntomesd\r\ntorch\r\ntorchdiffeq\r\ntorchsde\r\ntransformers==4.30.2\r\npillow-avif-plugin==1.4.3"
}