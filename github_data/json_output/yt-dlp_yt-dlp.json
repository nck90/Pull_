{
  "repo_name": "yt-dlp/yt-dlp",
  "repo_url": "https://github.com/yt-dlp/yt-dlp",
  "description": "A feature-rich command-line audio/video downloader",
  "stars": 104559,
  "language": "Python",
  "created_at": "2020-10-26T04:22:55Z",
  "updated_at": "2025-03-19T07:08:05Z",
  "files": {
    "devscripts/generate_aes_testdata.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport codecs\nimport subprocess\n\nfrom yt_dlp.aes import aes_encrypt, key_expansion\n\nsecret_msg = b'Secret message goes here'\n\n\ndef hex_str(int_list):\n    return codecs.encode(bytes(int_list), 'hex')\n\n\ndef openssl_encode(algo, key, iv):\n    cmd = ['openssl', 'enc', '-e', '-' + algo, '-K', hex_str(key), '-iv', hex_str(iv)]\n    prog = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    out, _ = prog.communicate(secret_msg)\n    return out\n\n\niv = key = [0x20, 0x15] + 14 * [0]\n\nr = openssl_encode('aes-128-cbc', key, iv)\nprint('aes_cbc_decrypt')\nprint(repr(r))\n\npassword = key\nnew_key = aes_encrypt(password, key_expansion(password))\nr = openssl_encode('aes-128-ctr', new_key, iv)\nprint('aes_decrypt_text 16')\nprint(repr(r))\n\npassword = key + 16 * [0]\nnew_key = aes_encrypt(password, key_expansion(password)) * (32 // 16)\nr = openssl_encode('aes-256-ctr', new_key, iv)\nprint('aes_decrypt_text 32')\nprint(repr(r))\n",
    "devscripts/run_tests.py": "#!/usr/bin/env python3\n\nimport argparse\nimport functools\nimport os\nimport re\nimport shlex\nimport subprocess\nimport sys\nfrom pathlib import Path\n\n\nfix_test_name = functools.partial(re.compile(r'IE(_all|_\\d+)?$').sub, r'\\1')\n\n\ndef parse_args():\n    parser = argparse.ArgumentParser(description='Run selected yt-dlp tests')\n    parser.add_argument(\n        'test', help='an extractor test, test path, or one of \"core\" or \"download\"', nargs='*')\n    parser.add_argument(\n        '-k', help='run a test matching EXPRESSION. Same as \"pytest -k\"', metavar='EXPRESSION')\n    parser.add_argument(\n        '--pytest-args', help='arguments to passthrough to pytest')\n    return parser.parse_args()\n\n\ndef run_tests(*tests, pattern=None, ci=False):\n    # XXX: hatch uses `tests` if no arguments are passed\n    run_core = 'core' in tests or 'tests' in tests or (not pattern and not tests)\n    run_download = 'download' in tests\n\n    pytest_args = args.pytest_args or os.getenv('HATCH_TEST_ARGS', '')\n    arguments = ['pytest', '-Werror', '--tb=short', *shlex.split(pytest_args)]\n    if ci:\n        arguments.append('--color=yes')\n    if pattern:\n        arguments.extend(['-k', pattern])\n    if run_core:\n        arguments.extend(['-m', 'not download'])\n    elif run_download:\n        arguments.extend(['-m', 'download'])\n    else:\n        arguments.extend(\n            test if '/' in test\n            else f'test/test_download.py::TestDownload::test_{fix_test_name(test)}'\n            for test in tests)\n\n    print(f'Running {arguments}', flush=True)\n    try:\n        return subprocess.call(arguments)\n    except FileNotFoundError:\n        pass\n\n    arguments = [sys.executable, '-Werror', '-m', 'unittest']\n    if pattern:\n        arguments.extend(['-k', pattern])\n    if run_core:\n        print('\"pytest\" needs to be installed to run core tests', file=sys.stderr, flush=True)\n        return 1\n    elif run_download:\n        arguments.append('test.test_download')\n    else:\n        arguments.extend(\n            f'test.test_download.TestDownload.test_{test}' for test in tests)\n\n    print(f'Running {arguments}', flush=True)\n    return subprocess.call(arguments)\n\n\nif __name__ == '__main__':\n    try:\n        args = parse_args()\n\n        os.chdir(Path(__file__).parent.parent)\n        sys.exit(run_tests(*args.test, pattern=args.k, ci=bool(os.getenv('CI'))))\n    except KeyboardInterrupt:\n        pass\n",
    "test/conftest.py": "import inspect\n\nimport pytest\n\nfrom yt_dlp.networking import RequestHandler\nfrom yt_dlp.networking.common import _REQUEST_HANDLERS\nfrom yt_dlp.utils._utils import _YDLLogger as FakeLogger\n\n\n@pytest.fixture\ndef handler(request):\n    RH_KEY = getattr(request, 'param', None)\n    if not RH_KEY:\n        return\n    if inspect.isclass(RH_KEY) and issubclass(RH_KEY, RequestHandler):\n        handler = RH_KEY\n    elif RH_KEY in _REQUEST_HANDLERS:\n        handler = _REQUEST_HANDLERS[RH_KEY]\n    else:\n        pytest.skip(f'{RH_KEY} request handler is not available')\n\n    class HandlerWrapper(handler):\n        RH_KEY = handler.RH_KEY\n\n        def __init__(self, **kwargs):\n            super().__init__(logger=FakeLogger, **kwargs)\n\n    return HandlerWrapper\n\n\n@pytest.fixture(autouse=True)\ndef skip_handler(request, handler):\n    \"\"\"usage: pytest.mark.skip_handler('my_handler', 'reason')\"\"\"\n    for marker in request.node.iter_markers('skip_handler'):\n        if marker.args[0] == handler.RH_KEY:\n            pytest.skip(marker.args[1] if len(marker.args) > 1 else '')\n\n\n@pytest.fixture(autouse=True)\ndef skip_handler_if(request, handler):\n    \"\"\"usage: pytest.mark.skip_handler_if('my_handler', lambda request: True, 'reason')\"\"\"\n    for marker in request.node.iter_markers('skip_handler_if'):\n        if marker.args[0] == handler.RH_KEY and marker.args[1](request):\n            pytest.skip(marker.args[2] if len(marker.args) > 2 else '')\n\n\n@pytest.fixture(autouse=True)\ndef skip_handlers_if(request, handler):\n    \"\"\"usage: pytest.mark.skip_handlers_if(lambda request, handler: True, 'reason')\"\"\"\n    for marker in request.node.iter_markers('skip_handlers_if'):\n        if handler and marker.args[0](request, handler):\n            pytest.skip(marker.args[1] if len(marker.args) > 1 else '')\n\n\ndef pytest_configure(config):\n    config.addinivalue_line(\n        'markers', 'skip_handler(handler): skip test for the given handler',\n    )\n    config.addinivalue_line(\n        'markers', 'skip_handler_if(handler): skip test for the given handler if condition is true',\n    )\n    config.addinivalue_line(\n        'markers', 'skip_handlers_if(handler): skip test for handlers when the condition is true',\n    )\n",
    "test/helper.py": "import errno\nimport hashlib\nimport json\nimport os.path\nimport re\nimport ssl\nimport sys\nimport types\n\nimport yt_dlp.extractor\nfrom yt_dlp import YoutubeDL\nfrom yt_dlp.utils import preferredencoding, try_call, write_string, find_available_port\n\nif 'pytest' in sys.modules:\n    import pytest\n    is_download_test = pytest.mark.download\nelse:\n    def is_download_test(test_class):\n        return test_class\n\n\ndef get_params(override=None):\n    PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   'parameters.json')\n    LOCAL_PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                         'local_parameters.json')\n    with open(PARAMETERS_FILE, encoding='utf-8') as pf:\n        parameters = json.load(pf)\n    if os.path.exists(LOCAL_PARAMETERS_FILE):\n        with open(LOCAL_PARAMETERS_FILE, encoding='utf-8') as pf:\n            parameters.update(json.load(pf))\n    if override:\n        parameters.update(override)\n    return parameters\n\n\ndef try_rm(filename):\n    \"\"\" Remove a file if it exists \"\"\"\n    try:\n        os.remove(filename)\n    except OSError as ose:\n        if ose.errno != errno.ENOENT:\n            raise\n\n\ndef report_warning(message, *args, **kwargs):\n    \"\"\"\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    \"\"\"\n    if sys.stderr.isatty() and os.name != 'nt':\n        _msg_header = '\\033[0;33mWARNING:\\033[0m'\n    else:\n        _msg_header = 'WARNING:'\n    output = f'{_msg_header} {message}\\n'\n    if 'b' in getattr(sys.stderr, 'mode', ''):\n        output = output.encode(preferredencoding())\n    sys.stderr.write(output)\n\n\nclass FakeYDL(YoutubeDL):\n    def __init__(self, override=None):\n        # Different instances of the downloader can't share the same dictionary\n        # some test set the \"sublang\" parameter, which would break the md5 checks.\n        params = get_params(override=override)\n        super().__init__(params, auto_init=False)\n        self.result = []\n\n    def to_screen(self, s, *args, **kwargs):\n        print(s)\n\n    def trouble(self, s, *args, **kwargs):\n        raise Exception(s)\n\n    def download(self, x):\n        self.result.append(x)\n\n    def expect_warning(self, regex):\n        # Silence an expected warning matching a regex\n        old_report_warning = self.report_warning\n\n        def report_warning(self, message, *args, **kwargs):\n            if re.match(regex, message):\n                return\n            old_report_warning(message, *args, **kwargs)\n        self.report_warning = types.MethodType(report_warning, self)\n\n\ndef gettestcases(include_onlymatching=False):\n    for ie in yt_dlp.extractor.gen_extractors():\n        yield from ie.get_testcases(include_onlymatching)\n\n\ndef getwebpagetestcases():\n    for ie in yt_dlp.extractor.gen_extractors():\n        for tc in ie.get_webpage_testcases():\n            tc.setdefault('add_ie', []).append('Generic')\n            yield tc\n\n\nmd5 = lambda s: hashlib.md5(s.encode()).hexdigest()\n\n\ndef _iter_differences(got, expected, field):\n    if isinstance(expected, str):\n        op, _, val = expected.partition(':')\n        if op in ('mincount', 'maxcount', 'count'):\n            if not isinstance(got, (list, dict)):\n                yield field, f'expected either {list.__name__} or {dict.__name__}, got {type(got).__name__}'\n                return\n\n            expected_num = int(val)\n            got_num = len(got)\n            if op == 'mincount':\n                if got_num < expected_num:\n                    yield field, f'expected at least {val} items, got {got_num}'\n                return\n\n            if op == 'maxcount':\n                if got_num > expected_num:\n                    yield field, f'expected at most {val} items, got {got_num}'\n                return\n\n            assert op == 'count'\n            if got_num != expected_num:\n                yield field, f'expected exactly {val} items, got {got_num}'\n            return\n\n        if not isinstance(got, str):\n            yield field, f'expected {str.__name__}, got {type(got).__name__}'\n            return\n\n        if op == 're':\n            if not re.match(val, got):\n                yield field, f'should match {val!r}, got {got!r}'\n            return\n\n        if op == 'startswith':\n            if not val.startswith(got):\n                yield field, f'should start with {val!r}, got {got!r}'\n            return\n\n        if op == 'contains':\n            if not val.startswith(got):\n                yield field, f'should contain {val!r}, got {got!r}'\n            return\n\n        if op == 'md5':\n            hash_val = md5(got)\n            if hash_val != val:\n                yield field, f'expected hash {val}, got {hash_val}'\n            return\n\n        if got != expected:\n            yield field, f'expected {expected!r}, got {got!r}'\n        return\n\n    if isinstance(expected, dict) and isinstance(got, dict):\n        for key, expected_val in expected.items():\n            if key not in got:\n                yield field, f'missing key: {key!r}'\n                continue\n\n            field_name = key if field is None else f'{field}.{key}'\n            yield from _iter_differences(got[key], expected_val, field_name)\n        return\n\n    if isinstance(expected, type):\n        if not isinstance(got, expected):\n            yield field, f'expected {expected.__name__}, got {type(got).__name__}'\n        return\n\n    if isinstance(expected, list) and isinstance(got, list):\n        # TODO: clever diffing algorithm lmao\n        if len(expected) != len(got):\n            yield field, f'expected length of {len(expected)}, got {len(got)}'\n            return\n\n        for index, (got_val, expected_val) in enumerate(zip(got, expected)):\n            field_name = str(index) if field is None else f'{field}.{index}'\n            yield from _iter_differences(got_val, expected_val, field_name)\n        return\n\n    if got != expected:\n        yield field, f'expected {expected!r}, got {got!r}'\n\n\ndef _expect_value(message, got, expected, field):\n    mismatches = list(_iter_differences(got, expected, field))\n    if not mismatches:\n        return\n\n    fields = [field for field, _ in mismatches if field is not None]\n    return ''.join((\n        message, f' ({\", \".join(fields)})' if fields else '',\n        *(f'\\n\\t{field}: {message}' for field, message in mismatches)))\n\n\ndef expect_value(self, got, expected, field):\n    if message := _expect_value('values differ', got, expected, field):\n        self.fail(message)\n\n\ndef expect_dict(self, got_dict, expected_dict):\n    if message := _expect_value('dictionaries differ', got_dict, expected_dict, None):\n        self.fail(message)\n\n\ndef sanitize_got_info_dict(got_dict):\n    IGNORED_FIELDS = (\n        *YoutubeDL._format_fields,\n\n        # Lists\n        'formats', 'thumbnails', 'subtitles', 'automatic_captions', 'comments', 'entries',\n\n        # Auto-generated\n        'autonumber', 'playlist', 'format_index', 'video_ext', 'audio_ext', 'duration_string', 'epoch', 'n_entries',\n        'fulltitle', 'extractor', 'extractor_key', 'filename', 'filepath', 'infojson_filename', 'original_url',\n\n        # Only live_status needs to be checked\n        'is_live', 'was_live',\n    )\n\n    IGNORED_PREFIXES = ('', 'playlist', 'requested', 'webpage')\n\n    def sanitize(key, value):\n        if isinstance(value, str) and len(value) > 100 and key != 'thumbnail':\n            return f'md5:{md5(value)}'\n        elif isinstance(value, list) and len(value) > 10:\n            return f'count:{len(value)}'\n        elif key.endswith('_count') and isinstance(value, int):\n            return int\n        return value\n\n    test_info_dict = {\n        key: sanitize(key, value) for key, value in got_dict.items()\n        if value is not None and key not in IGNORED_FIELDS and (\n            not any(key.startswith(f'{prefix}_') for prefix in IGNORED_PREFIXES)\n            or key == '_old_archive_ids')\n    }\n\n    # display_id may be generated from id\n    if test_info_dict.get('display_id') == test_info_dict.get('id'):\n        test_info_dict.pop('display_id')\n\n    # Remove deprecated fields\n    for old in YoutubeDL._deprecated_multivalue_fields:\n        test_info_dict.pop(old, None)\n\n    # release_year may be generated from release_date\n    if try_call(lambda: test_info_dict['release_year'] == int(test_info_dict['release_date'][:4])):\n        test_info_dict.pop('release_year')\n\n    # Check url for flat entries\n    if got_dict.get('_type', 'video') != 'video' and got_dict.get('url'):\n        test_info_dict['url'] = got_dict['url']\n\n    return test_info_dict\n\n\ndef expect_info_dict(self, got_dict, expected_dict):\n    ALLOWED_KEYS_SORT_ORDER = (\n        # NB: Keep in sync with the docstring of extractor/common.py\n        'id', 'ext', 'direct', 'display_id', 'title', 'alt_title', 'description', 'media_type',\n        'uploader', 'uploader_id', 'uploader_url', 'channel', 'channel_id', 'channel_url', 'channel_is_verified',\n        'channel_follower_count', 'comment_count', 'view_count', 'concurrent_view_count',\n        'like_count', 'dislike_count', 'repost_count', 'average_rating', 'age_limit', 'duration', 'thumbnail', 'heatmap',\n        'chapters', 'chapter', 'chapter_number', 'chapter_id', 'start_time', 'end_time', 'section_start', 'section_end',\n        'categories', 'tags', 'cast', 'composers', 'artists', 'album_artists', 'creators', 'genres',\n        'track', 'track_number', 'track_id', 'album', 'album_type', 'disc_number',\n        'series', 'series_id', 'season', 'season_number', 'season_id', 'episode', 'episode_number', 'episode_id',\n        'timestamp', 'upload_date', 'release_timestamp', 'release_date', 'release_year', 'modified_timestamp', 'modified_date',\n        'playable_in_embed', 'availability', 'live_status', 'location', 'license', '_old_archive_ids',\n    )\n\n    expect_dict(self, got_dict, expected_dict)\n    # Check for the presence of mandatory fields\n    if got_dict.get('_type') not in ('playlist', 'multi_video'):\n        mandatory_fields = ['id', 'title']\n        if expected_dict.get('ext'):\n            mandatory_fields.extend(('url', 'ext'))\n        for key in mandatory_fields:\n            self.assertTrue(got_dict.get(key), f'Missing mandatory field {key}')\n    # Check for mandatory fields that are automatically set by YoutubeDL\n    if got_dict.get('_type', 'video') == 'video':\n        for key in ['webpage_url', 'extractor', 'extractor_key']:\n            self.assertTrue(got_dict.get(key), f'Missing field: {key}')\n\n    test_info_dict = sanitize_got_info_dict(got_dict)\n\n    # Check for invalid/misspelled field names being returned by the extractor\n    invalid_keys = sorted(test_info_dict.keys() - ALLOWED_KEYS_SORT_ORDER)\n    self.assertFalse(invalid_keys, f'Invalid fields returned by the extractor: {\", \".join(invalid_keys)}')\n\n    missing_keys = sorted(\n        test_info_dict.keys() - expected_dict.keys(),\n        key=lambda x: ALLOWED_KEYS_SORT_ORDER.index(x))\n    if missing_keys:\n        def _repr(v):\n            if isinstance(v, str):\n                return \"'{}'\".format(v.replace('\\\\', '\\\\\\\\').replace(\"'\", \"\\\\'\").replace('\\n', '\\\\n'))\n            elif isinstance(v, type):\n                return v.__name__\n            else:\n                return repr(v)\n        info_dict_str = ''.join(\n            f'    {_repr(k)}: {_repr(v)},\\n'\n            for k, v in test_info_dict.items() if k not in missing_keys)\n        if info_dict_str:\n            info_dict_str += '\\n'\n        info_dict_str += ''.join(\n            f'    {_repr(k)}: {_repr(test_info_dict[k])},\\n'\n            for k in missing_keys)\n        info_dict_str = '\\n\\'info_dict\\': {\\n' + info_dict_str + '},\\n'\n        write_string(info_dict_str.replace('\\n', '\\n        '), out=sys.stderr)\n        self.assertFalse(\n            missing_keys,\n            'Missing keys in test definition: {}'.format(', '.join(sorted(missing_keys))))\n\n\ndef assertRegexpMatches(self, text, regexp, msg=None):\n    if hasattr(self, 'assertRegexp'):\n        return self.assertRegexp(text, regexp, msg)\n    else:\n        m = re.match(regexp, text)\n        if not m:\n            note = f'Regexp didn\\'t match: {regexp!r} not found'\n            if len(text) < 1000:\n                note += f' in {text!r}'\n            if msg is None:\n                msg = note\n            else:\n                msg = note + ', ' + msg\n            self.assertTrue(m, msg)\n\n\ndef assertGreaterEqual(self, got, expected, msg=None):\n    if not (got >= expected):\n        if msg is None:\n            msg = f'{got!r} not greater than or equal to {expected!r}'\n        self.assertTrue(got >= expected, msg)\n\n\ndef assertLessEqual(self, got, expected, msg=None):\n    if not (got <= expected):\n        if msg is None:\n            msg = f'{got!r} not less than or equal to {expected!r}'\n        self.assertTrue(got <= expected, msg)\n\n\ndef assertEqual(self, got, expected, msg=None):\n    if got != expected:\n        if msg is None:\n            msg = f'{got!r} not equal to {expected!r}'\n        self.assertTrue(got == expected, msg)\n\n\ndef expect_warnings(ydl, warnings_re):\n    real_warning = ydl.report_warning\n\n    def _report_warning(w, *args, **kwargs):\n        if not any(re.search(w_re, w) for w_re in warnings_re):\n            real_warning(w, *args, **kwargs)\n\n    ydl.report_warning = _report_warning\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        # In Jython SSLSocket is not a subclass of socket.socket\n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\ndef verify_address_availability(address):\n    if find_available_port(address) is None:\n        pytest.skip(f'Unable to bind to source address {address} (address may not exist)')\n\n\ndef validate_and_send(rh, req):\n    rh.validate(req)\n    return rh.send(req)\n",
    "test/test_InfoExtractor.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport http.server\nimport threading\n\nfrom test.helper import FakeYDL, expect_dict, expect_value, http_server_port\nfrom yt_dlp.compat import compat_etree_fromstring\nfrom yt_dlp.extractor import YoutubeIE, get_info_extractor\nfrom yt_dlp.extractor.common import InfoExtractor\nfrom yt_dlp.utils import (\n    ExtractorError,\n    RegexNotFoundError,\n    encode_data_uri,\n    strip_jsonp,\n)\n\nTEAPOT_RESPONSE_STATUS = 418\nTEAPOT_RESPONSE_BODY = \"<h1>418 I'm a teapot</h1>\"\n\n\nclass InfoExtractorTestRequestHandler(http.server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def do_GET(self):\n        if self.path == '/teapot':\n            self.send_response(TEAPOT_RESPONSE_STATUS)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(TEAPOT_RESPONSE_BODY.encode())\n        else:\n            assert False\n\n\nclass DummyIE(InfoExtractor):\n    def _sort_formats(self, formats, field_preference=[]):\n        self._downloader.sort_formats(\n            {'formats': formats, '_format_sort_fields': field_preference})\n\n\nclass TestInfoExtractor(unittest.TestCase):\n    def setUp(self):\n        self.ie = DummyIE(FakeYDL())\n\n    def test_ie_key(self):\n        self.assertEqual(get_info_extractor(YoutubeIE.ie_key()), YoutubeIE)\n\n    def test_get_netrc_login_info(self):\n        for params in [\n            {'usenetrc': True, 'netrc_location': './test/testdata/netrc/netrc'},\n            {'netrc_cmd': f'{sys.executable} ./test/testdata/netrc/print_netrc.py'},\n        ]:\n            ie = DummyIE(FakeYDL(params))\n            self.assertEqual(ie._get_netrc_login_info(netrc_machine='normal_use'), ('user', 'pass'))\n            self.assertEqual(ie._get_netrc_login_info(netrc_machine='empty_user'), ('', 'pass'))\n            self.assertEqual(ie._get_netrc_login_info(netrc_machine='empty_pass'), ('user', ''))\n            self.assertEqual(ie._get_netrc_login_info(netrc_machine='both_empty'), ('', ''))\n            self.assertEqual(ie._get_netrc_login_info(netrc_machine='nonexistent'), (None, None))\n\n    def test_html_search_regex(self):\n        html = '<p id=\"foo\">Watch this <a href=\"http://www.youtube.com/watch?v=BaW_jenozKc\">video</a></p>'\n        search = lambda re, *args: self.ie._html_search_regex(re, html, *args)\n        self.assertEqual(search(r'<p id=\"foo\">(.+?)</p>', 'foo'), 'Watch this video')\n\n    def test_opengraph(self):\n        ie = self.ie\n        html = '''\n            <meta name=\"og:title\" content='Foo'/>\n            <meta content=\"Some video's description \" name=\"og:description\"/>\n            <meta property='og:image' content='http://domain.com/pic.jpg?key1=val1&amp;key2=val2'/>\n            <meta content='application/x-shockwave-flash' property='og:video:type'>\n            <meta content='Foo' property=og:foobar>\n            <meta name=\"og:test1\" content='foo > < bar'/>\n            <meta name=\"og:test2\" content=\"foo >//< bar\"/>\n            <meta property=og-test3 content='Ill-formatted opengraph'/>\n            <meta property=og:test4 content=unquoted-value/>\n            '''\n        self.assertEqual(ie._og_search_title(html), 'Foo')\n        self.assertEqual(ie._og_search_description(html), 'Some video\\'s description ')\n        self.assertEqual(ie._og_search_thumbnail(html), 'http://domain.com/pic.jpg?key1=val1&key2=val2')\n        self.assertEqual(ie._og_search_video_url(html, default=None), None)\n        self.assertEqual(ie._og_search_property('foobar', html), 'Foo')\n        self.assertEqual(ie._og_search_property('test1', html), 'foo > < bar')\n        self.assertEqual(ie._og_search_property('test2', html), 'foo >//< bar')\n        self.assertEqual(ie._og_search_property('test3', html), 'Ill-formatted opengraph')\n        self.assertEqual(ie._og_search_property(('test0', 'test1'), html), 'foo > < bar')\n        self.assertRaises(RegexNotFoundError, ie._og_search_property, 'test0', html, None, fatal=True)\n        self.assertRaises(RegexNotFoundError, ie._og_search_property, ('test0', 'test00'), html, None, fatal=True)\n        self.assertEqual(ie._og_search_property('test4', html), 'unquoted-value')\n\n    def test_html_search_meta(self):\n        ie = self.ie\n        html = '''\n            <meta name=\"a\" content=\"1\" />\n            <meta name='b' content='2'>\n            <meta name=\"c\" content='3'>\n            <meta name=d content='4'>\n            <meta property=\"e\" content='5' >\n            <meta content=\"6\" name=\"f\">\n        '''\n\n        self.assertEqual(ie._html_search_meta('a', html), '1')\n        self.assertEqual(ie._html_search_meta('b', html), '2')\n        self.assertEqual(ie._html_search_meta('c', html), '3')\n        self.assertEqual(ie._html_search_meta('d', html), '4')\n        self.assertEqual(ie._html_search_meta('e', html), '5')\n        self.assertEqual(ie._html_search_meta('f', html), '6')\n        self.assertEqual(ie._html_search_meta(('a', 'b', 'c'), html), '1')\n        self.assertEqual(ie._html_search_meta(('c', 'b', 'a'), html), '3')\n        self.assertEqual(ie._html_search_meta(('z', 'x', 'c'), html), '3')\n        self.assertRaises(RegexNotFoundError, ie._html_search_meta, 'z', html, None, fatal=True)\n        self.assertRaises(RegexNotFoundError, ie._html_search_meta, ('z', 'x'), html, None, fatal=True)\n\n    def test_search_json_ld_realworld(self):\n        _TESTS = [\n            # https://github.com/ytdl-org/youtube-dl/issues/23306\n            (\n                r'''<script type=\"application/ld+json\">\n{\n\"@context\": \"http://schema.org/\",\n\"@type\": \"VideoObject\",\n\"name\": \"1 On 1 With Kleio\",\n\"url\": \"https://www.eporner.com/hd-porn/xN49A1cT3eB/1-On-1-With-Kleio/\",\n\"duration\": \"PT0H12M23S\",\n\"thumbnailUrl\": [\"https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg\", \"https://imggen.eporner.com/780814/1920/1080/9.jpg\"],\n\"contentUrl\": \"https://gvideo.eporner.com/xN49A1cT3eB/xN49A1cT3eB.mp4\",\n\"embedUrl\": \"https://www.eporner.com/embed/xN49A1cT3eB/1-On-1-With-Kleio/\",\n\"image\": \"https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg\",\n\"width\": \"1920\",\n\"height\": \"1080\",\n\"encodingFormat\": \"mp4\",\n\"bitrate\": \"6617kbps\",\n\"isFamilyFriendly\": \"False\",\n\"description\": \"Kleio Valentien\",\n\"uploadDate\": \"2015-12-05T21:24:35+01:00\",\n\"interactionStatistic\": {\n\"@type\": \"InteractionCounter\",\n\"interactionType\": { \"@type\": \"http://schema.org/WatchAction\" },\n\"userInteractionCount\": 1120958\n}, \"aggregateRating\": {\n\"@type\": \"AggregateRating\",\n\"ratingValue\": \"88\",\n\"ratingCount\": \"630\",\n\"bestRating\": \"100\",\n\"worstRating\": \"0\"\n}, \"actor\": [{\n\"@type\": \"Person\",\n\"name\": \"Kleio Valentien\",\n\"url\": \"https://www.eporner.com/pornstar/kleio-valentien/\"\n}]}\n                </script>''',\n                {\n                    'title': '1 On 1 With Kleio',\n                    'description': 'Kleio Valentien',\n                    'url': 'https://gvideo.eporner.com/xN49A1cT3eB/xN49A1cT3eB.mp4',\n                    'timestamp': 1449347075,\n                    'duration': 743.0,\n                    'view_count': 1120958,\n                    'width': 1920,\n                    'height': 1080,\n                },\n                {},\n            ),\n            (\n                r'''<script type=\"application/ld+json\">\n      {\n      \"@context\": \"https://schema.org\",\n      \"@graph\": [\n      {\n      \"@type\": \"NewsArticle\",\n      \"mainEntityOfPage\": {\n      \"@type\": \"WebPage\",\n      \"@id\": \"https://www.ant1news.gr/Society/article/620286/symmoria-anilikon-dikigoros-thymaton-ithelan-na-toys-apoteleiosoyn\"\n      },\n      \"headline\": \"Συμμορία ανηλίκων – δικηγόρος θυμάτων: ήθελαν να τους αποτελειώσουν\",\n      \"name\": \"Συμμορία ανηλίκων – δικηγόρος θυμάτων: ήθελαν να τους αποτελειώσουν\",\n      \"description\": \"Τα παιδιά δέχθηκαν την επίθεση επειδή αρνήθηκαν να γίνουν μέλη της συμμορίας, ανέφερε ο Γ. Ζαχαρόπουλος.\",\n      \"image\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://ant1media.azureedge.net/imgHandler/1100/a635c968-be71-447c-bf9c-80d843ece21e.jpg\",\n      \"width\": 1100,\n      \"height\": 756            },\n      \"datePublished\": \"2021-11-10T08:50:00+03:00\",\n      \"dateModified\": \"2021-11-10T08:52:53+03:00\",\n      \"author\": {\n      \"@type\": \"Person\",\n      \"@id\": \"https://www.ant1news.gr/\",\n      \"name\": \"Ant1news\",\n      \"image\": \"https://www.ant1news.gr/images/logo-e5d7e4b3e714c88e8d2eca96130142f6.png\",\n      \"url\": \"https://www.ant1news.gr/\"\n      },\n      \"publisher\": {\n      \"@type\": \"Organization\",\n      \"@id\": \"https://www.ant1news.gr#publisher\",\n      \"name\": \"Ant1news\",\n      \"url\": \"https://www.ant1news.gr\",\n      \"logo\": {\n      \"@type\": \"ImageObject\",\n      \"url\": \"https://www.ant1news.gr/images/logo-e5d7e4b3e714c88e8d2eca96130142f6.png\",\n      \"width\": 400,\n      \"height\": 400                },\n      \"sameAs\": [\n      \"https://www.facebook.com/Ant1news.gr\",\n      \"https://twitter.com/antennanews\",\n      \"https://www.youtube.com/channel/UC0smvAbfczoN75dP0Hw4Pzw\",\n      \"https://www.instagram.com/ant1news/\"\n      ]\n      },\n\n      \"keywords\": \"μαχαίρωμα,συμμορία ανηλίκων,ΕΙΔΗΣΕΙΣ,ΕΙΔΗΣΕΙΣ ΣΗΜΕΡΑ,ΝΕΑ,Κοινωνία - Ant1news\",\n\n\n      \"articleSection\": \"Κοινωνία\"\n      }\n      ]\n      }\n                </script>''',\n                {\n                    'timestamp': 1636523400,\n                    'title': 'md5:91fe569e952e4d146485740ae927662b',\n                },\n                {'expected_type': 'NewsArticle'},\n            ),\n            (\n                r'''<script type=\"application/ld+json\">\n                {\"url\":\"/vrtnu/a-z/het-journaal/2021/het-journaal-het-journaal-19u-20211231/\",\n                \"name\":\"Het journaal 19u\",\n                \"description\":\"Het journaal 19u van vrijdag 31 december 2021.\",\n                \"potentialAction\":{\"url\":\"https://vrtnu.page.link/pfVy6ihgCAJKgHqe8\",\"@type\":\"ShareAction\"},\n                \"mainEntityOfPage\":{\"@id\":\"1640092242445\",\"@type\":\"WebPage\"},\n                \"publication\":[{\n                    \"startDate\":\"2021-12-31T19:00:00.000+01:00\",\n                    \"endDate\":\"2022-01-30T23:55:00.000+01:00\",\n                    \"publishedBy\":{\"name\":\"een\",\"@type\":\"Organization\"},\n                    \"publishedOn\":{\"url\":\"https://www.vrt.be/vrtnu/\",\"name\":\"VRT NU\",\"@type\":\"BroadcastService\"},\n                    \"@id\":\"pbs-pub-3a7ec233-da95-4c1e-9b2b-cf5fdfebcbe8\",\n                    \"@type\":\"BroadcastEvent\"\n                    }],\n                \"video\":{\n                    \"name\":\"Het journaal - Aflevering 365 (Seizoen 2021)\",\n                    \"description\":\"Het journaal 19u van vrijdag 31 december 2021. Bekijk aflevering 365 van seizoen 2021 met VRT NU via de site of app.\",\n                    \"thumbnailUrl\":\"//images.vrt.be/width1280/2021/12/31/80d5ed00-6a64-11ec-b07d-02b7b76bf47f.jpg\",\n                    \"expires\":\"2022-01-30T23:55:00.000+01:00\",\n                    \"hasPart\":[\n                        {\"name\":\"Explosie Turnhout\",\"startOffset\":70,\"@type\":\"Clip\"},\n                        {\"name\":\"Jaarwisseling\",\"startOffset\":440,\"@type\":\"Clip\"},\n                        {\"name\":\"Natuurbranden Colorado\",\"startOffset\":1179,\"@type\":\"Clip\"},\n                        {\"name\":\"Klimaatverandering\",\"startOffset\":1263,\"@type\":\"Clip\"},\n                        {\"name\":\"Zacht weer\",\"startOffset\":1367,\"@type\":\"Clip\"},\n                        {\"name\":\"Financiële balans\",\"startOffset\":1383,\"@type\":\"Clip\"},\n                        {\"name\":\"Club Brugge\",\"startOffset\":1484,\"@type\":\"Clip\"},\n                        {\"name\":\"Mentale gezondheid bij topsporters\",\"startOffset\":1575,\"@type\":\"Clip\"},\n                        {\"name\":\"Olympische Winterspelen\",\"startOffset\":1728,\"@type\":\"Clip\"},\n                        {\"name\":\"Sober oudjaar in Nederland\",\"startOffset\":1873,\"@type\":\"Clip\"}\n                        ],\n                    \"duration\":\"PT34M39.23S\",\n                    \"uploadDate\":\"2021-12-31T19:00:00.000+01:00\",\n                    \"@id\":\"vid-9457d0c6-b8ac-4aba-b5e1-15aa3a3295b5\",\n                    \"@type\":\"VideoObject\"\n                },\n                \"genre\":[\"Nieuws en actua\"],\n                \"episodeNumber\":365,\n                \"partOfSeries\":{\"name\":\"Het journaal\",\"@id\":\"222831405527\",\"@type\":\"TVSeries\"},\n                \"partOfSeason\":{\"name\":\"Seizoen 2021\",\"@id\":\"961809365527\",\"@type\":\"TVSeason\"},\n                \"@context\":\"https://schema.org\",\"@id\":\"961685295527\",\"@type\":\"TVEpisode\"}</script>\n                ''',\n                {\n                    'chapters': [\n                        {'title': 'Explosie Turnhout', 'start_time': 70, 'end_time': 440},\n                        {'title': 'Jaarwisseling', 'start_time': 440, 'end_time': 1179},\n                        {'title': 'Natuurbranden Colorado', 'start_time': 1179, 'end_time': 1263},\n                        {'title': 'Klimaatverandering', 'start_time': 1263, 'end_time': 1367},\n                        {'title': 'Zacht weer', 'start_time': 1367, 'end_time': 1383},\n                        {'title': 'Financiële balans', 'start_time': 1383, 'end_time': 1484},\n                        {'title': 'Club Brugge', 'start_time': 1484, 'end_time': 1575},\n                        {'title': 'Mentale gezondheid bij topsporters', 'start_time': 1575, 'end_time': 1728},\n                        {'title': 'Olympische Winterspelen', 'start_time': 1728, 'end_time': 1873},\n                        {'title': 'Sober oudjaar in Nederland', 'start_time': 1873, 'end_time': 2079.23},\n                    ],\n                    'title': 'Het journaal - Aflevering 365 (Seizoen 2021)',\n                }, {},\n            ),\n            (\n                # test multiple thumbnails in a list\n                r'''\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\n\"@type\":\"VideoObject\",\n\"thumbnailUrl\":[\"https://www.rainews.it/cropgd/640x360/dl/img/2021/12/30/1640886376927_GettyImages.jpg\"]}\n</script>''',\n                {\n                    'thumbnails': [{'url': 'https://www.rainews.it/cropgd/640x360/dl/img/2021/12/30/1640886376927_GettyImages.jpg'}],\n                },\n                {},\n            ),\n            (\n                # test single thumbnail\n                r'''\n<script type=\"application/ld+json\">\n{\"@context\":\"https://schema.org\",\n\"@type\":\"VideoObject\",\n\"thumbnailUrl\":\"https://www.rainews.it/cropgd/640x360/dl/img/2021/12/30/1640886376927_GettyImages.jpg\"}\n</script>''',\n                {\n                    'thumbnails': [{'url': 'https://www.rainews.it/cropgd/640x360/dl/img/2021/12/30/1640886376927_GettyImages.jpg'}],\n                },\n                {},\n            ),\n        ]\n        for html, expected_dict, search_json_ld_kwargs in _TESTS:\n            expect_dict(\n                self,\n                self.ie._search_json_ld(html, None, **search_json_ld_kwargs),\n                expected_dict,\n            )\n\n    def test_download_json(self):\n        uri = encode_data_uri(b'{\"foo\": \"blah\"}', 'application/json')\n        self.assertEqual(self.ie._download_json(uri, None), {'foo': 'blah'})\n        uri = encode_data_uri(b'callback({\"foo\": \"blah\"})', 'application/javascript')\n        self.assertEqual(self.ie._download_json(uri, None, transform_source=strip_jsonp), {'foo': 'blah'})\n        uri = encode_data_uri(b'{\"foo\": invalid}', 'application/json')\n        self.assertRaises(ExtractorError, self.ie._download_json, uri, None)\n        self.assertEqual(self.ie._download_json(uri, None, fatal=False), None)\n\n    def test_parse_html5_media_entries(self):\n        # inline video tag\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://127.0.0.1/video.html',\n                r'<html><video src=\"/vid.mp4\" /></html>', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://127.0.0.1/vid.mp4',\n                }],\n            })\n\n        # from https://www.r18.com/\n        # with kpbs in label\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.r18.com/',\n                r'''\n                <video id=\"samplevideo_amateur\" class=\"js-samplevideo video-js vjs-default-skin vjs-big-play-centered\" controls preload=\"auto\" width=\"400\" height=\"225\" poster=\"//pics.r18.com/digital/amateur/mgmr105/mgmr105jp.jpg\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_sm_w.mp4\" type=\"video/mp4\"  res=\"240\" label=\"300kbps\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dm_w.mp4\" type=\"video/mp4\"  res=\"480\" label=\"1000kbps\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dmb_w.mp4\" type=\"video/mp4\"  res=\"740\" label=\"1500kbps\">\n                    <p>Your browser does not support the video tag.</p>\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_sm_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '300kbps',\n                    'height': 240,\n                    'tbr': 300,\n                }, {\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dm_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '1000kbps',\n                    'height': 480,\n                    'tbr': 1000,\n                }, {\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dmb_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '1500kbps',\n                    'height': 740,\n                    'tbr': 1500,\n                }],\n                'thumbnail': '//pics.r18.com/digital/amateur/mgmr105/mgmr105jp.jpg',\n            })\n\n        # from https://www.csfd.cz/\n        # with width and height\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.csfd.cz/',\n                r'''\n                <video width=\"770\" height=\"328\" preload=\"none\" controls  poster=\"https://img.csfd.cz/files/images/film/video/preview/163/344/163344118_748d20.png?h360\" >\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327358_eac647.mp4\" type=\"video/mp4\" width=\"640\" height=\"360\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327360_3d2646.mp4\" type=\"video/mp4\" width=\"1280\" height=\"720\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327356_91f258.mp4\" type=\"video/mp4\" width=\"1920\" height=\"1080\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327359_962b4a.webm\" type=\"video/webm\" width=\"640\" height=\"360\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327361_6feee0.webm\" type=\"video/webm\" width=\"1280\" height=\"720\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327357_8ab472.webm\" type=\"video/webm\" width=\"1920\" height=\"1080\">\n                    <track src=\"https://video.csfd.cz/files/subtitles/163/344/163344115_4c388b.srt\" type=\"text/x-srt\" kind=\"subtitles\" srclang=\"cs\" label=\"cs\">\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327358_eac647.mp4',\n                    'ext': 'mp4',\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327360_3d2646.mp4',\n                    'ext': 'mp4',\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327356_91f258.mp4',\n                    'ext': 'mp4',\n                    'width': 1920,\n                    'height': 1080,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327359_962b4a.webm',\n                    'ext': 'webm',\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327361_6feee0.webm',\n                    'ext': 'webm',\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327357_8ab472.webm',\n                    'ext': 'webm',\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                'subtitles': {\n                    'cs': [{'url': 'https://video.csfd.cz/files/subtitles/163/344/163344115_4c388b.srt'}],\n                },\n                'thumbnail': 'https://img.csfd.cz/files/images/film/video/preview/163/344/163344118_748d20.png?h360',\n            })\n\n        # from https://tamasha.com/v/Kkdjw\n        # with height in label\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://tamasha.com/v/Kkdjw',\n                r'''\n                <video crossorigin=\"anonymous\">\n                        <source src=\"https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4\" type=\"video/mp4\" label=\"AUTO\" res=\"0\"/>\n                                <source src=\"https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4\" type=\"video/mp4\"\n                                        label=\"240p\" res=\"240\"/>\n                                <source src=\"https://s-v2.tamasha.com/statics/videos_file/20/00/Kkdjw_200041c66f657fc967db464d156eafbc1ed9fe6f_n_144.mp4\" type=\"video/mp4\"\n                                        label=\"144p\" res=\"144\"/>\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4',\n                }, {\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4',\n                    'ext': 'mp4',\n                    'format_id': '240p',\n                    'height': 240,\n                }, {\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/20/00/Kkdjw_200041c66f657fc967db464d156eafbc1ed9fe6f_n_144.mp4',\n                    'ext': 'mp4',\n                    'format_id': '144p',\n                    'height': 144,\n                }],\n            })\n\n        # from https://www.directvnow.com\n        # with data-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video id=\"vid1\" class=\"header--video-masked active\" muted playsinline>\n                    <source data-src=\"https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'ext': 'mp4',\n                    'url': 'https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4',\n                }],\n            })\n\n        # from https://www.directvnow.com\n        # with data-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video id=\"vid1\" class=\"header--video-masked active\" muted playsinline>\n                    <source data-src=\"https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4',\n                    'ext': 'mp4',\n                }],\n            })\n\n        # from https://www.klarna.com/uk/\n        # with data-video-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video loop autoplay muted class=\"responsive-video block-kl__video video-on-medium\">\n                    <source src=\"\" data-video-desktop data-video-src=\"https://www.klarna.com/uk/wp-content/uploads/sites/11/2019/01/KL062_Smooth3_0_DogWalking_5s_920x080_.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://www.klarna.com/uk/wp-content/uploads/sites/11/2019/01/KL062_Smooth3_0_DogWalking_5s_920x080_.mp4',\n                    'ext': 'mp4',\n                }],\n            })\n\n        # from https://0000.studio/\n        # with type attribute but without extension in URL\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://0000.studio',\n                r'''\n                <video src=\"https://d1ggyt9m8pwf3g.cloudfront.net/protected/ap-northeast-1:1864af40-28d5-492b-b739-b32314b1a527/archive/clip/838db6a7-8973-4cd6-840d-8517e4093c92\"\n                    controls=\"controls\" type=\"video/mp4\" preload=\"metadata\" autoplay=\"autoplay\" playsinline class=\"object-contain\">\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://d1ggyt9m8pwf3g.cloudfront.net/protected/ap-northeast-1:1864af40-28d5-492b-b739-b32314b1a527/archive/clip/838db6a7-8973-4cd6-840d-8517e4093c92',\n                    'ext': 'mp4',\n                }],\n            })\n\n    def test_extract_jwplayer_data_realworld(self):\n        # from http://www.suffolk.edu/sjc/\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n                <script type='text/javascript'>\n                    jwplayer('my-video').setup({\n                        file: 'rtmp://192.138.214.154/live/sjclive',\n                        fallback: 'true',\n                        width: '95%',\n                      aspectratio: '16:9',\n                      primary: 'flash',\n                      mediaid:'XEgvuql4'\n                    });\n                </script>\n                ''', None, require_title=False),\n            {\n                'id': 'XEgvuql4',\n                'formats': [{\n                    'url': 'rtmp://192.138.214.154/live/sjclive',\n                    'ext': 'flv',\n                }],\n            })\n\n        # from https://www.pornoxo.com/videos/7564/striptease-from-sexy-secretary/\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n<script type=\"text/javascript\">\n    jwplayer(\"mediaplayer\").setup({\n        'videoid': \"7564\",\n        'width': \"100%\",\n        'aspectratio': \"16:9\",\n        'stretching': \"exactfit\",\n        'autostart': 'false',\n        'flashplayer': \"https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf\",\n        'file': \"https://cdn.pornoxo.com/key=MF+oEbaxqTKb50P-w9G3nA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/4b2157147afe5efa93ce1978e0265289c193874e02597.flv\",\n        'image': \"https://t03.vipstreamservice.com/thumbs/pxo-full/2009-12/14/a4b2157147afe5efa93ce1978e0265289c193874e02597.flv-full-13.jpg\",\n        'filefallback': \"https://cdn.pornoxo.com/key=9ZPsTR5EvPLQrBaak2MUGA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/m_4b2157147afe5efa93ce1978e0265289c193874e02597.mp4\",\n        'logo.hide': true,\n        'skin': \"https://t04.vipstreamservice.com/jwplayer/skin/modieus-blk.zip\",\n        'plugins': \"https://t04.vipstreamservice.com/jwplayer/dock/dockableskinnableplugin.swf\",\n        'dockableskinnableplugin.piclink': \"/index.php?key=ajax-videothumbsn&vid=7564&data=2009-12--14--4b2157147afe5efa93ce1978e0265289c193874e02597.flv--17370\",\n        'controlbar': 'bottom',\n        'modes': [\n            {type: 'flash', src: 'https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf'}\n        ],\n        'provider': 'http'\n    });\n    //noinspection JSAnnotator\n    invideo.setup({\n        adsUrl: \"/banner-iframe/?zoneId=32\",\n        adsUrl2: \"\",\n        autostart: false\n    });\n</script>\n            ''', 'dummy', require_title=False),\n            {\n                'thumbnail': 'https://t03.vipstreamservice.com/thumbs/pxo-full/2009-12/14/a4b2157147afe5efa93ce1978e0265289c193874e02597.flv-full-13.jpg',\n                'formats': [{\n                    'url': 'https://cdn.pornoxo.com/key=MF+oEbaxqTKb50P-w9G3nA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/4b2157147afe5efa93ce1978e0265289c193874e02597.flv',\n                    'ext': 'flv',\n                }],\n            })\n\n        # from http://www.indiedb.com/games/king-machine/videos\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n<script>\njwplayer(\"mediaplayer\").setup({\"abouttext\":\"Visit Indie DB\",\"aboutlink\":\"http:\\/\\/www.indiedb.com\\/\",\"displaytitle\":false,\"autostart\":false,\"repeat\":false,\"title\":\"king machine trailer 1\",\"sharing\":{\"link\":\"http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1\",\"code\":\"<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"http:\\/\\/www.indiedb.com\\/media\\/iframe\\/1522983\\\" frameborder=\\\"0\\\" allowfullscreen><\\/iframe><br><a href=\\\"http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1\\\">king machine trailer 1 - Indie DB<\\/a>\"},\"related\":{\"file\":\"http:\\/\\/rss.indiedb.com\\/media\\/recommended\\/1522983\\/feed\\/rss.xml\",\"dimensions\":\"160x120\",\"onclick\":\"link\"},\"sources\":[{\"file\":\"http:\\/\\/cdn.dbolical.com\\/cache\\/videos\\/games\\/1\\/50\\/49678\\/encode_mp4\\/king-machine-trailer.mp4\",\"label\":\"360p SD\",\"default\":\"true\"},{\"file\":\"http:\\/\\/cdn.dbolical.com\\/cache\\/videos\\/games\\/1\\/50\\/49678\\/encode720p_mp4\\/king-machine-trailer.mp4\",\"label\":\"720p HD\"}],\"image\":\"http:\\/\\/media.indiedb.com\\/cache\\/images\\/games\\/1\\/50\\/49678\\/thumb_620x2000\\/king-machine-trailer.mp4.jpg\",\"advertising\":{\"client\":\"vast\",\"tag\":\"http:\\/\\/ads.intergi.com\\/adrawdata\\/3.0\\/5205\\/4251742\\/0\\/1013\\/ADTECH;cors=yes;width=560;height=315;referring_url=http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1;content_url=http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1;media_id=1522983;title=king+machine+trailer+1;device=__DEVICE__;model=__MODEL__;os=Windows+OS;osversion=__OSVERSION__;ua=__UA__;ip=109.171.17.81;uniqueid=1522983;tags=__TAGS__;number=58cac25928151;time=1489683033\"},\"width\":620,\"height\":349}).once(\"play\", function(event) {\n            videoAnalytics(\"play\");\n}).once(\"complete\", function(event) {\n    videoAnalytics(\"completed\");\n});\n</script>\n                ''', 'dummy'),\n            {\n                'title': 'king machine trailer 1',\n                'thumbnail': 'http://media.indiedb.com/cache/images/games/1/50/49678/thumb_620x2000/king-machine-trailer.mp4.jpg',\n                'formats': [{\n                    'url': 'http://cdn.dbolical.com/cache/videos/games/1/50/49678/encode_mp4/king-machine-trailer.mp4',\n                    'height': 360,\n                    'ext': 'mp4',\n                }, {\n                    'url': 'http://cdn.dbolical.com/cache/videos/games/1/50/49678/encode720p_mp4/king-machine-trailer.mp4',\n                    'height': 720,\n                    'ext': 'mp4',\n                }],\n            })\n\n    def test_parse_m3u8_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/11995\n                # http://teamcoco.com/video/clueless-gamer-super-bowl-for-honor\n                'img_bipbop_adv_example_fmp4',\n                'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                [{\n                    'format_id': 'aud1-English',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/a1/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'language': 'en',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'audio_ext': 'mp4',\n                }, {\n                    'format_id': 'aud2-English',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/a2/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'language': 'en',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'audio_ext': 'mp4',\n                }, {\n                    'format_id': 'aud3-English',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/a3/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'language': 'en',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'audio_ext': 'mp4',\n                }, {\n                    'format_id': '530',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v2/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 480,\n                    'height': 270,\n                    'vcodec': 'avc1.640015',\n                }, {\n                    'format_id': '561',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v2/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 480,\n                    'height': 270,\n                    'vcodec': 'avc1.640015',\n                }, {\n                    'format_id': '753',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v2/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 480,\n                    'height': 270,\n                    'vcodec': 'avc1.640015',\n                }, {\n                    'format_id': '895',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v3/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 640,\n                    'height': 360,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '926',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v3/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 640,\n                    'height': 360,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '1118',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v3/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 640,\n                    'height': 360,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '1265',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v4/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 768,\n                    'height': 432,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '1295',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v4/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 768,\n                    'height': 432,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '1487',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v4/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 768,\n                    'height': 432,\n                    'vcodec': 'avc1.64001e',\n                }, {\n                    'format_id': '2168',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v5/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 960,\n                    'height': 540,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '2198',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v5/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 960,\n                    'height': 540,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '2390',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v5/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 960,\n                    'height': 540,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '3168',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v6/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1280,\n                    'height': 720,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '3199',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v6/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1280,\n                    'height': 720,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '3391',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v6/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1280,\n                    'height': 720,\n                    'vcodec': 'avc1.640020',\n                }, {\n                    'format_id': '4670',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v7/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '4701',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v7/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '4893',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v7/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '6170',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v8/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '6200',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v8/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '6392',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v8/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '7968',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v9/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '7998',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v9/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }, {\n                    'format_id': '8190',\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/v9/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/img_bipbop_adv_example_fmp4/master.m3u8',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.64002a',\n                }],\n                {},\n            ),\n            (\n                'bipbop_16x9',\n                'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                [{\n                    'format_id': 'bipbop_audio-BipBop Audio 2',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/alternate_audio_aac/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'language': 'eng',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'vcodec': 'none',\n                    'audio_ext': 'mp4',\n                    'video_ext': 'none',\n                }, {\n                    'format_id': '41',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear0/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 41.457,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'vcodec': 'none',\n                    'acodec': 'mp4a.40.2',\n                    'audio_ext': 'mp4',\n                    'video_ext': 'none',\n                    'abr': 41.457,\n                }, {\n                    'format_id': '263',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear1/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 263.851,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'width': 416,\n                    'height': 234,\n                    'vcodec': 'avc1.4d400d',\n                    'acodec': 'mp4a.40.2',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                }, {\n                    'format_id': '577',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear2/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 577.61,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'width': 640,\n                    'height': 360,\n                    'vcodec': 'avc1.4d401e',\n                    'acodec': 'mp4a.40.2',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                }, {\n                    'format_id': '915',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear3/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 915.905,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'width': 960,\n                    'height': 540,\n                    'vcodec': 'avc1.4d401f',\n                    'acodec': 'mp4a.40.2',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                }, {\n                    'format_id': '1030',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear4/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 1030.138,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'width': 1280,\n                    'height': 720,\n                    'vcodec': 'avc1.4d401f',\n                    'acodec': 'mp4a.40.2',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                }, {\n                    'format_id': '1924',\n                    'format_index': None,\n                    'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/gear5/prog_index.m3u8',\n                    'manifest_url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/bipbop_16x9_variant.m3u8',\n                    'tbr': 1924.009,\n                    'ext': 'mp4',\n                    'fps': None,\n                    'protocol': 'm3u8_native',\n                    'preference': None,\n                    'quality': None,\n                    'width': 1920,\n                    'height': 1080,\n                    'vcodec': 'avc1.4d401f',\n                    'acodec': 'mp4a.40.2',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                }],\n                {\n                    'en': [{\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/eng/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }, {\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/eng_forced/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }],\n                    'fr': [{\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/fra/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }, {\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/fra_forced/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }],\n                    'es': [{\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/spa/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }, {\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/spa_forced/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }],\n                    'ja': [{\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/jpn/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }, {\n                        'url': 'https://devstreaming-cdn.apple.com/videos/streaming/examples/bipbop_16x9/subtitles/jpn_forced/prog_index.m3u8',\n                        'ext': 'vtt',\n                        'protocol': 'm3u8_native',\n                    }],\n                },\n            ),\n        ]\n\n        for m3u8_file, m3u8_url, expected_formats, expected_subs in _TEST_CASES:\n            with open(f'./test/testdata/m3u8/{m3u8_file}.m3u8', encoding='utf-8') as f:\n                formats, subs = self.ie._parse_m3u8_formats_and_subtitles(\n                    f.read(), m3u8_url, ext='mp4')\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n                expect_value(self, subs, expected_subs, None)\n\n    def test_parse_mpd_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/13919\n                # Also tests duplicate representation ids, see\n                # https://github.com/ytdl-org/youtube-dl/issues/15111\n                'float_duration',\n                'http://unknown/manifest.mpd',  # mpd_url\n                None,  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'm4a',\n                    'format_id': '318597',\n                    'format_note': 'DASH audio',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 61.587,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '318597',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001f',\n                    'tbr': 318.597,\n                    'width': 340,\n                    'height': 192,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '638590',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001f',\n                    'tbr': 638.59,\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '1022565',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001f',\n                    'tbr': 1022.565,\n                    'width': 688,\n                    'height': 384,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '2046506',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001f',\n                    'tbr': 2046.506,\n                    'width': 1024,\n                    'height': 576,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '3998017',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.640029',\n                    'tbr': 3998.017,\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '5997485',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.640032',\n                    'tbr': 5997.485,\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/pull/14844\n                'urls_only',\n                'http://unknown/manifest.mpd',  # mpd_url\n                None,  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_144p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 200,\n                    'width': 256,\n                    'height': 144,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_240p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 400,\n                    'width': 424,\n                    'height': 240,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_360p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 800,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_480p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 1200,\n                    'width': 856,\n                    'height': 480,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_576p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 1600,\n                    'width': 1024,\n                    'height': 576,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_720p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 2400,\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_1080p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 4400,\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/issues/20346\n                # Media considered unfragmented even though it contains\n                # Initialization tag\n                'unfragmented',\n                'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',  # mpd_url\n                'https://v.redd.it/hw1x7rcg7zl21',  # mpd_base_url\n                [{\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/audio',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'm4a',\n                    'format_id': 'AUDIO-1',\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 129.87,\n                    'asr': 48000,\n\n                }, {\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/DASH_240',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'VIDEO-2',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d401e',\n                    'tbr': 608.0,\n                    'width': 240,\n                    'height': 240,\n                    'fps': 30,\n                }, {\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/DASH_360',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'VIDEO-1',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d401e',\n                    'tbr': 804.261,\n                    'width': 360,\n                    'height': 360,\n                    'fps': 30,\n                }],\n                {},\n            ), (\n                'subtitles',\n                'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/',\n                [{\n                    'format_id': 'audio=128001',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'm4a',\n                    'tbr': 128.001,\n                    'asr': 48000,\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'vcodec': 'none',\n                    'acodec': 'mp4a.40.2',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'audio_ext': 'm4a',\n                    'video_ext': 'none',\n                    'abr': 128.001,\n                }, {\n                    'format_id': 'video=100000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 336,\n                    'height': 144,\n                    'tbr': 100,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                    'vbr': 100,\n                }, {\n                    'format_id': 'video=326000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 562,\n                    'height': 240,\n                    'tbr': 326,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                    'vbr': 326,\n                }, {\n                    'format_id': 'video=698000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 844,\n                    'height': 360,\n                    'tbr': 698,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                    'vbr': 698,\n                }, {\n                    'format_id': 'video=1493000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 1126,\n                    'height': 480,\n                    'tbr': 1493,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                    'vbr': 1493,\n                }, {\n                    'format_id': 'video=4482000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 1688,\n                    'height': 720,\n                    'tbr': 4482,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                    'video_ext': 'mp4',\n                    'audio_ext': 'none',\n                    'vbr': 4482,\n                }],\n                {\n                    'en': [\n                        {\n                            'ext': 'mp4',\n                            'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                            'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                            'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                            'protocol': 'http_dash_segments',\n                        },\n                    ],\n                },\n            ),\n        ]\n\n        for mpd_file, mpd_url, mpd_base_url, expected_formats, expected_subtitles in _TEST_CASES:\n            with open(f'./test/testdata/mpd/{mpd_file}.mpd', encoding='utf-8') as f:\n                formats, subtitles = self.ie._parse_mpd_formats_and_subtitles(\n                    compat_etree_fromstring(f.read().encode()),\n                    mpd_base_url=mpd_base_url, mpd_url=mpd_url)\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n                expect_value(self, subtitles, expected_subtitles, None)\n\n    def test_parse_ism_formats(self):\n        _TEST_CASES = [\n            (\n                'sintel',\n                'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                [{\n                    'format_id': 'audio-128',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'isma',\n                    'tbr': 128,\n                    'asr': 48000,\n                    'vcodec': 'none',\n                    'acodec': 'AACL',\n                    'protocol': 'ism',\n                    'audio_channels': 2,\n                    '_download_params': {\n                        'stream_type': 'audio',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 0,\n                        'height': 0,\n                        'fourcc': 'AACL',\n                        'codec_private_data': '1190',\n                        'sampling_rate': 48000,\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video-100',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 336,\n                    'height': 144,\n                    'tbr': 100,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 336,\n                        'height': 144,\n                        'fourcc': 'AVC1',\n                        'codec_private_data': '00000001674D401FDA0544EFFC2D002CBC40000003004000000C03C60CA80000000168EF32C8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video-326',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 562,\n                    'height': 240,\n                    'tbr': 326,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 562,\n                        'height': 240,\n                        'fourcc': 'AVC1',\n                        'codec_private_data': '00000001674D401FDA0241FE23FFC3BC83BA44000003000400000300C03C60CA800000000168EF32C8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video-698',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 844,\n                    'height': 360,\n                    'tbr': 698,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 844,\n                        'height': 360,\n                        'fourcc': 'AVC1',\n                        'codec_private_data': '00000001674D401FDA0350BFB97FF06AF06AD1000003000100000300300F1832A00000000168EF32C8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video-1493',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 1126,\n                    'height': 480,\n                    'tbr': 1493,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 1126,\n                        'height': 480,\n                        'fourcc': 'AVC1',\n                        'codec_private_data': '00000001674D401FDA011C3DE6FFF0D890D871000003000100000300300F1832A00000000168EF32C8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video-4482',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 1688,\n                    'height': 720,\n                    'tbr': 4482,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 8880746666,\n                        'timescale': 10000000,\n                        'width': 1688,\n                        'height': 720,\n                        'fourcc': 'AVC1',\n                        'codec_private_data': '00000001674D401FDA01A816F97FFC1ABC1AB440000003004000000C03C60CA80000000168EF32C8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }],\n                {\n                    'eng': [\n                        {\n                            'ext': 'ismt',\n                            'protocol': 'ism',\n                            'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                            'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/Manifest',\n                            '_download_params': {\n                                'stream_type': 'text',\n                                'duration': 8880746666,\n                                'timescale': 10000000,\n                                'fourcc': 'TTML',\n                                'codec_private_data': '',\n                            },\n                        },\n                    ],\n                },\n            ),\n            (\n                'ec-3_test',\n                'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                [{\n                    'format_id': 'audio_deu-127',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'isma',\n                    'tbr': 127,\n                    'asr': 48000,\n                    'vcodec': 'none',\n                    'acodec': 'AACL',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    'audio_channels': 2,\n                    '_download_params': {\n                        'stream_type': 'audio',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 0,\n                        'height': 0,\n                        'fourcc': 'AACL',\n                        'language': 'deu',\n                        'codec_private_data': '1190',\n                        'sampling_rate': 48000,\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'audio_deu_1-224',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'isma',\n                    'tbr': 224,\n                    'asr': 48000,\n                    'vcodec': 'none',\n                    'acodec': 'EC-3',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    'audio_channels': 6,\n                    '_download_params': {\n                        'stream_type': 'audio',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 0,\n                        'height': 0,\n                        'fourcc': 'EC-3',\n                        'language': 'deu',\n                        'codec_private_data': '00063F000000AF87FBA7022DFB42A4D405CD93843BDD0700200F00',\n                        'sampling_rate': 48000,\n                        'channels': 6,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-23',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 384,\n                    'height': 216,\n                    'tbr': 23,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 384,\n                        'height': 216,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '000000016742C00CDB06077E5C05A808080A00000300020000030009C0C02EE0177CC6300F142AE00000000168CA8DC8',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-403',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 400,\n                    'height': 224,\n                    'tbr': 403,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 400,\n                        'height': 224,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D4014E98323B602D4040405000003000100000300320F1429380000000168EAECF2',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-680',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 640,\n                    'height': 360,\n                    'tbr': 680,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 640,\n                        'height': 360,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D401EE981405FF2E02D4040405000000300100000030320F162D3800000000168EAECF2',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-1253',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 640,\n                    'height': 360,\n                    'tbr': 1253,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'vbr': 1253,\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 640,\n                        'height': 360,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D401EE981405FF2E02D4040405000000300100000030320F162D3800000000168EAECF2',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-2121',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 768,\n                    'height': 432,\n                    'tbr': 2121,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 768,\n                        'height': 432,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D401EECA0601BD80B50101014000003000400000300C83C58B6580000000168E93B3C80',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-3275',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 1280,\n                    'height': 720,\n                    'tbr': 3275,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 1280,\n                        'height': 720,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D4020ECA02802DD80B501010140000003004000000C83C60C65800000000168E93B3C80',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-5300',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 1920,\n                    'height': 1080,\n                    'tbr': 5300,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 1920,\n                        'height': 1080,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D4028ECA03C0113F2E02D4040405000000300100000030320F18319600000000168E93B3C80',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }, {\n                    'format_id': 'video_deu-8079',\n                    'url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'manifest_url': 'https://smstr01.dmm.t-online.de/smooth24/smoothstream_m1/streaming/sony/9221438342941275747/636887760842957027/25_km_h-Trailer-9221571562372022953_deu_20_1300k_HD_H_264_ISMV.ism/Manifest',\n                    'ext': 'ismv',\n                    'width': 1920,\n                    'height': 1080,\n                    'tbr': 8079,\n                    'vcodec': 'AVC1',\n                    'acodec': 'none',\n                    'protocol': 'ism',\n                    'language': 'deu',\n                    '_download_params': {\n                        'stream_type': 'video',\n                        'duration': 370000000,\n                        'timescale': 10000000,\n                        'width': 1920,\n                        'height': 1080,\n                        'fourcc': 'AVC1',\n                        'language': 'deu',\n                        'codec_private_data': '00000001674D4028ECA03C0113F2E02D4040405000000300100000030320F18319600000000168E93B3C80',\n                        'channels': 2,\n                        'bits_per_sample': 16,\n                        'nal_unit_length_field': 4,\n                    },\n                }],\n                {},\n            ),\n        ]\n\n        for ism_file, ism_url, expected_formats, expected_subtitles in _TEST_CASES:\n            with open(f'./test/testdata/ism/{ism_file}.Manifest', encoding='utf-8') as f:\n                formats, subtitles = self.ie._parse_ism_formats_and_subtitles(\n                    compat_etree_fromstring(f.read().encode()), ism_url=ism_url)\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n                expect_value(self, subtitles, expected_subtitles, None)\n\n    def test_parse_f4m_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/14660\n                'custom_base_url',\n                'http://api.new.livestream.com/accounts/6115179/events/6764928/videos/144884262.f4m',\n                [{\n                    'manifest_url': 'http://api.new.livestream.com/accounts/6115179/events/6764928/videos/144884262.f4m',\n                    'ext': 'flv',\n                    'format_id': '2148',\n                    'protocol': 'f4m',\n                    'tbr': 2148,\n                    'width': 1280,\n                    'height': 720,\n                }],\n            ),\n        ]\n\n        for f4m_file, f4m_url, expected_formats in _TEST_CASES:\n            with open(f'./test/testdata/f4m/{f4m_file}.f4m', encoding='utf-8') as f:\n                formats = self.ie._parse_f4m_formats(\n                    compat_etree_fromstring(f.read().encode()),\n                    f4m_url, None)\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n\n    def test_parse_xspf(self):\n        _TEST_CASES = [\n            (\n                'foo_xspf',\n                'https://example.org/src/foo_xspf.xspf',\n                [{\n                    'id': 'foo_xspf',\n                    'title': 'Pandemonium',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 202.416,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/src/cd1/track%201.mp3',\n                    }],\n                }, {\n                    'id': 'foo_xspf',\n                    'title': 'Final Cartridge (Nichico Twelve Remix)',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 255.857,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF%E3%80%80%EF%BC%92.mp3',\n                    }],\n                }, {\n                    'id': 'foo_xspf',\n                    'title': 'Rebuilding Nightingale',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 287.915,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/src/track3.mp3',\n                    }, {\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.com/track3.mp3',\n                    }],\n                }],\n            ),\n        ]\n\n        for xspf_file, xspf_url, expected_entries in _TEST_CASES:\n            with open(f'./test/testdata/xspf/{xspf_file}.xspf', encoding='utf-8') as f:\n                entries = self.ie._parse_xspf(\n                    compat_etree_fromstring(f.read().encode()),\n                    xspf_file, xspf_url=xspf_url, xspf_base_url=xspf_url)\n                expect_value(self, entries, expected_entries, None)\n                for i in range(len(entries)):\n                    expect_dict(self, entries[i], expected_entries[i])\n\n    def test_response_with_expected_status_returns_content(self):\n        # Checks for mitigations against the effects of\n        # <https://bugs.python.org/issue15002> that affect Python 3.4.1+, which\n        # manifest as `_download_webpage`, `_download_xml`, `_download_json`,\n        # or the underlying `_download_webpage_handle` returning no content\n        # when a response matches `expected_status`.\n\n        httpd = http.server.HTTPServer(\n            ('127.0.0.1', 0), InfoExtractorTestRequestHandler)\n        port = http_server_port(httpd)\n        server_thread = threading.Thread(target=httpd.serve_forever)\n        server_thread.daemon = True\n        server_thread.start()\n\n        (content, urlh) = self.ie._download_webpage_handle(\n            f'http://127.0.0.1:{port}/teapot', None,\n            expected_status=TEAPOT_RESPONSE_STATUS)\n        self.assertEqual(content, TEAPOT_RESPONSE_BODY)\n\n    def test_search_nextjs_data(self):\n        data = '<script id=\"__NEXT_DATA__\" type=\"application/json\">{\"props\":{}}</script>'\n        self.assertEqual(self.ie._search_nextjs_data(data, None), {'props': {}})\n        self.assertEqual(self.ie._search_nextjs_data('', None, fatal=False), {})\n        self.assertEqual(self.ie._search_nextjs_data('', None, default=None), None)\n        self.assertEqual(self.ie._search_nextjs_data('', None, default={}), {})\n        with self.assertWarns(DeprecationWarning):\n            self.assertEqual(self.ie._search_nextjs_data('', None, default='{}'), {})\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_YoutubeDL.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nfrom unittest.mock import patch\n\nfrom yt_dlp.globals import all_plugins_loaded\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport contextlib\nimport copy\nimport json\n\nfrom test.helper import FakeYDL, assertRegexpMatches, try_rm\nfrom yt_dlp import YoutubeDL\nfrom yt_dlp.extractor import YoutubeIE\nfrom yt_dlp.extractor.common import InfoExtractor\nfrom yt_dlp.postprocessor.common import PostProcessor\nfrom yt_dlp.utils import (\n    ExtractorError,\n    LazyList,\n    OnDemandPagedList,\n    int_or_none,\n    match_filter_func,\n)\nfrom yt_dlp.utils.traversal import traverse_obj\n\nTEST_URL = 'http://localhost/sample.mp4'\n\n\nclass YDL(FakeYDL):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.downloaded_info_dicts = []\n        self.msgs = []\n\n    def process_info(self, info_dict):\n        self.downloaded_info_dicts.append(info_dict.copy())\n\n    def to_screen(self, msg, *args, **kwargs):\n        self.msgs.append(msg)\n\n    def dl(self, *args, **kwargs):\n        assert False, 'Downloader must not be invoked for test_YoutubeDL'\n\n\ndef _make_result(formats, **kwargs):\n    res = {\n        'formats': formats,\n        'id': 'testid',\n        'title': 'testttitle',\n        'extractor': 'testex',\n        'extractor_key': 'TestEx',\n        'webpage_url': 'http://example.com/watch?v=shenanigans',\n    }\n    res.update(**kwargs)\n    return res\n\n\nclass TestFormatSelection(unittest.TestCase):\n    def test_prefer_free_formats(self):\n        # Same resolution => download webm\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = True\n        formats = [\n            {'ext': 'webm', 'height': 460, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 460, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'webm')\n\n        # Different resolution => download best quality (mp4)\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = True\n        formats = [\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 1080, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        # No prefer_free_formats => prefer mp4 and webm\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = False\n        formats = [\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 720, 'url': TEST_URL},\n            {'ext': 'flv', 'height': 720, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = False\n        formats = [\n            {'ext': 'flv', 'height': 720, 'url': TEST_URL},\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'webm')\n\n    def test_format_selection(self):\n        formats = [\n            {'format_id': '35', 'ext': 'mp4', 'preference': 0, 'url': TEST_URL},\n            {'format_id': 'example-with-dashes', 'ext': 'webm', 'preference': 1, 'url': TEST_URL},\n            {'format_id': '45', 'ext': 'webm', 'preference': 2, 'url': TEST_URL},\n            {'format_id': '47', 'ext': 'webm', 'preference': 3, 'url': TEST_URL},\n            {'format_id': '2', 'ext': 'flv', 'preference': 4, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        def test(inp, *expected, multi=False):\n            ydl = YDL({\n                'format': inp,\n                'allow_multiple_video_streams': multi,\n                'allow_multiple_audio_streams': multi,\n            })\n            ydl.process_ie_result(info_dict.copy())\n            downloaded = [x['format_id'] for x in ydl.downloaded_info_dicts]\n            self.assertEqual(downloaded, list(expected))\n\n        test('20/47', '47')\n        test('20/71/worst', '35')\n        test(None, '2')\n        test('webm/mp4', '47')\n        test('3gp/40/mp4', '35')\n        test('example-with-dashes', 'example-with-dashes')\n        test('all', '2', '47', '45', 'example-with-dashes', '35')\n        test('mergeall', '2+47+45+example-with-dashes+35', multi=True)\n        # See: https://github.com/yt-dlp/yt-dlp/pulls/8797\n        test('7_a/worst', '35')\n\n    def test_format_selection_audio(self):\n        formats = [\n            {'format_id': 'audio-low', 'ext': 'webm', 'preference': 1, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio-mid', 'ext': 'webm', 'preference': 2, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio-high', 'ext': 'flv', 'preference': 3, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vid', 'ext': 'mp4', 'preference': 4, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'audio-high')\n\n        ydl = YDL({'format': 'worstaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'audio-low')\n\n        formats = [\n            {'format_id': 'vid-low', 'ext': 'mp4', 'preference': 1, 'url': TEST_URL},\n            {'format_id': 'vid-high', 'ext': 'mp4', 'preference': 2, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestaudio/worstaudio/best'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vid-high')\n\n    def test_format_selection_audio_exts(self):\n        formats = [\n            {'format_id': 'mp3-64', 'ext': 'mp3', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'ogg-64', 'ext': 'ogg', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'aac-64', 'ext': 'aac', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'mp3-32', 'ext': 'mp3', 'abr': 32, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'aac-32', 'ext': 'aac', 'abr': 32, 'url': 'http://_', 'vcodec': 'none'},\n        ]\n\n        info_dict = _make_result(formats)\n        ydl = YDL({'format': 'best', 'format_sort': ['abr', 'ext']})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'aac-64')\n\n        ydl = YDL({'format': 'mp3'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'mp3-64')\n\n        ydl = YDL({'prefer_free_formats': True, 'format_sort': ['abr', 'ext']})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'ogg-64')\n\n    def test_format_selection_video(self):\n        formats = [\n            {'format_id': 'dash-video-low', 'ext': 'mp4', 'preference': 1, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'dash-video-high', 'ext': 'mp4', 'preference': 2, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vid', 'ext': 'mp4', 'preference': 3, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestvideo'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-high')\n\n        ydl = YDL({'format': 'worstvideo'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-low')\n\n        ydl = YDL({'format': 'bestvideo[format_id^=dash][format_id$=low]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-low')\n\n        formats = [\n            {'format_id': 'vid-vcodec-dot', 'ext': 'mp4', 'preference': 1, 'vcodec': 'avc1.123456', 'acodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestvideo[vcodec=avc1.123456]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vid-vcodec-dot')\n\n    def test_format_selection_by_vcodec_sort(self):\n        formats = [\n            {'format_id': 'av1-format', 'ext': 'mp4', 'vcodec': 'av1', 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vp9-hdr-format', 'ext': 'mp4', 'vcodec': 'vp09.02.50.10.01.09.18.09.00', 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vp9-sdr-format', 'ext': 'mp4', 'vcodec': 'vp09.00.50.08', 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'h265-format', 'ext': 'mp4', 'vcodec': 'h265', 'acodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestvideo', 'format_sort': ['vcodec:vp9.2']})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vp9-hdr-format')\n\n        ydl = YDL({'format': 'bestvideo', 'format_sort': ['vcodec:vp9']})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vp9-sdr-format')\n\n        ydl = YDL({'format': 'bestvideo', 'format_sort': ['+vcodec:vp9.2']})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vp9-hdr-format')\n\n        ydl = YDL({'format': 'bestvideo', 'format_sort': ['+vcodec:vp9']})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vp9-sdr-format')\n\n    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!=abc-cba][format_id!=zxc-cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # starts with (^=)\n        ydl = YDL({'format': '[format_id^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not start with (!^=)\n        ydl = YDL({'format': '[format_id!^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!^=abc][format_id!^=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # ends with ($=)\n        ydl = YDL({'format': '[format_id$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not end with (!$=)\n        ydl = YDL({'format': '[format_id!$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!$=cba][format_id!$=cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # contains (*=)\n        ydl = YDL({'format': '[format_id*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not contain (!*=)\n        ydl = YDL({'format': '[format_id!*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!*=abc][format_id!*=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        ydl = YDL({'format': '[format_id!*=-]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n    def test_youtube_format_selection(self):\n        # FIXME: Rewrite in accordance with the new format sorting options\n        return\n\n        order = [\n            '38', '37', '46', '22', '45', '35', '44', '18', '34', '43', '6', '5', '17', '36', '13',\n            # Apple HTTP Live Streaming\n            '96', '95', '94', '93', '92', '132', '151',\n            # 3D\n            '85', '84', '102', '83', '101', '82', '100',\n            # Dash video\n            '137', '248', '136', '247', '135', '246',\n            '245', '244', '134', '243', '133', '242', '160',\n            # Dash audio\n            '141', '172', '140', '171', '139',\n        ]\n\n        def format_info(f_id):\n            info = YoutubeIE._formats[f_id].copy()\n\n            # XXX: In real cases InfoExtractor._parse_mpd_formats() fills up 'acodec'\n            # and 'vcodec', while in tests such information is incomplete since\n            # commit a6c2c24479e5f4827ceb06f64d855329c0a6f593\n            # test_YoutubeDL.test_youtube_format_selection is broken without\n            # this fix\n            if 'acodec' in info and 'vcodec' not in info:\n                info['vcodec'] = 'none'\n            elif 'vcodec' in info and 'acodec' not in info:\n                info['acodec'] = 'none'\n\n            info['format_id'] = f_id\n            info['url'] = 'url:' + f_id\n            return info\n        formats_order = [format_info(f_id) for f_id in order]\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo+bestaudio'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '248+172')\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo[height>=999999]+bestaudio/best'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '38')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo/best,bestaudio'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['137', '141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])+bestaudio'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['137+141', '248+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])[height<=720]+bestaudio'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['136+141', '247+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=none]/bestvideo[ext=webm])+bestaudio'})\n        ydl.sort_formats(info_dict)\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['248+141'])\n\n        for f1, f2 in zip(formats_order, formats_order[1:]):\n            info_dict = _make_result([f1, f2], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            ydl.sort_formats(info_dict)\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])\n\n            info_dict = _make_result([f2, f1], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            ydl.sort_formats(info_dict)\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])\n\n    def test_audio_only_extractor_format_selection(self):\n        # For extractors with incomplete formats (all formats are audio-only or\n        # video-only) best and worst should fallback to corresponding best/worst\n        # video-only or audio-only formats (as per\n        # https://github.com/ytdl-org/youtube-dl/pull/5556)\n        formats = [\n            {'format_id': 'low', 'ext': 'mp3', 'preference': 1, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'high', 'ext': 'mp3', 'preference': 2, 'vcodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'best'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'high')\n\n        ydl = YDL({'format': 'worst'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'low')\n\n    def test_format_not_available(self):\n        formats = [\n            {'format_id': 'regular', 'ext': 'mp4', 'height': 360, 'url': TEST_URL},\n            {'format_id': 'video', 'ext': 'mp4', 'height': 720, 'acodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # This must fail since complete video-audio format does not match filter\n        # and extractor does not provide incomplete only formats (i.e. only\n        # video-only or audio-only).\n        ydl = YDL({'format': 'best[height>360]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n    def test_format_selection_issue_10083(self):\n        # See https://github.com/ytdl-org/youtube-dl/issues/10083\n        formats = [\n            {'format_id': 'regular', 'height': 360, 'url': TEST_URL},\n            {'format_id': 'video', 'height': 720, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio', 'vcodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'best[height>360]/bestvideo[height>360]+bestaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        self.assertEqual(ydl.downloaded_info_dicts[0]['format_id'], 'video+audio')\n\n    def test_invalid_format_specs(self):\n        def assert_syntax_error(format_spec):\n            self.assertRaises(SyntaxError, YDL, {'format': format_spec})\n\n        assert_syntax_error('bestvideo,,best')\n        assert_syntax_error('+bestaudio')\n        assert_syntax_error('bestvideo+')\n        assert_syntax_error('/')\n        assert_syntax_error('[720<height]')\n\n    def test_format_filtering(self):\n        formats = [\n            {'format_id': 'A', 'filesize': 500, 'width': 1000, 'aspect_ratio': 1.0},\n            {'format_id': 'B', 'filesize': 1000, 'width': 500, 'aspect_ratio': 1.33},\n            {'format_id': 'C', 'filesize': 1000, 'width': 400, 'aspect_ratio': 1.5},\n            {'format_id': 'D', 'filesize': 2000, 'width': 600, 'aspect_ratio': 1.78},\n            {'format_id': 'E', 'filesize': 3000, 'aspect_ratio': 0.56},\n            {'format_id': 'F'},\n            {'format_id': 'G', 'filesize': 1000000},\n        ]\n        for f in formats:\n            f['url'] = 'http://_/'\n            f['ext'] = 'unknown'\n        info_dict = _make_result(formats, _format_sort_fields=('id', ))\n\n        ydl = YDL({'format': 'best[filesize<3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'D')\n\n        ydl = YDL({'format': 'best[filesize<=3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'E')\n\n        ydl = YDL({'format': 'best[filesize <= ? 3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'F')\n\n        ydl = YDL({'format': 'best [filesize = 1000] [width>450]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'B')\n\n        ydl = YDL({'format': 'best [filesize = 1000] [width!=450]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'C')\n\n        ydl = YDL({'format': '[filesize>?1]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'G')\n\n        ydl = YDL({'format': '[filesize<1M]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'E')\n\n        ydl = YDL({'format': '[filesize<1MiB]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'G')\n\n        ydl = YDL({'format': 'all[width>=400][width<=600]'})\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['D', 'C', 'B'])\n\n        ydl = YDL({'format': 'best[height<40]'})\n        with contextlib.suppress(ExtractorError):\n            ydl.process_ie_result(info_dict)\n        self.assertEqual(ydl.downloaded_info_dicts, [])\n\n        ydl = YDL({'format': 'best[aspect_ratio=1]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'A')\n\n        ydl = YDL({'format': 'all[aspect_ratio > 1.00]'})\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['D', 'C', 'B'])\n\n        ydl = YDL({'format': 'all[aspect_ratio < 1.00]'})\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['E'])\n\n        ydl = YDL({'format': 'best[aspect_ratio=1.5]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'C')\n\n        ydl = YDL({'format': 'all[aspect_ratio!=1]'})\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['E', 'D', 'C', 'B'])\n\n    @patch('yt_dlp.postprocessor.ffmpeg.FFmpegMergerPP.available', False)\n    def test_default_format_spec_without_ffmpeg(self):\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'outtmpl': '-'})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n    @patch('yt_dlp.postprocessor.ffmpeg.FFmpegMergerPP.available', True)\n    @patch('yt_dlp.postprocessor.ffmpeg.FFmpegMergerPP.can_merge', lambda _: True)\n    def test_default_format_spec_with_ffmpeg(self):\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({}), 'bestvideo*+bestaudio/best')\n\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({}), 'bestvideo*+bestaudio/best')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'outtmpl': '-'})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({}), 'bestvideo*+bestaudio/best')\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n\nclass TestYoutubeDL(unittest.TestCase):\n    def test_subtitles(self):\n        def s_formats(lang, autocaption=False):\n            return [{\n                'ext': ext,\n                'url': f'http://localhost/video.{lang}.{ext}',\n                '_auto': autocaption,\n            } for ext in ['vtt', 'srt', 'ass']]\n        subtitles = {l: s_formats(l) for l in ['en', 'fr', 'es']}\n        auto_captions = {l: s_formats(l, True) for l in ['it', 'pt', 'es']}\n        info_dict = {\n            'id': 'test',\n            'title': 'Test',\n            'url': 'http://localhost/video.mp4',\n            'subtitles': subtitles,\n            'automatic_captions': auto_captions,\n            'extractor': 'TEST',\n            'webpage_url': 'http://example.com/watch?v=shenanigans',\n        }\n\n        def get_info(params={}):\n            params.setdefault('simulate', True)\n            ydl = YDL(params)\n            ydl.report_warning = lambda *args, **kargs: None\n            return ydl.process_video_result(info_dict, download=False)\n\n        result = get_info()\n        self.assertFalse(result.get('requested_subtitles'))\n        self.assertEqual(result['subtitles'], subtitles)\n        self.assertEqual(result['automatic_captions'], auto_captions)\n\n        result = get_info({'writesubtitles': True})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'en'})\n        self.assertTrue(subs['en'].get('data') is None)\n        self.assertEqual(subs['en']['ext'], 'ass')\n\n        result = get_info({'writesubtitles': True, 'subtitlesformat': 'foo/srt'})\n        subs = result['requested_subtitles']\n        self.assertEqual(subs['en']['ext'], 'srt')\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['es', 'fr', 'it']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'es', 'fr'})\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['all', '-en']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'es', 'fr'})\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['en', 'fr', '-en']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'fr'})\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['-en', 'en']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'en'})\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['e.+']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'es', 'en'})\n\n        result = get_info({'writesubtitles': True, 'writeautomaticsub': True, 'subtitleslangs': ['es', 'pt']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'es', 'pt'})\n        self.assertFalse(subs['es']['_auto'])\n        self.assertTrue(subs['pt']['_auto'])\n\n        result = get_info({'writeautomaticsub': True, 'subtitleslangs': ['es', 'pt']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), {'es', 'pt'})\n        self.assertTrue(subs['es']['_auto'])\n        self.assertTrue(subs['pt']['_auto'])\n\n    def test_add_extra_info(self):\n        test_dict = {\n            'extractor': 'Foo',\n        }\n        extra_info = {\n            'extractor': 'Bar',\n            'playlist': 'funny videos',\n        }\n        YDL.add_extra_info(test_dict, extra_info)\n        self.assertEqual(test_dict['extractor'], 'Foo')\n        self.assertEqual(test_dict['playlist'], 'funny videos')\n\n    outtmpl_info = {\n        'id': '1234',\n        'ext': 'mp4',\n        'width': None,\n        'height': 1080,\n        'filesize': 1024,\n        'title1': '$PATH',\n        'title2': '%PATH%',\n        'title3': 'foo/bar\\\\test',\n        'title4': 'foo \"bar\" test',\n        'title5': 'áéí 𝐀',\n        'timestamp': 1618488000,\n        'duration': 100000,\n        'playlist_index': 1,\n        'playlist_autonumber': 2,\n        '__last_playlist_index': 100,\n        'n_entries': 10,\n        'formats': [\n            {'id': 'id 1', 'height': 1080, 'width': 1920},\n            {'id': 'id 2', 'height': 720},\n            {'id': 'id 3'},\n        ],\n    }\n\n    def test_prepare_outtmpl_and_filename(self):\n        def test(tmpl, expected, *, info=None, **params):\n            params['outtmpl'] = tmpl\n            ydl = FakeYDL(params)\n            ydl._num_downloads = 1\n            self.assertEqual(ydl.validate_outtmpl(tmpl), None)\n\n            out = ydl.evaluate_outtmpl(tmpl, info or self.outtmpl_info)\n            fname = ydl.prepare_filename(info or self.outtmpl_info)\n\n            if not isinstance(expected, (list, tuple)):\n                expected = (expected, expected)\n            for (name, got), expect in zip((('outtmpl', out), ('filename', fname)), expected):\n                if callable(expect):\n                    self.assertTrue(expect(got), f'Wrong {name} from {tmpl}')\n                elif expect is not None:\n                    self.assertEqual(got, expect, f'Wrong {name} from {tmpl}')\n\n        # Side-effects\n        original_infodict = dict(self.outtmpl_info)\n        test('foo.bar', 'foo.bar')\n        original_infodict['epoch'] = self.outtmpl_info.get('epoch')\n        self.assertTrue(isinstance(original_infodict['epoch'], int))\n        test('%(epoch)d', int_or_none)\n        self.assertEqual(original_infodict, self.outtmpl_info)\n\n        # Auto-generated fields\n        test('%(id)s.%(ext)s', '1234.mp4')\n        test('%(duration_string)s', ('27:46:40', '27-46-40'))\n        test('%(resolution)s', '1080p')\n        test('%(playlist_index|)s', '001')\n        test('%(playlist_index&{}!)s', '1!')\n        test('%(playlist_autonumber)s', '02')\n        test('%(autonumber)s', '00001')\n        test('%(autonumber+2)03d', '005', autonumber_start=3)\n        test('%(autonumber)s', '001', autonumber_size=3)\n\n        # Escaping %\n        test('%', '%')\n        test('%%', '%')\n        test('%%%%', '%%')\n        test('%s', '%s')\n        test('%%%s', '%%s')\n        test('%d', '%d')\n        test('%abc%', '%abc%')\n        test('%%(width)06d.%(ext)s', '%(width)06d.mp4')\n        test('%%%(height)s', '%1080')\n        test('%(width)06d.%(ext)s', 'NA.mp4')\n        test('%(width)06d.%%(ext)s', 'NA.%(ext)s')\n        test('%%(width)06d.%(ext)s', '%(width)06d.mp4')\n\n        # Sanitization options\n        test('%(title3)s', (None, 'foo⧸bar⧹test'))\n        test('%(title5)s', (None, 'aei_A'), restrictfilenames=True)\n        test('%(title3)s', (None, 'foo_bar_test'), windowsfilenames=False, restrictfilenames=True)\n        if sys.platform != 'win32':\n            test('%(title3)s', (None, 'foo⧸bar\\\\test'), windowsfilenames=False)\n\n        # ID sanitization\n        test('%(id)s', '_abcd', info={'id': '_abcd'})\n        test('%(some_id)s', '_abcd', info={'some_id': '_abcd'})\n        test('%(formats.0.id)s', '_abcd', info={'formats': [{'id': '_abcd'}]})\n        test('%(id)s', '-abcd', info={'id': '-abcd'})\n        test('%(id)s', '.abcd', info={'id': '.abcd'})\n        test('%(id)s', 'ab__cd', info={'id': 'ab__cd'})\n        test('%(id)s', ('ab:cd', 'ab：cd'), info={'id': 'ab:cd'})\n        test('%(id.0)s', '-', info={'id': '--'})\n\n        # Invalid templates\n        self.assertTrue(isinstance(YoutubeDL.validate_outtmpl('%(title)'), ValueError))\n        test('%(invalid@tmpl|def)s', 'none', outtmpl_na_placeholder='none')\n        test('%(..)s', 'NA')\n        test('%(formats.{id)s', 'NA')\n\n        # Entire info_dict\n        def expect_same_infodict(out):\n            got_dict = json.loads(out)\n            for info_field, expected in self.outtmpl_info.items():\n                self.assertEqual(got_dict.get(info_field), expected, info_field)\n            return True\n\n        test('%()j', (expect_same_infodict, None))\n\n        # NA placeholder\n        NA_TEST_OUTTMPL = '%(uploader_date)s-%(width)d-%(x|def)s-%(id)s.%(ext)s'\n        test(NA_TEST_OUTTMPL, 'NA-NA-def-1234.mp4')\n        test(NA_TEST_OUTTMPL, 'none-none-def-1234.mp4', outtmpl_na_placeholder='none')\n        test(NA_TEST_OUTTMPL, '--def-1234.mp4', outtmpl_na_placeholder='')\n        test('%(non_existent.0)s', 'NA')\n\n        # String formatting\n        FMT_TEST_OUTTMPL = '%%(height)%s.%%(ext)s'\n        test(FMT_TEST_OUTTMPL % 's', '1080.mp4')\n        test(FMT_TEST_OUTTMPL % 'd', '1080.mp4')\n        test(FMT_TEST_OUTTMPL % '6d', '  1080.mp4')\n        test(FMT_TEST_OUTTMPL % '-6d', '1080  .mp4')\n        test(FMT_TEST_OUTTMPL % '06d', '001080.mp4')\n        test(FMT_TEST_OUTTMPL % ' 06d', ' 01080.mp4')\n        test(FMT_TEST_OUTTMPL % '   06d', ' 01080.mp4')\n        test(FMT_TEST_OUTTMPL % '0 6d', ' 01080.mp4')\n        test(FMT_TEST_OUTTMPL % '0   6d', ' 01080.mp4')\n        test(FMT_TEST_OUTTMPL % '   0   6d', ' 01080.mp4')\n\n        # Type casting\n        test('%(id)d', '1234')\n        test('%(height)c', '1')\n        test('%(ext)c', 'm')\n        test('%(id)d %(id)r', \"1234 '1234'\")\n        test('%(id)r %(height)r', \"'1234' 1080\")\n        test('%(title5)a %(height)a', (R\"'\\xe1\\xe9\\xed \\U0001d400' 1080\", None))\n        test('%(ext)s-%(ext|def)d', 'mp4-def')\n        test('%(width|0)04d', '0')\n        test('a%(width|b)d', 'ab', outtmpl_na_placeholder='none')\n\n        FORMATS = self.outtmpl_info['formats']\n\n        # Custom type casting\n        test('%(formats.:.id)l', 'id 1, id 2, id 3')\n        test('%(formats.:.id)#l', ('id 1\\nid 2\\nid 3', 'id 1 id 2 id 3'))\n        test('%(ext)l', 'mp4')\n        test('%(formats.:.id) 18l', '  id 1, id 2, id 3')\n        test('%(formats)j', (json.dumps(FORMATS), None))\n        test('%(formats)#j', (\n            json.dumps(FORMATS, indent=4),\n            json.dumps(FORMATS, indent=4).replace(':', '：').replace('\"', '＂').replace('\\n', ' '),\n        ))\n        test('%(title5).3B', 'á')\n        test('%(title5)U', 'áéí 𝐀')\n        test('%(title5)#U', 'a\\u0301e\\u0301i\\u0301 𝐀')\n        test('%(title5)+U', 'áéí A')\n        test('%(title5)+#U', 'a\\u0301e\\u0301i\\u0301 A')\n        test('%(height)D', '1k')\n        test('%(filesize)#D', '1Ki')\n        test('%(height)5.2D', ' 1.08k')\n        test('%(title4)#S', 'foo_bar_test')\n        test('%(title4).10S', ('foo ＂bar＂ ', 'foo ＂bar＂' + ('#' if os.name == 'nt' else ' ')))\n        if os.name == 'nt':\n            test('%(title4)q', ('\"foo \"\"bar\"\" test\"', None))\n            test('%(formats.:.id)#q', ('\"id 1\" \"id 2\" \"id 3\"', None))\n            test('%(formats.0.id)#q', ('\"id 1\"', None))\n        else:\n            test('%(title4)q', ('\\'foo \"bar\" test\\'', '\\'foo ＂bar＂ test\\''))\n            test('%(formats.:.id)#q', \"'id 1' 'id 2' 'id 3'\")\n            test('%(formats.0.id)#q', \"'id 1'\")\n\n        # Internal formatting\n        test('%(timestamp-1000>%H-%M-%S)s', '11-43-20')\n        test('%(title|%)s %(title|%%)s', '% %%')\n        test('%(id+1-height+3)05d', '00158')\n        test('%(width+100)05d', 'NA')\n        test('%(filesize*8)d', '8192')\n        test('%(formats.0) 15s', ('% 15s' % FORMATS[0], None))\n        test('%(formats.0)r', (repr(FORMATS[0]), None))\n        test('%(height.0)03d', '001')\n        test('%(-height.0)04d', '-001')\n        test('%(formats.-1.id)s', FORMATS[-1]['id'])\n        test('%(formats.0.id.-1)d', FORMATS[0]['id'][-1])\n        test('%(formats.3)s', 'NA')\n        test('%(formats.:2:-1)r', repr(FORMATS[:2:-1]))\n        test('%(formats.0.id.-1+id)f', '1235.000000')\n        test('%(formats.0.id.-1+formats.1.id.-1)d', '3')\n        out = json.dumps([{'id': f['id'], 'height.:2': str(f['height'])[:2]}\n                          if 'height' in f else {'id': f['id']}\n                          for f in FORMATS])\n        test('%(formats.:.{id,height.:2})j', (out, None))\n        test('%(formats.:.{id,height}.id)l', ', '.join(f['id'] for f in FORMATS))\n        test('%(.{id,title})j', ('{\"id\": \"1234\"}', '{＂id＂： ＂1234＂}'))\n\n        # Alternates\n        test('%(title,id)s', '1234')\n        test('%(width-100,height+20|def)d', '1100')\n        test('%(width-100,height+width|def)s', 'def')\n        test('%(timestamp-x>%H\\\\,%M\\\\,%S,timestamp>%H\\\\,%M\\\\,%S)s', '12,00,00')\n\n        # Replacement\n        test('%(id&foo)s.bar', 'foo.bar')\n        test('%(title&foo)s.bar', 'NA.bar')\n        test('%(title&foo|baz)s.bar', 'baz.bar')\n        test('%(x,id&foo|baz)s.bar', 'foo.bar')\n        test('%(x,title&foo|baz)s.bar', 'baz.bar')\n        test('%(id&a\\nb|)s', ('a\\nb', 'a b'))\n        test('%(id&hi {:>10} {}|)s', 'hi       1234 1234')\n        test(R'%(id&{0} {}|)s', 'NA')\n        test(R'%(id&{0.1}|)s', 'NA')\n        test('%(height&{:,d})S', '1,080')\n\n        # Laziness\n        def gen():\n            yield from range(5)\n            raise self.assertTrue(False, 'LazyList should not be evaluated till here')\n        test('%(key.4)s', '4', info={'key': LazyList(gen())})\n\n        # Empty filename\n        test('%(foo|)s-%(bar|)s.%(ext)s', '-.mp4')\n        # test('%(foo|)s.%(ext)s', ('.mp4', '_.mp4'))  # FIXME: ?\n        # test('%(foo|)s', ('', '_'))  # FIXME: ?\n\n        # Environment variable expansion for prepare_filename\n        os.environ['__yt_dlp_var'] = 'expanded'\n        envvar = '%__yt_dlp_var%' if os.name == 'nt' else '$__yt_dlp_var'\n        test(envvar, (envvar, 'expanded'))\n        if os.name == 'nt':\n            test('%s%', ('%s%', '%s%'))\n            os.environ['s'] = 'expanded'\n            test('%s%', ('%s%', 'expanded'))  # %s% should be expanded before escaping %s\n            os.environ['(test)s'] = 'expanded'\n            test('%(test)s%', ('NA%', 'expanded'))  # Environment should take priority over template\n\n        # Path expansion and escaping\n        test('Hello %(title1)s', 'Hello $PATH')\n        test('Hello %(title2)s', 'Hello %PATH%')\n        test('%(title3)s', ('foo/bar\\\\test', 'foo⧸bar⧹test'))\n        test('folder/%(title3)s', ('folder/foo/bar\\\\test', f'folder{os.path.sep}foo⧸bar⧹test'))\n\n    def test_format_note(self):\n        ydl = YoutubeDL()\n        self.assertEqual(ydl._format_note({}), '')\n        assertRegexpMatches(self, ydl._format_note({\n            'vbr': 10,\n        }), r'^\\s*10k$')\n        assertRegexpMatches(self, ydl._format_note({\n            'fps': 30,\n        }), r'^30fps$')\n\n    def test_postprocessors(self):\n        filename = 'post-processor-testfile.mp4'\n        audiofile = filename + '.mp3'\n\n        class SimplePP(PostProcessor):\n            def run(self, info):\n                with open(audiofile, 'w') as f:\n                    f.write('EXAMPLE')\n                return [info['filepath']], info\n\n        def run_pp(params, pp):\n            with open(filename, 'w') as f:\n                f.write('EXAMPLE')\n            ydl = YoutubeDL(params)\n            ydl.add_post_processor(pp())\n            ydl.post_process(filename, {'filepath': filename})\n\n        run_pp({'keepvideo': True}, SimplePP)\n        self.assertTrue(os.path.exists(filename), f'{filename} doesn\\'t exist')\n        self.assertTrue(os.path.exists(audiofile), f'{audiofile} doesn\\'t exist')\n        os.unlink(filename)\n        os.unlink(audiofile)\n\n        run_pp({'keepvideo': False}, SimplePP)\n        self.assertFalse(os.path.exists(filename), f'{filename} exists')\n        self.assertTrue(os.path.exists(audiofile), f'{audiofile} doesn\\'t exist')\n        os.unlink(audiofile)\n\n        class ModifierPP(PostProcessor):\n            def run(self, info):\n                with open(info['filepath'], 'w') as f:\n                    f.write('MODIFIED')\n                return [], info\n\n        run_pp({'keepvideo': False}, ModifierPP)\n        self.assertTrue(os.path.exists(filename), f'{filename} doesn\\'t exist')\n        os.unlink(filename)\n\n    def test_match_filter(self):\n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n            'uploader': '變態妍字幕版 太妍 тест',\n            'creator': \"тест ' 123 ' тест--\",\n            'webpage_url': 'http://example.com/watch?v=shenanigans',\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n            'uploader': 'тест 123',\n            'webpage_url': 'http://example.com/watch?v=SHENANIGANS',\n        }\n        videos = [first, second]\n\n        def get_videos(filter_=None):\n            ydl = YDL({'match_filter': filter_, 'simulate': True})\n            for v in videos:\n                ydl.process_ie_result(v.copy(), download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n\n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n\n        def f(v, incomplete):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n\n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('uploader = \"變態妍字幕版 太妍 тест\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('uploader != \"變態妍字幕版 太妍 тест\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('creator = \"тест \\' 123 \\' тест--\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func(\"creator = 'тест \\\\' 123 \\\\' тест--'\")\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func(r\"creator = 'тест \\' 123 \\' тест--' & duration > 30\")\n        res = get_videos(f)\n        self.assertEqual(res, [])\n\n    def test_playlist_items_selection(self):\n        INDICES, PAGE_SIZE = list(range(1, 11)), 3\n\n        def entry(i, evaluated):\n            evaluated.append(i)\n            return {\n                'id': str(i),\n                'title': str(i),\n                'url': TEST_URL,\n            }\n\n        def pagedlist_entries(evaluated):\n            def page_func(n):\n                start = PAGE_SIZE * n\n                for i in INDICES[start: start + PAGE_SIZE]:\n                    yield entry(i, evaluated)\n            return OnDemandPagedList(page_func, PAGE_SIZE)\n\n        def page_num(i):\n            return (i + PAGE_SIZE - 1) // PAGE_SIZE\n\n        def generator_entries(evaluated):\n            for i in INDICES:\n                yield entry(i, evaluated)\n\n        def list_entries(evaluated):\n            return list(generator_entries(evaluated))\n\n        def lazylist_entries(evaluated):\n            return LazyList(generator_entries(evaluated))\n\n        def get_downloaded_info_dicts(params, entries):\n            ydl = YDL(params)\n            ydl.process_ie_result({\n                '_type': 'playlist',\n                'id': 'test',\n                'extractor': 'test:playlist',\n                'extractor_key': 'test:playlist',\n                'webpage_url': 'http://example.com',\n                'entries': entries,\n            })\n            return ydl.downloaded_info_dicts\n\n        def test_selection(params, expected_ids, evaluate_all=False):\n            expected_ids = list(expected_ids)\n            if evaluate_all:\n                generator_eval = pagedlist_eval = INDICES\n            elif not expected_ids:\n                generator_eval = pagedlist_eval = []\n            else:\n                generator_eval = INDICES[0: max(expected_ids)]\n                pagedlist_eval = INDICES[PAGE_SIZE * page_num(min(expected_ids)) - PAGE_SIZE:\n                                         PAGE_SIZE * page_num(max(expected_ids))]\n\n            for name, func, expected_eval in (\n                ('list', list_entries, INDICES),\n                ('Generator', generator_entries, generator_eval),\n                # ('LazyList', lazylist_entries, generator_eval),  # Generator and LazyList follow the exact same code path\n                ('PagedList', pagedlist_entries, pagedlist_eval),\n            ):\n                evaluated = []\n                entries = func(evaluated)\n                results = [(v['playlist_autonumber'] - 1, (int(v['id']), v['playlist_index']))\n                           for v in get_downloaded_info_dicts(params, entries)]\n                self.assertEqual(results, list(enumerate(zip(expected_ids, expected_ids))), f'Entries of {name} for {params}')\n                self.assertEqual(sorted(evaluated), expected_eval, f'Evaluation of {name} for {params}')\n\n        test_selection({}, INDICES)\n        test_selection({'playlistend': 20}, INDICES, True)\n        test_selection({'playlistend': 2}, INDICES[:2])\n        test_selection({'playliststart': 11}, [], True)\n        test_selection({'playliststart': 2}, INDICES[1:])\n        test_selection({'playlist_items': '2-4'}, INDICES[1:4])\n        test_selection({'playlist_items': '2,4'}, [2, 4])\n        test_selection({'playlist_items': '20'}, [], True)\n        test_selection({'playlist_items': '0'}, [])\n\n        # Tests for https://github.com/ytdl-org/youtube-dl/issues/10591\n        test_selection({'playlist_items': '2-4,3-4,3'}, [2, 3, 4])\n        test_selection({'playlist_items': '4,2'}, [4, 2])\n\n        # Tests for https://github.com/yt-dlp/yt-dlp/issues/720\n        # https://github.com/yt-dlp/yt-dlp/issues/302\n        test_selection({'playlistreverse': True}, INDICES[::-1])\n        test_selection({'playliststart': 2, 'playlistreverse': True}, INDICES[:0:-1])\n        test_selection({'playlist_items': '2,4', 'playlistreverse': True}, [4, 2])\n        test_selection({'playlist_items': '4,2'}, [4, 2])\n\n        # Tests for --playlist-items start:end:step\n        test_selection({'playlist_items': ':'}, INDICES, True)\n        test_selection({'playlist_items': '::1'}, INDICES, True)\n        test_selection({'playlist_items': '::-1'}, INDICES[::-1], True)\n        test_selection({'playlist_items': ':6'}, INDICES[:6])\n        test_selection({'playlist_items': ':-6'}, INDICES[:-5], True)\n        test_selection({'playlist_items': '-1:6:-2'}, INDICES[:4:-2], True)\n        test_selection({'playlist_items': '9:-6:-2'}, INDICES[8:3:-2], True)\n\n        test_selection({'playlist_items': '1:inf:2'}, INDICES[::2], True)\n        test_selection({'playlist_items': '-2:inf'}, INDICES[-2:], True)\n        test_selection({'playlist_items': ':inf:-1'}, [], True)\n        test_selection({'playlist_items': '0-2:2'}, [2])\n        test_selection({'playlist_items': '1-:2'}, INDICES[::2], True)\n        test_selection({'playlist_items': '0--2:2'}, INDICES[1:-1:2], True)\n\n        test_selection({'playlist_items': '10::3'}, [10], True)\n        test_selection({'playlist_items': '-1::3'}, [10], True)\n        test_selection({'playlist_items': '11::3'}, [], True)\n        test_selection({'playlist_items': '-15::2'}, INDICES[1::2], True)\n        test_selection({'playlist_items': '-15::15'}, [], True)\n\n    def test_do_not_override_ie_key_in_url_transparent(self):\n        ydl = YDL()\n\n        class Foo1IE(InfoExtractor):\n            _VALID_URL = r'foo1:'\n\n            def _real_extract(self, url):\n                return {\n                    '_type': 'url_transparent',\n                    'url': 'foo2:',\n                    'ie_key': 'Foo2',\n                    'title': 'foo1 title',\n                    'id': 'foo1_id',\n                }\n\n        class Foo2IE(InfoExtractor):\n            _VALID_URL = r'foo2:'\n\n            def _real_extract(self, url):\n                return {\n                    '_type': 'url',\n                    'url': 'foo3:',\n                    'ie_key': 'Foo3',\n                }\n\n        class Foo3IE(InfoExtractor):\n            _VALID_URL = r'foo3:'\n\n            def _real_extract(self, url):\n                return _make_result([{'url': TEST_URL}], title='foo3 title')\n\n        ydl.add_info_extractor(Foo1IE(ydl))\n        ydl.add_info_extractor(Foo2IE(ydl))\n        ydl.add_info_extractor(Foo3IE(ydl))\n        ydl.extract_info('foo1:')\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['url'], TEST_URL)\n        self.assertEqual(downloaded['title'], 'foo1 title')\n        self.assertEqual(downloaded['id'], 'testid')\n        self.assertEqual(downloaded['extractor'], 'testex')\n        self.assertEqual(downloaded['extractor_key'], 'TestEx')\n\n    # Test case for https://github.com/ytdl-org/youtube-dl/issues/27064\n    def test_ignoreerrors_for_playlist_with_url_transparent_iterable_entries(self):\n\n        class _YDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super().__init__(*args, **kwargs)\n\n            def trouble(self, s, tb=None):\n                pass\n\n        ydl = _YDL({\n            'format': 'extra',\n            'ignoreerrors': True,\n        })\n\n        class VideoIE(InfoExtractor):\n            _VALID_URL = r'video:(?P<id>\\d+)'\n\n            def _real_extract(self, url):\n                video_id = self._match_id(url)\n                formats = [{\n                    'format_id': 'default',\n                    'url': 'url:',\n                }]\n                if video_id == '0':\n                    raise ExtractorError('foo')\n                if video_id == '2':\n                    formats.append({\n                        'format_id': 'extra',\n                        'url': TEST_URL,\n                    })\n                return {\n                    'id': video_id,\n                    'title': f'Video {video_id}',\n                    'formats': formats,\n                }\n\n        class PlaylistIE(InfoExtractor):\n            _VALID_URL = r'playlist:'\n\n            def _entries(self):\n                for n in range(3):\n                    video_id = str(n)\n                    yield {\n                        '_type': 'url_transparent',\n                        'ie_key': VideoIE.ie_key(),\n                        'id': video_id,\n                        'url': f'video:{video_id}',\n                        'title': f'Video Transparent {video_id}',\n                    }\n\n            def _real_extract(self, url):\n                return self.playlist_result(self._entries())\n\n        ydl.add_info_extractor(VideoIE(ydl))\n        ydl.add_info_extractor(PlaylistIE(ydl))\n        info = ydl.extract_info('playlist:')\n        entries = info['entries']\n        self.assertEqual(len(entries), 3)\n        self.assertTrue(entries[0] is None)\n        self.assertTrue(entries[1] is None)\n        self.assertEqual(len(ydl.downloaded_info_dicts), 1)\n        downloaded = ydl.downloaded_info_dicts[0]\n        entries[2].pop('requested_downloads', None)\n        self.assertEqual(entries[2], downloaded)\n        self.assertEqual(downloaded['url'], TEST_URL)\n        self.assertEqual(downloaded['title'], 'Video Transparent 2')\n        self.assertEqual(downloaded['id'], '2')\n        self.assertEqual(downloaded['extractor'], 'Video')\n        self.assertEqual(downloaded['extractor_key'], 'Video')\n\n    def test_header_cookies(self):\n        from http.cookiejar import Cookie\n\n        ydl = FakeYDL()\n        ydl.report_warning = lambda *_, **__: None\n\n        def cookie(name, value, version=None, domain='', path='', secure=False, expires=None):\n            return Cookie(\n                version or 0, name, value, None, False,\n                domain, bool(domain), bool(domain), path, bool(path),\n                secure, expires, False, None, None, rest={})\n\n        _test_url = 'https://yt.dlp/test'\n\n        def test(encoded_cookies, cookies, *, headers=False, round_trip=None, error_re=None):\n            def _test():\n                ydl.cookiejar.clear()\n                ydl._load_cookies(encoded_cookies, autoscope=headers)\n                if headers:\n                    ydl._apply_header_cookies(_test_url)\n                data = {'url': _test_url}\n                ydl._calc_headers(data)\n                self.assertCountEqual(\n                    map(vars, ydl.cookiejar), map(vars, cookies),\n                    'Extracted cookiejar.Cookie is not the same')\n                if not headers:\n                    self.assertEqual(\n                        data.get('cookies'), round_trip or encoded_cookies,\n                        'Cookie is not the same as round trip')\n                ydl.__dict__['_YoutubeDL__header_cookies'] = []\n\n            with self.subTest(msg=encoded_cookies):\n                if not error_re:\n                    _test()\n                    return\n                with self.assertRaisesRegex(Exception, error_re):\n                    _test()\n\n        test('test=value; Domain=.yt.dlp', [cookie('test', 'value', domain='.yt.dlp')])\n        test('test=value', [cookie('test', 'value')], error_re=r'Unscoped cookies are not allowed')\n        test('cookie1=value1; Domain=.yt.dlp; Path=/test; cookie2=value2; Domain=.yt.dlp; Path=/', [\n            cookie('cookie1', 'value1', domain='.yt.dlp', path='/test'),\n            cookie('cookie2', 'value2', domain='.yt.dlp', path='/')])\n        test('test=value; Domain=.yt.dlp; Path=/test; Secure; Expires=9999999999', [\n            cookie('test', 'value', domain='.yt.dlp', path='/test', secure=True, expires=9999999999)])\n        test('test=\"value; \"; path=/test; domain=.yt.dlp', [\n            cookie('test', 'value; ', domain='.yt.dlp', path='/test')],\n            round_trip='test=\"value\\\\073 \"; Domain=.yt.dlp; Path=/test')\n        test('name=; Domain=.yt.dlp', [cookie('name', '', domain='.yt.dlp')],\n             round_trip='name=\"\"; Domain=.yt.dlp')\n\n        test('test=value', [cookie('test', 'value', domain='.yt.dlp')], headers=True)\n        test('cookie1=value; Domain=.yt.dlp; cookie2=value', [], headers=True, error_re=r'Invalid syntax')\n        ydl.deprecated_feature = ydl.report_error\n        test('test=value', [], headers=True, error_re=r'Passing cookies as a header is a potential security risk')\n\n    def test_infojson_cookies(self):\n        TEST_FILE = 'test_infojson_cookies.info.json'\n        TEST_URL = 'https://example.com/example.mp4'\n        COOKIES = 'a=b; Domain=.example.com; c=d; Domain=.example.com'\n        COOKIE_HEADER = {'Cookie': 'a=b; c=d'}\n\n        ydl = FakeYDL()\n        ydl.process_info = lambda x: ydl._write_info_json('test', x, TEST_FILE)\n\n        def make_info(info_header_cookies=False, fmts_header_cookies=False, cookies_field=False):\n            fmt = {'url': TEST_URL}\n            if fmts_header_cookies:\n                fmt['http_headers'] = COOKIE_HEADER\n            if cookies_field:\n                fmt['cookies'] = COOKIES\n            return _make_result([fmt], http_headers=COOKIE_HEADER if info_header_cookies else None)\n\n        def test(initial_info, note):\n            result = {}\n            result['processed'] = ydl.process_ie_result(initial_info)\n            self.assertTrue(ydl.cookiejar.get_cookies_for_url(TEST_URL),\n                            msg=f'No cookies set in cookiejar after initial process when {note}')\n            ydl.cookiejar.clear()\n            with open(TEST_FILE) as infojson:\n                result['loaded'] = ydl.sanitize_info(json.load(infojson), True)\n            result['final'] = ydl.process_ie_result(result['loaded'].copy(), download=False)\n            self.assertTrue(ydl.cookiejar.get_cookies_for_url(TEST_URL),\n                            msg=f'No cookies set in cookiejar after final process when {note}')\n            ydl.cookiejar.clear()\n            for key in ('processed', 'loaded', 'final'):\n                info = result[key]\n                self.assertIsNone(\n                    traverse_obj(info, ((None, ('formats', 0)), 'http_headers', 'Cookie'), casesense=False, get_all=False),\n                    msg=f'Cookie header not removed in {key} result when {note}')\n                self.assertEqual(\n                    traverse_obj(info, ((None, ('formats', 0)), 'cookies'), get_all=False), COOKIES,\n                    msg=f'No cookies field found in {key} result when {note}')\n\n        test({'url': TEST_URL, 'http_headers': COOKIE_HEADER, 'id': '1', 'title': 'x'}, 'no formats field')\n        test(make_info(info_header_cookies=True), 'info_dict header cokies')\n        test(make_info(fmts_header_cookies=True), 'format header cookies')\n        test(make_info(info_header_cookies=True, fmts_header_cookies=True), 'info_dict and format header cookies')\n        test(make_info(info_header_cookies=True, fmts_header_cookies=True, cookies_field=True), 'all cookies fields')\n        test(make_info(cookies_field=True), 'cookies format field')\n        test({'url': TEST_URL, 'cookies': COOKIES, 'id': '1', 'title': 'x'}, 'info_dict cookies field only')\n\n        try_rm(TEST_FILE)\n\n    def test_add_headers_cookie(self):\n        def check_for_cookie_header(result):\n            return traverse_obj(result, ((None, ('formats', 0)), 'http_headers', 'Cookie'), casesense=False, get_all=False)\n\n        ydl = FakeYDL({'http_headers': {'Cookie': 'a=b'}})\n        ydl._apply_header_cookies(_make_result([])['webpage_url'])  # Scope to input webpage URL: .example.com\n\n        fmt = {'url': 'https://example.com/video.mp4'}\n        result = ydl.process_ie_result(_make_result([fmt]), download=False)\n        self.assertIsNone(check_for_cookie_header(result), msg='http_headers cookies in result info_dict')\n        self.assertEqual(result.get('cookies'), 'a=b; Domain=.example.com', msg='No cookies were set in cookies field')\n        self.assertIn('a=b', ydl.cookiejar.get_cookie_header(fmt['url']), msg='No cookies were set in cookiejar')\n\n        fmt = {'url': 'https://wrong.com/video.mp4'}\n        result = ydl.process_ie_result(_make_result([fmt]), download=False)\n        self.assertIsNone(check_for_cookie_header(result), msg='http_headers cookies for wrong domain')\n        self.assertFalse(result.get('cookies'), msg='Cookies set in cookies field for wrong domain')\n        self.assertFalse(ydl.cookiejar.get_cookie_header(fmt['url']), msg='Cookies set in cookiejar for wrong domain')\n\n    def test_load_plugins_compat(self):\n        # Should try to reload plugins if they haven't already been loaded\n        all_plugins_loaded.value = False\n        FakeYDL().close()\n        assert all_plugins_loaded.value\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_YoutubeDLCookieJar.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport re\nimport tempfile\n\nfrom yt_dlp.cookies import YoutubeDLCookieJar\n\n\nclass TestYoutubeDLCookieJar(unittest.TestCase):\n    def test_keep_session_cookies(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/session_cookies.txt')\n        cookiejar.load()\n        tf = tempfile.NamedTemporaryFile(delete=False)\n        try:\n            cookiejar.save(filename=tf.name)\n            temp = tf.read().decode()\n            self.assertTrue(re.search(\n                r'www\\.foobar\\.foobar\\s+FALSE\\s+/\\s+TRUE\\s+0\\s+YoutubeDLExpiresEmpty\\s+YoutubeDLExpiresEmptyValue', temp))\n            self.assertTrue(re.search(\n                r'www\\.foobar\\.foobar\\s+FALSE\\s+/\\s+TRUE\\s+0\\s+YoutubeDLExpires0\\s+YoutubeDLExpires0Value', temp))\n        finally:\n            tf.close()\n            os.remove(tf.name)\n\n    def test_strip_httponly_prefix(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/httponly_cookies.txt')\n        cookiejar.load()\n\n        def assert_cookie_has_value(key):\n            self.assertEqual(cookiejar._cookies['www.foobar.foobar']['/'][key].value, key + '_VALUE')\n\n        assert_cookie_has_value('HTTPONLY_COOKIE')\n        assert_cookie_has_value('JS_ACCESSIBLE_COOKIE')\n\n    def test_malformed_cookies(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/malformed_cookies.txt')\n        cookiejar.load()\n        # Cookies should be empty since all malformed cookie file entries\n        # will be ignored\n        self.assertFalse(cookiejar._cookies)\n\n    def test_get_cookie_header(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/httponly_cookies.txt')\n        cookiejar.load()\n        header = cookiejar.get_cookie_header('https://www.foobar.foobar')\n        self.assertIn('HTTPONLY_COOKIE', header)\n\n    def test_get_cookies_for_url(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/session_cookies.txt')\n        cookiejar.load()\n        cookies = cookiejar.get_cookies_for_url('https://www.foobar.foobar/')\n        self.assertEqual(len(cookies), 2)\n        cookies = cookiejar.get_cookies_for_url('https://foobar.foobar/')\n        self.assertFalse(cookies)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_aes.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nimport base64\n\nfrom yt_dlp.aes import (\n    aes_cbc_decrypt,\n    aes_cbc_decrypt_bytes,\n    aes_cbc_encrypt,\n    aes_ctr_decrypt,\n    aes_ctr_encrypt,\n    aes_decrypt,\n    aes_decrypt_text,\n    aes_ecb_decrypt,\n    aes_ecb_encrypt,\n    aes_encrypt,\n    aes_gcm_decrypt_and_verify,\n    aes_gcm_decrypt_and_verify_bytes,\n    key_expansion,\n    pad_block,\n)\nfrom yt_dlp.dependencies import Cryptodome\n\n# the encrypted data can be generate with 'devscripts/generate_aes_testdata.py'\n\n\nclass TestAES(unittest.TestCase):\n    def setUp(self):\n        self.key = self.iv = [0x20, 0x15] + 14 * [0]\n        self.secret_msg = b'Secret message goes here'\n\n    def test_encrypt(self):\n        msg = b'message'\n        key = list(range(16))\n        encrypted = aes_encrypt(list(msg), key)\n        decrypted = bytes(aes_decrypt(encrypted, key))\n        self.assertEqual(decrypted, msg)\n\n    def test_cbc_decrypt(self):\n        data = b'\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6\\x27\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd'\n        decrypted = bytes(aes_cbc_decrypt(list(data), self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n        if Cryptodome.AES:\n            decrypted = aes_cbc_decrypt_bytes(data, bytes(self.key), bytes(self.iv))\n            self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_cbc_encrypt(self):\n        data = list(self.secret_msg)\n        encrypted = bytes(aes_cbc_encrypt(data, self.key, self.iv))\n        self.assertEqual(\n            encrypted,\n            b'\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6\\'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd')\n\n    def test_ctr_decrypt(self):\n        data = list(b'\\x03\\xc7\\xdd\\xd4\\x8e\\xb3\\xbc\\x1a*O\\xdc1\\x12+8Aio\\xd1z\\xb5#\\xaf\\x08')\n        decrypted = bytes(aes_ctr_decrypt(data, self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_ctr_encrypt(self):\n        data = list(self.secret_msg)\n        encrypted = bytes(aes_ctr_encrypt(data, self.key, self.iv))\n        self.assertEqual(\n            encrypted,\n            b'\\x03\\xc7\\xdd\\xd4\\x8e\\xb3\\xbc\\x1a*O\\xdc1\\x12+8Aio\\xd1z\\xb5#\\xaf\\x08')\n\n    def test_gcm_decrypt(self):\n        data = b'\\x159Y\\xcf5eud\\x90\\x9c\\x85&]\\x14\\x1d\\x0f.\\x08\\xb4T\\xe4/\\x17\\xbd'\n        authentication_tag = b'\\xe8&I\\x80rI\\x07\\x9d}YWuU@:e'\n\n        decrypted = bytes(aes_gcm_decrypt_and_verify(\n            list(data), self.key, list(authentication_tag), self.iv[:12]))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n        if Cryptodome.AES:\n            decrypted = aes_gcm_decrypt_and_verify_bytes(\n                data, bytes(self.key), authentication_tag, bytes(self.iv[:12]))\n            self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_gcm_aligned_decrypt(self):\n        data = b'\\x159Y\\xcf5eud\\x90\\x9c\\x85&]\\x14\\x1d\\x0f'\n        authentication_tag = b'\\x08\\xb1\\x9d!&\\x98\\xd0\\xeaRq\\x90\\xe6;\\xb5]\\xd8'\n\n        decrypted = bytes(aes_gcm_decrypt_and_verify(\n            list(data), self.key, list(authentication_tag), self.iv[:12]))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg[:16])\n        if Cryptodome.AES:\n            decrypted = aes_gcm_decrypt_and_verify_bytes(\n                data, bytes(self.key), authentication_tag, bytes(self.iv[:12]))\n            self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg[:16])\n\n    def test_decrypt_text(self):\n        password = bytes(self.key).decode()\n        encrypted = base64.b64encode(\n            bytes(self.iv[:8])\n            + b'\\x17\\x15\\x93\\xab\\x8d\\x80V\\xcdV\\xe0\\t\\xcdo\\xc2\\xa5\\xd8ksM\\r\\xe27N\\xae',\n        ).decode()\n        decrypted = (aes_decrypt_text(encrypted, password, 16))\n        self.assertEqual(decrypted, self.secret_msg)\n\n        password = bytes(self.key).decode()\n        encrypted = base64.b64encode(\n            bytes(self.iv[:8])\n            + b'\\x0b\\xe6\\xa4\\xd9z\\x0e\\xb8\\xb9\\xd0\\xd4i_\\x85\\x1d\\x99\\x98_\\xe5\\x80\\xe7.\\xbf\\xa5\\x83',\n        ).decode()\n        decrypted = (aes_decrypt_text(encrypted, password, 32))\n        self.assertEqual(decrypted, self.secret_msg)\n\n    def test_ecb_encrypt(self):\n        data = list(self.secret_msg)\n        encrypted = bytes(aes_ecb_encrypt(data, self.key))\n        self.assertEqual(\n            encrypted,\n            b'\\xaa\\x86]\\x81\\x97>\\x02\\x92\\x9d\\x1bR[[L/u\\xd3&\\xd1(h\\xde{\\x81\\x94\\xba\\x02\\xae\\xbd\\xa6\\xd0:')\n\n    def test_ecb_decrypt(self):\n        data = list(b'\\xaa\\x86]\\x81\\x97>\\x02\\x92\\x9d\\x1bR[[L/u\\xd3&\\xd1(h\\xde{\\x81\\x94\\xba\\x02\\xae\\xbd\\xa6\\xd0:')\n        decrypted = bytes(aes_ecb_decrypt(data, self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_key_expansion(self):\n        key = '4f6bdaa39e2f8cb07f5e722d9edef314'\n\n        self.assertEqual(key_expansion(list(bytearray.fromhex(key))), [\n            0x4F, 0x6B, 0xDA, 0xA3, 0x9E, 0x2F, 0x8C, 0xB0, 0x7F, 0x5E, 0x72, 0x2D, 0x9E, 0xDE, 0xF3, 0x14,\n            0x53, 0x66, 0x20, 0xA8, 0xCD, 0x49, 0xAC, 0x18, 0xB2, 0x17, 0xDE, 0x35, 0x2C, 0xC9, 0x2D, 0x21,\n            0x8C, 0xBE, 0xDD, 0xD9, 0x41, 0xF7, 0x71, 0xC1, 0xF3, 0xE0, 0xAF, 0xF4, 0xDF, 0x29, 0x82, 0xD5,\n            0x2D, 0xAD, 0xDE, 0x47, 0x6C, 0x5A, 0xAF, 0x86, 0x9F, 0xBA, 0x00, 0x72, 0x40, 0x93, 0x82, 0xA7,\n            0xF9, 0xBE, 0x82, 0x4E, 0x95, 0xE4, 0x2D, 0xC8, 0x0A, 0x5E, 0x2D, 0xBA, 0x4A, 0xCD, 0xAF, 0x1D,\n            0x54, 0xC7, 0x26, 0x98, 0xC1, 0x23, 0x0B, 0x50, 0xCB, 0x7D, 0x26, 0xEA, 0x81, 0xB0, 0x89, 0xF7,\n            0x93, 0x60, 0x4E, 0x94, 0x52, 0x43, 0x45, 0xC4, 0x99, 0x3E, 0x63, 0x2E, 0x18, 0x8E, 0xEA, 0xD9,\n            0xCA, 0xE7, 0x7B, 0x39, 0x98, 0xA4, 0x3E, 0xFD, 0x01, 0x9A, 0x5D, 0xD3, 0x19, 0x14, 0xB7, 0x0A,\n            0xB0, 0x4E, 0x1C, 0xED, 0x28, 0xEA, 0x22, 0x10, 0x29, 0x70, 0x7F, 0xC3, 0x30, 0x64, 0xC8, 0xC9,\n            0xE8, 0xA6, 0xC1, 0xE9, 0xC0, 0x4C, 0xE3, 0xF9, 0xE9, 0x3C, 0x9C, 0x3A, 0xD9, 0x58, 0x54, 0xF3,\n            0xB4, 0x86, 0xCC, 0xDC, 0x74, 0xCA, 0x2F, 0x25, 0x9D, 0xF6, 0xB3, 0x1F, 0x44, 0xAE, 0xE7, 0xEC])\n\n    def test_pad_block(self):\n        block = [0x21, 0xA0, 0x43, 0xFF]\n\n        self.assertEqual(pad_block(block, 'pkcs7'),\n                         [*block, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C])\n\n        self.assertEqual(pad_block(block, 'iso7816'),\n                         [*block, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])\n\n        self.assertEqual(pad_block(block, 'whitespace'),\n                         [*block, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20])\n\n        self.assertEqual(pad_block(block, 'zero'),\n                         [*block, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])\n\n        block = list(range(16))\n        for mode in ('pkcs7', 'iso7816', 'whitespace', 'zero'):\n            self.assertEqual(pad_block(block, mode), block, mode)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_age_restriction.py": "#!/usr/bin/env python3\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import is_download_test, try_rm\nfrom yt_dlp import YoutubeDL\nfrom yt_dlp.utils import DownloadError\n\n\ndef _download_restricted(url, filename, age):\n    \"\"\" Returns true if the file has been downloaded \"\"\"\n\n    params = {\n        'age_limit': age,\n        'skip_download': True,\n        'writeinfojson': True,\n        'outtmpl': '%(id)s.%(ext)s',\n    }\n    ydl = YoutubeDL(params)\n    ydl.add_default_info_extractors()\n    json_filename = os.path.splitext(filename)[0] + '.info.json'\n    try_rm(json_filename)\n    try:\n        ydl.download([url])\n    except DownloadError:\n        pass\n    else:\n        return os.path.exists(json_filename)\n    finally:\n        try_rm(json_filename)\n\n\n@is_download_test\nclass TestAgeRestriction(unittest.TestCase):\n    def _assert_restricted(self, url, filename, age, old_age=None):\n        self.assertTrue(_download_restricted(url, filename, old_age))\n        self.assertFalse(_download_restricted(url, filename, age))\n\n    def test_youtube(self):\n        self._assert_restricted('HtVdAasjOgU', 'HtVdAasjOgU.mp4', 10)\n\n    def test_youporn(self):\n        self._assert_restricted(\n            'https://www.youporn.com/watch/16715086/sex-ed-in-detention-18-asmr/',\n            '16715086.mp4', 2, old_age=25)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  "requirements": null
}