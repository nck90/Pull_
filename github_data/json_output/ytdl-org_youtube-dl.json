{
  "repo_name": "ytdl-org/youtube-dl",
  "repo_url": "https://github.com/ytdl-org/youtube-dl",
  "description": "Command-line program to download videos from YouTube.com and other video sites",
  "stars": 134722,
  "language": "Python",
  "created_at": "2010-10-31T14:35:07Z",
  "updated_at": "2025-03-19T06:29:18Z",
  "files": {
    "devscripts/generate_aes_testdata.py": "from __future__ import unicode_literals\n\nimport codecs\nimport subprocess\n\nimport os\nimport sys\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.utils import intlist_to_bytes\nfrom youtube_dl.aes import aes_encrypt, key_expansion\n\nsecret_msg = b'Secret message goes here'\n\n\ndef hex_str(int_list):\n    return codecs.encode(intlist_to_bytes(int_list), 'hex')\n\n\ndef openssl_encode(algo, key, iv):\n    cmd = ['openssl', 'enc', '-e', '-' + algo, '-K', hex_str(key), '-iv', hex_str(iv)]\n    prog = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)\n    out, _ = prog.communicate(secret_msg)\n    return out\n\n\niv = key = [0x20, 0x15] + 14 * [0]\n\nr = openssl_encode('aes-128-cbc', key, iv)\nprint('aes_cbc_decrypt')\nprint(repr(r))\n\npassword = key\nnew_key = aes_encrypt(password, key_expansion(password))\nr = openssl_encode('aes-128-ctr', new_key, iv)\nprint('aes_decrypt_text 16')\nprint(repr(r))\n\npassword = key + 16 * [0]\nnew_key = aes_encrypt(password, key_expansion(password)) * (32 // 16)\nr = openssl_encode('aes-256-ctr', new_key, iv)\nprint('aes_decrypt_text 32')\nprint(repr(r))\n",
    "test/helper.py": "from __future__ import unicode_literals\n\nimport errno\nimport hashlib\nimport json\nimport os.path\nimport re\nimport ssl\nimport sys\nimport types\nimport unittest\n\nimport youtube_dl.extractor\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import (\n    compat_open as open,\n    compat_os_name,\n    compat_str,\n)\nfrom youtube_dl.utils import (\n    IDENTITY,\n    preferredencoding,\n    write_string,\n)\n\n\ndef get_params(override=None):\n    PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                   \"parameters.json\")\n    LOCAL_PARAMETERS_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)),\n                                         \"local_parameters.json\")\n    with open(PARAMETERS_FILE, encoding='utf-8') as pf:\n        parameters = json.load(pf)\n    if os.path.exists(LOCAL_PARAMETERS_FILE):\n        with open(LOCAL_PARAMETERS_FILE, encoding='utf-8') as pf:\n            parameters.update(json.load(pf))\n    if override:\n        parameters.update(override)\n    return parameters\n\n\ndef try_rm(filename):\n    \"\"\" Remove a file if it exists \"\"\"\n    try:\n        os.remove(filename)\n    except OSError as ose:\n        if ose.errno != errno.ENOENT:\n            raise\n\n\ndef report_warning(message):\n    '''\n    Print the message to stderr, it will be prefixed with 'WARNING:'\n    If stderr is a tty file the 'WARNING:' will be colored\n    '''\n    if sys.stderr.isatty() and compat_os_name != 'nt':\n        _msg_header = '\\033[0;33mWARNING:\\033[0m'\n    else:\n        _msg_header = 'WARNING:'\n    output = '%s %s\\n' % (_msg_header, message)\n    if 'b' in getattr(sys.stderr, 'mode', '') or sys.version_info[0] < 3:\n        output = output.encode(preferredencoding())\n    sys.stderr.write(output)\n\n\nclass FakeYDL(YoutubeDL):\n    def __init__(self, override=None):\n        # Different instances of the downloader can't share the same dictionary\n        # some test set the \"sublang\" parameter, which would break the md5 checks.\n        params = get_params(override=override)\n        super(FakeYDL, self).__init__(params, auto_init=False)\n        self.result = []\n\n    def to_screen(self, s, skip_eol=None):\n        print(s)\n\n    def trouble(self, *args, **kwargs):\n        s = args[0] if len(args) > 0 else kwargs.get('message', 'Missing message')\n        raise Exception(s)\n\n    def download(self, x):\n        self.result.append(x)\n\n    def expect_warning(self, regex):\n        # Silence an expected warning matching a regex\n        old_report_warning = self.report_warning\n\n        def report_warning(self, message):\n            if re.match(regex, message):\n                return\n            old_report_warning(message)\n        self.report_warning = types.MethodType(report_warning, self)\n\n\nclass FakeLogger(object):\n    def debug(self, msg):\n        pass\n\n    def warning(self, msg):\n        pass\n\n    def error(self, msg):\n        pass\n\n\ndef gettestcases(include_onlymatching=False):\n    for ie in youtube_dl.extractor.gen_extractors():\n        for tc in ie.get_testcases(include_onlymatching):\n            yield tc\n\n\nmd5 = lambda s: hashlib.md5(s.encode('utf-8')).hexdigest()\n\n\ndef expect_value(self, got, expected, field):\n    if isinstance(expected, compat_str) and expected.startswith('re:'):\n        match_str = expected[len('re:'):]\n        match_rex = re.compile(match_str)\n\n        self.assertTrue(\n            isinstance(got, compat_str),\n            'Expected a %s object, but got %s for field %s' % (\n                compat_str.__name__, type(got).__name__, field))\n        self.assertTrue(\n            match_rex.match(got),\n            'field %s (value: %r) should match %r' % (field, got, match_str))\n    elif isinstance(expected, compat_str) and expected.startswith('startswith:'):\n        start_str = expected[len('startswith:'):]\n        self.assertTrue(\n            isinstance(got, compat_str),\n            'Expected a %s object, but got %s for field %s' % (\n                compat_str.__name__, type(got).__name__, field))\n        self.assertTrue(\n            got.startswith(start_str),\n            'field %s (value: %r) should start with %r' % (field, got, start_str))\n    elif isinstance(expected, compat_str) and expected.startswith('contains:'):\n        contains_str = expected[len('contains:'):]\n        self.assertTrue(\n            isinstance(got, compat_str),\n            'Expected a %s object, but got %s for field %s' % (\n                compat_str.__name__, type(got).__name__, field))\n        self.assertTrue(\n            contains_str in got,\n            'field %s (value: %r) should contain %r' % (field, got, contains_str))\n    elif isinstance(expected, compat_str) and re.match(r'lambda \\w+:', expected):\n        fn = eval(expected)\n        suite = expected.split(':', 1)[1].strip()\n        self.assertTrue(\n            fn(got),\n            'Expected field %s to meet condition %s, but value %r failed ' % (field, suite, got))\n    elif isinstance(expected, type):\n        self.assertTrue(\n            isinstance(got, expected),\n            'Expected type %r for field %s, but got value %r of type %r' % (expected, field, got, type(got)))\n    elif isinstance(expected, dict) and isinstance(got, dict):\n        expect_dict(self, got, expected)\n    elif isinstance(expected, list) and isinstance(got, list):\n        self.assertEqual(\n            len(expected), len(got),\n            'Expected a list of length %d, but got a list of length %d for field %s' % (\n                len(expected), len(got), field))\n        for index, (item_got, item_expected) in enumerate(zip(got, expected)):\n            type_got = type(item_got)\n            type_expected = type(item_expected)\n            self.assertEqual(\n                type_expected, type_got,\n                'Type mismatch for list item at index %d for field %s, expected %r, got %r' % (\n                    index, field, type_expected, type_got))\n            expect_value(self, item_got, item_expected, field)\n    else:\n        if isinstance(expected, compat_str) and expected.startswith('md5:'):\n            self.assertTrue(\n                isinstance(got, compat_str),\n                'Expected field %s to be a unicode object, but got value %r of type %r' % (field, got, type(got)))\n            got = 'md5:' + md5(got)\n        elif isinstance(expected, compat_str) and re.match(r'^(?:min|max)?count:\\d+', expected):\n            self.assertTrue(\n                isinstance(got, (list, dict)),\n                'Expected field %s to be a list or a dict, but it is of type %s' % (\n                    field, type(got).__name__))\n            op, _, expected_num = expected.partition(':')\n            expected_num = int(expected_num)\n            if op == 'mincount':\n                assert_func = self.assertGreaterEqual\n                msg_tmpl = 'Expected %d items in field %s, but only got %d'\n            elif op == 'maxcount':\n                assert_func = self.assertLessEqual\n                msg_tmpl = 'Expected maximum %d items in field %s, but got %d'\n            elif op == 'count':\n                assert_func = self.assertEqual\n                msg_tmpl = 'Expected exactly %d items in field %s, but got %d'\n            else:\n                assert False\n            assert_func(\n                len(got), expected_num,\n                msg_tmpl % (expected_num, field, len(got)))\n            return\n        self.assertEqual(\n            expected, got,\n            'Invalid value for field %s, expected %r, got %r' % (field, expected, got))\n\n\ndef expect_dict(self, got_dict, expected_dict):\n    for info_field, expected in expected_dict.items():\n        got = got_dict.get(info_field)\n        expect_value(self, got, expected, info_field)\n\n\ndef expect_info_dict(self, got_dict, expected_dict):\n    expect_dict(self, got_dict, expected_dict)\n    # Check for the presence of mandatory fields\n    if got_dict.get('_type') not in ('playlist', 'multi_video'):\n        for key in ('id', 'url', 'title', 'ext'):\n            self.assertTrue(got_dict.get(key), 'Missing mandatory field %s' % key)\n    # Check for mandatory fields that are automatically set by YoutubeDL\n    for key in ['webpage_url', 'extractor', 'extractor_key']:\n        self.assertTrue(got_dict.get(key), 'Missing field: %s' % key)\n\n    # Are checkable fields missing from the test case definition?\n    test_info_dict = dict((key, value if not isinstance(value, compat_str) or len(value) < 250 else 'md5:' + md5(value))\n                          for key, value in got_dict.items()\n                          if value and key in ('id', 'title', 'description', 'uploader', 'upload_date', 'timestamp', 'uploader_id', 'location', 'age_limit'))\n    missing_keys = set(test_info_dict.keys()) - set(expected_dict.keys())\n    if missing_keys:\n        def _repr(v):\n            if isinstance(v, compat_str):\n                return \"'%s'\" % v.replace('\\\\', '\\\\\\\\').replace(\"'\", \"\\\\'\").replace('\\n', '\\\\n')\n            else:\n                return repr(v)\n        info_dict_str = ''\n        if len(missing_keys) != len(expected_dict):\n            info_dict_str += ''.join(\n                '    %s: %s,\\n' % (_repr(k), _repr(v))\n                for k, v in test_info_dict.items() if k not in missing_keys)\n\n            if info_dict_str:\n                info_dict_str += '\\n'\n        info_dict_str += ''.join(\n            '    %s: %s,\\n' % (_repr(k), _repr(test_info_dict[k]))\n            for k in missing_keys)\n        write_string(\n            '\\n\\'info_dict\\': {\\n' + info_dict_str + '},\\n', out=sys.stderr)\n        self.assertFalse(\n            missing_keys,\n            'Missing keys in test definition: %s' % (\n                ', '.join(sorted(missing_keys))))\n\n\ndef assertRegexpMatches(self, text, regexp, msg=None):\n    if hasattr(self, 'assertRegexp'):\n        return self.assertRegexp(text, regexp, msg)\n    else:\n        m = re.match(regexp, text)\n        if not m:\n            note = 'Regexp didn\\'t match: %r not found' % (regexp)\n            if len(text) < 1000:\n                note += ' in %r' % text\n            if msg is None:\n                msg = note\n            else:\n                msg = note + ', ' + msg\n            self.assertTrue(m, msg)\n\n\ndef expect_warnings(ydl, warnings_re):\n    real_warning = ydl.report_warning\n\n    def _report_warning(w):\n        if not any(re.search(w_re, w) for w_re in warnings_re):\n            real_warning(w)\n\n    ydl.report_warning = _report_warning\n\n\ndef http_server_port(httpd):\n    if os.name == 'java' and isinstance(httpd.socket, ssl.SSLSocket):\n        # In Jython SSLSocket is not a subclass of socket.socket\n        sock = httpd.socket.sock\n    else:\n        sock = httpd.socket\n    return sock.getsockname()[1]\n\n\ndef expectedFailureIf(cond):\n    return unittest.expectedFailure if cond else IDENTITY\n",
    "test/test_InfoExtractor.py": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\n\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport threading\n\nfrom test.helper import (\n    expect_dict,\n    expect_value,\n    FakeYDL,\n    http_server_port,\n)\nfrom youtube_dl.compat import (\n    compat_etree_fromstring,\n    compat_http_server,\n    compat_open as open,\n)\nfrom youtube_dl.extractor.common import InfoExtractor\nfrom youtube_dl.extractor import (\n    get_info_extractor,\n    YoutubeIE,\n)\nfrom youtube_dl.utils import (\n    encode_data_uri,\n    ExtractorError,\n    RegexNotFoundError,\n    strip_jsonp,\n)\n\n\nTEAPOT_RESPONSE_STATUS = 418\nTEAPOT_RESPONSE_BODY = \"<h1>418 I'm a teapot</h1>\"\n\n\nclass InfoExtractorTestRequestHandler(compat_http_server.BaseHTTPRequestHandler):\n    def log_message(self, format, *args):\n        pass\n\n    def do_GET(self):\n        if self.path == '/teapot':\n            self.send_response(TEAPOT_RESPONSE_STATUS)\n            self.send_header('Content-Type', 'text/html; charset=utf-8')\n            self.end_headers()\n            self.wfile.write(TEAPOT_RESPONSE_BODY.encode())\n        else:\n            assert False\n\n\nclass DummyIE(InfoExtractor):\n    pass\n\n\nclass TestInfoExtractor(unittest.TestCase):\n    def setUp(self):\n        self.ie = DummyIE(FakeYDL())\n\n    def test_ie_key(self):\n        self.assertEqual(get_info_extractor(YoutubeIE.ie_key()), YoutubeIE)\n\n    def test_html_search_regex(self):\n        html = '<p id=\"foo\">Watch this <a href=\"http://www.youtube.com/watch?v=BaW_jenozKc\">video</a></p>'\n        search = lambda re, *args: self.ie._html_search_regex(re, html, *args)\n        self.assertEqual(search(r'<p id=\"foo\">(.+?)</p>', 'foo'), 'Watch this video')\n\n    def test_opengraph(self):\n        ie = self.ie\n        html = '''\n            <meta name=\"og:title\" content='Foo'/>\n            <meta content=\"Some video's description \" name=\"og:description\"/>\n            <meta property='og:image' content='http://domain.com/pic.jpg?key1=val1&amp;key2=val2'/>\n            <meta content='application/x-shockwave-flash' property='og:video:type'>\n            <meta content='Foo' property=og:foobar>\n            <meta name=\"og:test1\" content='foo > < bar'/>\n            <meta name=\"og:test2\" content=\"foo >//< bar\"/>\n            <meta property=og-test3 content='Ill-formatted opengraph'/>\n            <meta property=og:test4 content=unquoted-value/>\n            '''\n        self.assertEqual(ie._og_search_title(html), 'Foo')\n        self.assertEqual(ie._og_search_description(html), 'Some video\\'s description ')\n        self.assertEqual(ie._og_search_thumbnail(html), 'http://domain.com/pic.jpg?key1=val1&key2=val2')\n        self.assertEqual(ie._og_search_video_url(html, default=None), None)\n        self.assertEqual(ie._og_search_property('foobar', html), 'Foo')\n        self.assertEqual(ie._og_search_property('test1', html), 'foo > < bar')\n        self.assertEqual(ie._og_search_property('test2', html), 'foo >//< bar')\n        self.assertEqual(ie._og_search_property('test3', html), 'Ill-formatted opengraph')\n        self.assertEqual(ie._og_search_property(('test0', 'test1'), html), 'foo > < bar')\n        self.assertRaises(RegexNotFoundError, ie._og_search_property, 'test0', html, None, fatal=True)\n        self.assertRaises(RegexNotFoundError, ie._og_search_property, ('test0', 'test00'), html, None, fatal=True)\n        self.assertEqual(ie._og_search_property('test4', html), 'unquoted-value')\n\n    def test_html_search_meta(self):\n        ie = self.ie\n        html = '''\n            <meta name=\"a\" content=\"1\" />\n            <meta name='b' content='2'>\n            <meta name=\"c\" content='3'>\n            <meta name=d content='4'>\n            <meta property=\"e\" content='5' >\n            <meta content=\"6\" name=\"f\">\n        '''\n\n        self.assertEqual(ie._html_search_meta('a', html), '1')\n        self.assertEqual(ie._html_search_meta('b', html), '2')\n        self.assertEqual(ie._html_search_meta('c', html), '3')\n        self.assertEqual(ie._html_search_meta('d', html), '4')\n        self.assertEqual(ie._html_search_meta('e', html), '5')\n        self.assertEqual(ie._html_search_meta('f', html), '6')\n        self.assertEqual(ie._html_search_meta(('a', 'b', 'c'), html), '1')\n        self.assertEqual(ie._html_search_meta(('c', 'b', 'a'), html), '3')\n        self.assertEqual(ie._html_search_meta(('z', 'x', 'c'), html), '3')\n        self.assertRaises(RegexNotFoundError, ie._html_search_meta, 'z', html, None, fatal=True)\n        self.assertRaises(RegexNotFoundError, ie._html_search_meta, ('z', 'x'), html, None, fatal=True)\n\n    def test_search_nextjs_data(self):\n        html = '''\n<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\n  \"text/html; charset=utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>Test _search_nextjs_data()</title>\n</head>\n<body>\n  <div id=\"__next\">\n    <div style=\"background-color:#17171E\" class=\"FU\" dir=\"ltr\">\n      <div class=\"sc-93de261d-0 dyzzYE\">\n        <div>\n          <header class=\"HD\"></header>\n          <main class=\"MN\">\n            <div style=\"height:0\" class=\"HT0\">\n              <div style=\"width:NaN%\" data-testid=\n              \"stream-container\" class=\"WDN\"></div>\n            </div>\n          </main>\n        </div>\n        <footer class=\"sc-6e5faf91-0 dEGaHS\"></footer>\n      </div>\n    </div>\n  </div>\n  <script id=\"__NEXT_DATA__\" type=\"application/json\">\n  {\"props\":{\"pageProps\":{\"video\":{\"id\":\"testid\"}}}}\n  </script>\n</body>\n</html>\n'''\n        search = self.ie._search_nextjs_data(html, 'testID')\n        self.assertEqual(search['props']['pageProps']['video']['id'], 'testid')\n        search = self.ie._search_nextjs_data(\n            'no next.js data here, move along', 'testID', default={'status': 0})\n        self.assertEqual(search['status'], 0)\n\n    def test_search_nuxt_data(self):\n        html = '''\n<!DOCTYPE html>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\n  \"text/html; charset=utf-8\">\n  <title>Nuxt.js Test Page</title>\n  <meta name=\"viewport\" content=\n  \"width=device-width, initial-scale=1\">\n  <meta data-hid=\"robots\" name=\"robots\" content=\"all\">\n</head>\n<body class=\"BD\">\n  <div id=\"__layout\">\n    <h1 class=\"H1\">Example heading</h1>\n    <div class=\"IN\">\n      <p>Decoy text</p>\n    </div>\n  </div>\n  <script>\n  window.__NUXT__=(function(a,b,c,d,e,f,g,h){return {decoy:\" default\",data:[{track:{id:f,title:g}}]}}(null,null,\"c\",null,null,\"testid\",\"Nuxt.js title\",null));\n  </script>\n  <script src=\"/_nuxt/a12345b.js\" defer=\"defer\"></script>\n</body>\n</html>\n'''\n        search = self.ie._search_nuxt_data(html, 'testID')\n        self.assertEqual(search['track']['id'], 'testid')\n\n    def test_search_json_ld_realworld(self):\n        # https://github.com/ytdl-org/youtube-dl/issues/23306\n        expect_dict(\n            self,\n            self.ie._search_json_ld(r'''<script type=\"application/ld+json\">\n{\n\"@context\": \"http://schema.org/\",\n\"@type\": \"VideoObject\",\n\"name\": \"1 On 1 With Kleio\",\n\"url\": \"https://www.eporner.com/hd-porn/xN49A1cT3eB/1-On-1-With-Kleio/\",\n\"duration\": \"PT0H12M23S\",\n\"thumbnailUrl\": [\"https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg\", \"https://imggen.eporner.com/780814/1920/1080/9.jpg\"],\n\"contentUrl\": \"https://gvideo.eporner.com/xN49A1cT3eB/xN49A1cT3eB.mp4\",\n\"embedUrl\": \"https://www.eporner.com/embed/xN49A1cT3eB/1-On-1-With-Kleio/\",\n\"image\": \"https://static-eu-cdn.eporner.com/thumbs/static4/7/78/780/780814/9_360.jpg\",\n\"width\": \"1920\",\n\"height\": \"1080\",\n\"encodingFormat\": \"mp4\",\n\"bitrate\": \"6617kbps\",\n\"isFamilyFriendly\": \"False\",\n\"description\": \"Kleio Valentien\",\n\"uploadDate\": \"2015-12-05T21:24:35+01:00\",\n\"interactionStatistic\": {\n\"@type\": \"InteractionCounter\",\n\"interactionType\": { \"@type\": \"http://schema.org/WatchAction\" },\n\"userInteractionCount\": 1120958\n}, \"aggregateRating\": {\n\"@type\": \"AggregateRating\",\n\"ratingValue\": \"88\",\n\"ratingCount\": \"630\",\n\"bestRating\": \"100\",\n\"worstRating\": \"0\"\n}, \"actor\": [{\n\"@type\": \"Person\",\n\"name\": \"Kleio Valentien\",\n\"url\": \"https://www.eporner.com/pornstar/kleio-valentien/\"\n}]}\n</script>''', None),\n            {\n                'title': '1 On 1 With Kleio',\n                'description': 'Kleio Valentien',\n                'url': 'https://gvideo.eporner.com/xN49A1cT3eB/xN49A1cT3eB.mp4',\n                'timestamp': 1449347075,\n                'duration': 743.0,\n                'view_count': 1120958,\n                'width': 1920,\n                'height': 1080,\n            })\n\n    def test_download_json(self):\n        uri = encode_data_uri(b'{\"foo\": \"blah\"}', 'application/json')\n        self.assertEqual(self.ie._download_json(uri, None), {'foo': 'blah'})\n        uri = encode_data_uri(b'callback({\"foo\": \"blah\"})', 'application/javascript')\n        self.assertEqual(self.ie._download_json(uri, None, transform_source=strip_jsonp), {'foo': 'blah'})\n        uri = encode_data_uri(b'{\"foo\": invalid}', 'application/json')\n        self.assertRaises(ExtractorError, self.ie._download_json, uri, None)\n        self.assertEqual(self.ie._download_json(uri, None, fatal=False), None)\n\n    def test_parse_html5_media_entries(self):\n        # inline video tag\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://127.0.0.1/video.html',\n                r'<html><video src=\"/vid.mp4\" /></html>', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://127.0.0.1/vid.mp4',\n                }],\n            })\n\n        # from https://www.r18.com/\n        # with kpbs in label\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.r18.com/',\n                r'''\n                <video id=\"samplevideo_amateur\" class=\"js-samplevideo video-js vjs-default-skin vjs-big-play-centered\" controls preload=\"auto\" width=\"400\" height=\"225\" poster=\"//pics.r18.com/digital/amateur/mgmr105/mgmr105jp.jpg\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_sm_w.mp4\" type=\"video/mp4\"  res=\"240\" label=\"300kbps\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dm_w.mp4\" type=\"video/mp4\"  res=\"480\" label=\"1000kbps\">\n                    <source id=\"video_source\" src=\"https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dmb_w.mp4\" type=\"video/mp4\"  res=\"740\" label=\"1500kbps\">\n                    <p>Your browser does not support the video tag.</p>\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_sm_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '300kbps',\n                    'height': 240,\n                    'tbr': 300,\n                }, {\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dm_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '1000kbps',\n                    'height': 480,\n                    'tbr': 1000,\n                }, {\n                    'url': 'https://awscc3001.r18.com/litevideo/freepv/m/mgm/mgmr105/mgmr105_dmb_w.mp4',\n                    'ext': 'mp4',\n                    'format_id': '1500kbps',\n                    'height': 740,\n                    'tbr': 1500,\n                }],\n                'thumbnail': '//pics.r18.com/digital/amateur/mgmr105/mgmr105jp.jpg'\n            })\n\n        # from https://www.csfd.cz/\n        # with width and height\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.csfd.cz/',\n                r'''\n                <video width=\"770\" height=\"328\" preload=\"none\" controls  poster=\"https://img.csfd.cz/files/images/film/video/preview/163/344/163344118_748d20.png?h360\" >\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327358_eac647.mp4\" type=\"video/mp4\" width=\"640\" height=\"360\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327360_3d2646.mp4\" type=\"video/mp4\" width=\"1280\" height=\"720\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327356_91f258.mp4\" type=\"video/mp4\" width=\"1920\" height=\"1080\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327359_962b4a.webm\" type=\"video/webm\" width=\"640\" height=\"360\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327361_6feee0.webm\" type=\"video/webm\" width=\"1280\" height=\"720\">\n                    <source src=\"https://video.csfd.cz/files/videos/157/750/157750813/163327357_8ab472.webm\" type=\"video/webm\" width=\"1920\" height=\"1080\">\n                    <track src=\"https://video.csfd.cz/files/subtitles/163/344/163344115_4c388b.srt\" type=\"text/x-srt\" kind=\"subtitles\" srclang=\"cs\" label=\"cs\">\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327358_eac647.mp4',\n                    'ext': 'mp4',\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327360_3d2646.mp4',\n                    'ext': 'mp4',\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327356_91f258.mp4',\n                    'ext': 'mp4',\n                    'width': 1920,\n                    'height': 1080,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327359_962b4a.webm',\n                    'ext': 'webm',\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327361_6feee0.webm',\n                    'ext': 'webm',\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'url': 'https://video.csfd.cz/files/videos/157/750/157750813/163327357_8ab472.webm',\n                    'ext': 'webm',\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                'subtitles': {\n                    'cs': [{'url': 'https://video.csfd.cz/files/subtitles/163/344/163344115_4c388b.srt'}]\n                },\n                'thumbnail': 'https://img.csfd.cz/files/images/film/video/preview/163/344/163344118_748d20.png?h360'\n            })\n\n        # from https://tamasha.com/v/Kkdjw\n        # with height in label\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://tamasha.com/v/Kkdjw',\n                r'''\n                <video crossorigin=\"anonymous\">\n                        <source src=\"https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4\" type=\"video/mp4\" label=\"AUTO\" res=\"0\"/>\n                                <source src=\"https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4\" type=\"video/mp4\"\n                                        label=\"240p\" res=\"240\"/>\n                                <source src=\"https://s-v2.tamasha.com/statics/videos_file/20/00/Kkdjw_200041c66f657fc967db464d156eafbc1ed9fe6f_n_144.mp4\" type=\"video/mp4\"\n                                        label=\"144p\" res=\"144\"/>\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4',\n                }, {\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/19/8f/Kkdjw_198feff8577d0057536e905cce1fb61438dd64e0_n_240.mp4',\n                    'ext': 'mp4',\n                    'format_id': '240p',\n                    'height': 240,\n                }, {\n                    'url': 'https://s-v2.tamasha.com/statics/videos_file/20/00/Kkdjw_200041c66f657fc967db464d156eafbc1ed9fe6f_n_144.mp4',\n                    'ext': 'mp4',\n                    'format_id': '144p',\n                    'height': 144,\n                }]\n            })\n\n        # from https://www.directvnow.com\n        # with data-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video id=\"vid1\" class=\"header--video-masked active\" muted playsinline>\n                    <source data-src=\"https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'ext': 'mp4',\n                    'url': 'https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4',\n                }]\n            })\n\n        # from https://www.directvnow.com\n        # with data-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video id=\"vid1\" class=\"header--video-masked active\" muted playsinline>\n                    <source data-src=\"https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://cdn.directv.com/content/dam/dtv/prod/website_directvnow-international/videos/DTVN_hdr_HBO_v3.mp4',\n                    'ext': 'mp4',\n                }]\n            })\n\n        # from https://www.klarna.com/uk/\n        # with data-video-src\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://www.directvnow.com',\n                r'''\n                <video loop autoplay muted class=\"responsive-video block-kl__video video-on-medium\">\n                    <source src=\"\" data-video-desktop data-video-src=\"https://www.klarna.com/uk/wp-content/uploads/sites/11/2019/01/KL062_Smooth3_0_DogWalking_5s_920x080_.mp4\" type=\"video/mp4\" />\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://www.klarna.com/uk/wp-content/uploads/sites/11/2019/01/KL062_Smooth3_0_DogWalking_5s_920x080_.mp4',\n                    'ext': 'mp4',\n                }],\n            })\n\n        # from https://0000.studio/\n        # with type attribute but without extension in URL\n        expect_dict(\n            self,\n            self.ie._parse_html5_media_entries(\n                'https://0000.studio',\n                r'''\n                <video src=\"https://d1ggyt9m8pwf3g.cloudfront.net/protected/ap-northeast-1:1864af40-28d5-492b-b739-b32314b1a527/archive/clip/838db6a7-8973-4cd6-840d-8517e4093c92\"\n                    controls=\"controls\" type=\"video/mp4\" preload=\"metadata\" autoplay=\"autoplay\" playsinline class=\"object-contain\">\n                </video>\n                ''', None)[0],\n            {\n                'formats': [{\n                    'url': 'https://d1ggyt9m8pwf3g.cloudfront.net/protected/ap-northeast-1:1864af40-28d5-492b-b739-b32314b1a527/archive/clip/838db6a7-8973-4cd6-840d-8517e4093c92',\n                    'ext': 'mp4',\n                }],\n            })\n\n    def test_extract_jwplayer_data_realworld(self):\n        # from http://www.suffolk.edu/sjc/\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n                <script type='text/javascript'>\n                    jwplayer('my-video').setup({\n                        file: 'rtmp://192.138.214.154/live/sjclive',\n                        fallback: 'true',\n                        width: '95%',\n                      aspectratio: '16:9',\n                      primary: 'flash',\n                      mediaid:'XEgvuql4'\n                    });\n                </script>\n                ''', None, require_title=False),\n            {\n                'id': 'XEgvuql4',\n                'formats': [{\n                    'url': 'rtmp://192.138.214.154/live/sjclive',\n                    'ext': 'flv'\n                }]\n            })\n\n        # from https://www.pornoxo.com/videos/7564/striptease-from-sexy-secretary/\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n<script type=\"text/javascript\">\n    jwplayer(\"mediaplayer\").setup({\n        'videoid': \"7564\",\n        'width': \"100%\",\n        'aspectratio': \"16:9\",\n        'stretching': \"exactfit\",\n        'autostart': 'false',\n        'flashplayer': \"https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf\",\n        'file': \"https://cdn.pornoxo.com/key=MF+oEbaxqTKb50P-w9G3nA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/4b2157147afe5efa93ce1978e0265289c193874e02597.flv\",\n        'image': \"https://t03.vipstreamservice.com/thumbs/pxo-full/2009-12/14/a4b2157147afe5efa93ce1978e0265289c193874e02597.flv-full-13.jpg\",\n        'filefallback': \"https://cdn.pornoxo.com/key=9ZPsTR5EvPLQrBaak2MUGA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/m_4b2157147afe5efa93ce1978e0265289c193874e02597.mp4\",\n        'logo.hide': true,\n        'skin': \"https://t04.vipstreamservice.com/jwplayer/skin/modieus-blk.zip\",\n        'plugins': \"https://t04.vipstreamservice.com/jwplayer/dock/dockableskinnableplugin.swf\",\n        'dockableskinnableplugin.piclink': \"/index.php?key=ajax-videothumbsn&vid=7564&data=2009-12--14--4b2157147afe5efa93ce1978e0265289c193874e02597.flv--17370\",\n        'controlbar': 'bottom',\n        'modes': [\n            {type: 'flash', src: 'https://t04.vipstreamservice.com/jwplayer/v5.10/player.swf'}\n        ],\n        'provider': 'http'\n    });\n    //noinspection JSAnnotator\n    invideo.setup({\n        adsUrl: \"/banner-iframe/?zoneId=32\",\n        adsUrl2: \"\",\n        autostart: false\n    });\n</script>\n            ''', 'dummy', require_title=False),\n            {\n                'thumbnail': 'https://t03.vipstreamservice.com/thumbs/pxo-full/2009-12/14/a4b2157147afe5efa93ce1978e0265289c193874e02597.flv-full-13.jpg',\n                'formats': [{\n                    'url': 'https://cdn.pornoxo.com/key=MF+oEbaxqTKb50P-w9G3nA,end=1489689259,ip=104.199.146.27/ip=104.199.146.27/speed=6573765/buffer=3.0/2009-12/4b2157147afe5efa93ce1978e0265289c193874e02597.flv',\n                    'ext': 'flv'\n                }]\n            })\n\n        # from http://www.indiedb.com/games/king-machine/videos\n        expect_dict(\n            self,\n            self.ie._extract_jwplayer_data(r'''\n<script>\njwplayer(\"mediaplayer\").setup({\"abouttext\":\"Visit Indie DB\",\"aboutlink\":\"http:\\/\\/www.indiedb.com\\/\",\"displaytitle\":false,\"autostart\":false,\"repeat\":false,\"title\":\"king machine trailer 1\",\"sharing\":{\"link\":\"http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1\",\"code\":\"<iframe width=\\\"560\\\" height=\\\"315\\\" src=\\\"http:\\/\\/www.indiedb.com\\/media\\/iframe\\/1522983\\\" frameborder=\\\"0\\\" allowfullscreen><\\/iframe><br><a href=\\\"http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1\\\">king machine trailer 1 - Indie DB<\\/a>\"},\"related\":{\"file\":\"http:\\/\\/rss.indiedb.com\\/media\\/recommended\\/1522983\\/feed\\/rss.xml\",\"dimensions\":\"160x120\",\"onclick\":\"link\"},\"sources\":[{\"file\":\"http:\\/\\/cdn.dbolical.com\\/cache\\/videos\\/games\\/1\\/50\\/49678\\/encode_mp4\\/king-machine-trailer.mp4\",\"label\":\"360p SD\",\"default\":\"true\"},{\"file\":\"http:\\/\\/cdn.dbolical.com\\/cache\\/videos\\/games\\/1\\/50\\/49678\\/encode720p_mp4\\/king-machine-trailer.mp4\",\"label\":\"720p HD\"}],\"image\":\"http:\\/\\/media.indiedb.com\\/cache\\/images\\/games\\/1\\/50\\/49678\\/thumb_620x2000\\/king-machine-trailer.mp4.jpg\",\"advertising\":{\"client\":\"vast\",\"tag\":\"http:\\/\\/ads.intergi.com\\/adrawdata\\/3.0\\/5205\\/4251742\\/0\\/1013\\/ADTECH;cors=yes;width=560;height=315;referring_url=http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1;content_url=http:\\/\\/www.indiedb.com\\/games\\/king-machine\\/videos\\/king-machine-trailer-1;media_id=1522983;title=king+machine+trailer+1;device=__DEVICE__;model=__MODEL__;os=Windows+OS;osversion=__OSVERSION__;ua=__UA__;ip=109.171.17.81;uniqueid=1522983;tags=__TAGS__;number=58cac25928151;time=1489683033\"},\"width\":620,\"height\":349}).once(\"play\", function(event) {\n            videoAnalytics(\"play\");\n}).once(\"complete\", function(event) {\n    videoAnalytics(\"completed\");\n});\n</script>\n                ''', 'dummy'),\n            {\n                'title': 'king machine trailer 1',\n                'thumbnail': 'http://media.indiedb.com/cache/images/games/1/50/49678/thumb_620x2000/king-machine-trailer.mp4.jpg',\n                'formats': [{\n                    'url': 'http://cdn.dbolical.com/cache/videos/games/1/50/49678/encode_mp4/king-machine-trailer.mp4',\n                    'height': 360,\n                    'ext': 'mp4'\n                }, {\n                    'url': 'http://cdn.dbolical.com/cache/videos/games/1/50/49678/encode720p_mp4/king-machine-trailer.mp4',\n                    'height': 720,\n                    'ext': 'mp4'\n                }]\n            })\n\n    def test_parse_m3u8_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/11507\n                # http://pluzz.francetv.fr/videos/le_ministere.html\n                'pluzz_francetv_11507',\n                'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                [{\n                    'url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/index_0_av.m3u8?null=0',\n                    'manifest_url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                    'ext': 'mp4',\n                    'format_id': '180',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.66.30',\n                    'tbr': 180,\n                    'width': 256,\n                    'height': 144,\n                }, {\n                    'url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/index_1_av.m3u8?null=0',\n                    'manifest_url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                    'ext': 'mp4',\n                    'format_id': '303',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.66.30',\n                    'tbr': 303,\n                    'width': 320,\n                    'height': 180,\n                }, {\n                    'url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/index_2_av.m3u8?null=0',\n                    'manifest_url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                    'ext': 'mp4',\n                    'format_id': '575',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.66.30',\n                    'tbr': 575,\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/index_3_av.m3u8?null=0',\n                    'manifest_url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                    'ext': 'mp4',\n                    'format_id': '831',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.77.30',\n                    'tbr': 831,\n                    'width': 704,\n                    'height': 396,\n                }, {\n                    'url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/index_4_av.m3u8?null=0',\n                    'manifest_url': 'http://replayftv-vh.akamaihd.net/i/streaming-adaptatif_france-dom-tom/2017/S16/J2/156589847-58f59130c1f52-,standard1,standard2,standard3,standard4,standard5,.mp4.csmil/master.m3u8?caption=2017%2F16%2F156589847-1492488987.m3u8%3Afra%3AFrancais&audiotrack=0%3Afra%3AFrancais',\n                    'ext': 'mp4',\n                    'protocol': 'm3u8',\n                    'format_id': '1467',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.77.30',\n                    'tbr': 1467,\n                    'width': 1024,\n                    'height': 576,\n                }]\n            ),\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/11995\n                # http://teamcoco.com/video/clueless-gamer-super-bowl-for-honor\n                'teamcoco_11995',\n                'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                [{\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-audio-160k_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': 'audio-0-Default',\n                    'protocol': 'm3u8',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-audio-64k_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': 'audio-1-Default',\n                    'protocol': 'm3u8',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-audio-64k_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '71',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.5',\n                    'vcodec': 'none',\n                    'tbr': 71,\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-400k_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '413',\n                    'protocol': 'm3u8',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001e',\n                    'tbr': 413,\n                    'width': 400,\n                    'height': 224,\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-400k_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '522',\n                    'protocol': 'm3u8',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001e',\n                    'tbr': 522,\n                    'width': 400,\n                    'height': 224,\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-1m_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '1205',\n                    'protocol': 'm3u8',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001e',\n                    'tbr': 1205,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/hls/CONAN_020217_Highlight_show-2m_v4.m3u8',\n                    'manifest_url': 'http://ak.storage-w.teamcococdn.com/cdn/2017-02/98599/ed8f/main.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '2374',\n                    'protocol': 'm3u8',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001f',\n                    'tbr': 2374,\n                    'width': 1024,\n                    'height': 576,\n                }]\n            ),\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/12211\n                # http://video.toggle.sg/en/series/whoopie-s-world/ep3/478601\n                'toggle_mobile_12211',\n                'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                [{\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/2/pv/1/flavorId/0_sa2ntrdg/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': 'audio-English',\n                    'protocol': 'm3u8',\n                    'language': 'eng',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/2/pv/1/flavorId/0_r7y0nitg/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': 'audio-Undefined',\n                    'protocol': 'm3u8',\n                    'language': 'und',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/2/pv/1/flavorId/0_qlk9hlzr/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '155',\n                    'protocol': 'm3u8',\n                    'tbr': 155.648,\n                    'width': 320,\n                    'height': 180,\n                }, {\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/2/pv/1/flavorId/0_oefackmi/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '502',\n                    'protocol': 'm3u8',\n                    'tbr': 502.784,\n                    'width': 480,\n                    'height': 270,\n                }, {\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/12/pv/1/flavorId/0_vyg9pj7k/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '827',\n                    'protocol': 'm3u8',\n                    'tbr': 827.392,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'http://k.toggle.sg/fhls/p/2082311/sp/208231100/serveFlavor/entryId/0_89q6e8ku/v/12/pv/1/flavorId/0_50n4psvx/name/a.mp4/index.m3u8',\n                    'manifest_url': 'http://cdnapi.kaltura.com/p/2082311/sp/208231100/playManifest/protocol/http/entryId/0_89q6e8ku/format/applehttp/tags/mobile_sd/f/a.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '1396',\n                    'protocol': 'm3u8',\n                    'tbr': 1396.736,\n                    'width': 854,\n                    'height': 480,\n                }]\n            ),\n            (\n                # http://www.twitch.tv/riotgames/v/6528877\n                'twitch_vod',\n                'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                [{\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/audio_only/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'Audio Only',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 182.725,\n                }, {\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/mobile/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'Mobile',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.42C00D',\n                    'tbr': 280.474,\n                    'width': 400,\n                    'height': 226,\n                }, {\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/low/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'Low',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.42C01E',\n                    'tbr': 628.347,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/medium/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'Medium',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.42C01E',\n                    'tbr': 893.387,\n                    'width': 852,\n                    'height': 480,\n                }, {\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/high/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'High',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.42C01F',\n                    'tbr': 1603.789,\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'url': 'https://vod.edgecast.hls.ttvnw.net/e5da31ab49_riotgames_15001215120_261543898/chunked/index-muted-HM49I092CC.m3u8',\n                    'manifest_url': 'https://usher.ttvnw.net/vod/6528877?allow_source=true&allow_audio_only=true&allow_spectre=true&player=twitchweb&nauth=%7B%22user_id%22%3Anull%2C%22vod_id%22%3A6528877%2C%22expires%22%3A1492887874%2C%22chansub%22%3A%7B%22restricted_bitrates%22%3A%5B%5D%7D%2C%22privileged%22%3Afalse%2C%22https_required%22%3Afalse%7D&nauthsig=3e29296a6824a0f48f9e731383f77a614fc79bee',\n                    'ext': 'mp4',\n                    'format_id': 'Source',\n                    'protocol': 'm3u8',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc1.100.31',\n                    'tbr': 3214.134,\n                    'width': 1280,\n                    'height': 720,\n                }]\n            ),\n            (\n                # http://www.vidio.com/watch/165683-dj_ambred-booyah-live-2015\n                # EXT-X-STREAM-INF tag with NAME attribute that is not defined\n                # in HLS specification\n                'vidio',\n                'https://www.vidio.com/videos/165683/playlist.m3u8',\n                [{\n                    'url': 'https://cdn1-a.production.vidio.static6.com/uploads/165683/dj_ambred-4383-b300.mp4.m3u8',\n                    'manifest_url': 'https://www.vidio.com/videos/165683/playlist.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '270p 3G',\n                    'protocol': 'm3u8',\n                    'tbr': 300,\n                    'width': 480,\n                    'height': 270,\n                }, {\n                    'url': 'https://cdn1-a.production.vidio.static6.com/uploads/165683/dj_ambred-4383-b600.mp4.m3u8',\n                    'manifest_url': 'https://www.vidio.com/videos/165683/playlist.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '360p SD',\n                    'protocol': 'm3u8',\n                    'tbr': 600,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'https://cdn1-a.production.vidio.static6.com/uploads/165683/dj_ambred-4383-b1200.mp4.m3u8',\n                    'manifest_url': 'https://www.vidio.com/videos/165683/playlist.m3u8',\n                    'ext': 'mp4',\n                    'format_id': '720p HD',\n                    'protocol': 'm3u8',\n                    'tbr': 1200,\n                    'width': 1280,\n                    'height': 720,\n                }]\n            ),\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/18923\n                # https://www.ted.com/talks/boris_hesser_a_grassroots_healthcare_revolution_in_africa\n                'ted_18923',\n                'http://hls.ted.com/talks/31241.m3u8',\n                [{\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/audio/600k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '600k-Audio',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/audio/600k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '68',\n                    'vcodec': 'none',\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/64k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '163',\n                    'acodec': 'none',\n                    'width': 320,\n                    'height': 180,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/180k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '481',\n                    'acodec': 'none',\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/320k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '769',\n                    'acodec': 'none',\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/450k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '984',\n                    'acodec': 'none',\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/600k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '1255',\n                    'acodec': 'none',\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/950k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '1693',\n                    'acodec': 'none',\n                    'width': 853,\n                    'height': 480,\n                }, {\n                    'url': 'http://hls.ted.com/videos/BorisHesser_2018S/video/1500k.m3u8?nobumpers=true&uniqueId=76011e2b',\n                    'format_id': '2462',\n                    'acodec': 'none',\n                    'width': 1280,\n                    'height': 720,\n                }]\n            ),\n        ]\n\n        for m3u8_file, m3u8_url, expected_formats in _TEST_CASES:\n            with open('./test/testdata/m3u8/%s.m3u8' % m3u8_file,\n                      mode='r', encoding='utf-8') as f:\n                formats = self.ie._parse_m3u8_formats(\n                    f.read(), m3u8_url, ext='mp4')\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n\n    def test_parse_mpd_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/13919\n                # Also tests duplicate representation ids, see\n                # https://github.com/ytdl-org/youtube-dl/issues/15111\n                'float_duration',\n                'http://unknown/manifest.mpd',  # mpd_url\n                None,  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'm4a',\n                    'format_id': '318597',\n                    'format_note': 'DASH audio',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 61.587,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '318597',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001f',\n                    'tbr': 318.597,\n                    'width': 340,\n                    'height': 192,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '638590',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.42001f',\n                    'tbr': 638.59,\n                    'width': 512,\n                    'height': 288,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '1022565',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001f',\n                    'tbr': 1022.565,\n                    'width': 688,\n                    'height': 384,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '2046506',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d001f',\n                    'tbr': 2046.506,\n                    'width': 1024,\n                    'height': 576,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '3998017',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.640029',\n                    'tbr': 3998.017,\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': '5997485',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.640032',\n                    'tbr': 5997.485,\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/pull/14844\n                'urls_only',\n                'http://unknown/manifest.mpd',  # mpd_url\n                None,  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_144p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 200,\n                    'width': 256,\n                    'height': 144,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_240p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 400,\n                    'width': 424,\n                    'height': 240,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_360p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 800,\n                    'width': 640,\n                    'height': 360,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_480p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 1200,\n                    'width': 856,\n                    'height': 480,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_576p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 1600,\n                    'width': 1024,\n                    'height': 576,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_720p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 2400,\n                    'width': 1280,\n                    'height': 720,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'h264_aac_1080p_m4s',\n                    'format_note': 'DASH video',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'avc3.42c01e',\n                    'tbr': 4400,\n                    'width': 1920,\n                    'height': 1080,\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/issues/20346\n                # Media considered unfragmented even though it contains\n                # Initialization tag\n                'unfragmented',\n                'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',  # mpd_url\n                'https://v.redd.it/hw1x7rcg7zl21',  # mpd_base_url\n                [{\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/audio',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'm4a',\n                    'format_id': 'AUDIO-1',\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 129.87,\n                    'asr': 48000,\n\n                }, {\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/DASH_240',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'VIDEO-2',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d401e',\n                    'tbr': 608.0,\n                    'width': 240,\n                    'height': 240,\n                    'fps': 30,\n                }, {\n                    'url': 'https://v.redd.it/hw1x7rcg7zl21/DASH_360',\n                    'manifest_url': 'https://v.redd.it/hw1x7rcg7zl21/DASHPlaylist.mpd',\n                    'ext': 'mp4',\n                    'format_id': 'VIDEO-1',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4d401e',\n                    'tbr': 804.261,\n                    'width': 360,\n                    'height': 360,\n                    'fps': 30,\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/issues/30235\n                # Bento4 generated test mpd\n                # mp4dash --mpd-name=manifest.mpd --no-split --use-segment-list mediafiles\n                'url_and_range',\n                'http://unknown/manifest.mpd',  # mpd_url\n                'http://unknown/',  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'fragment_base_url': 'http://unknown/',\n                    'ext': 'm4a',\n                    'format_id': 'audio-und-mp4a.40.2',\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 98.808,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'fragment_base_url': 'http://unknown/',\n                    'ext': 'mp4',\n                    'format_id': 'video-avc1',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4D401E',\n                    'tbr': 699.597,\n                    'width': 768,\n                    'height': 432\n                }],\n                {},\n            ), (\n                # https://github.com/ytdl-org/youtube-dl/issues/27575\n                # GPAC generated test mpd\n                # MP4Box -dash 10000 -single-file -out manifest.mpd mediafiles\n                'range_only',\n                'http://unknown/manifest.mpd',  # mpd_url\n                'http://unknown/',  # mpd_base_url\n                [{\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'fragment_base_url': 'http://unknown/audio_dashinit.mp4',\n                    'ext': 'm4a',\n                    'format_id': '2',\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'mp4a.40.2',\n                    'vcodec': 'none',\n                    'tbr': 98.096,\n                }, {\n                    'manifest_url': 'http://unknown/manifest.mpd',\n                    'fragment_base_url': 'http://unknown/video_dashinit.mp4',\n                    'ext': 'mp4',\n                    'format_id': '1',\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'protocol': 'http_dash_segments',\n                    'acodec': 'none',\n                    'vcodec': 'avc1.4D401E',\n                    'tbr': 526.987,\n                    'width': 768,\n                    'height': 432\n                }],\n                {},\n            ), (\n                'subtitles',\n                'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/',\n                [{\n                    'format_id': 'audio=128001',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'm4a',\n                    'tbr': 128.001,\n                    'asr': 48000,\n                    'format_note': 'DASH audio',\n                    'container': 'm4a_dash',\n                    'vcodec': 'none',\n                    'acodec': 'mp4a.40.2',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }, {\n                    'format_id': 'video=100000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 336,\n                    'height': 144,\n                    'tbr': 100,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }, {\n                    'format_id': 'video=326000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 562,\n                    'height': 240,\n                    'tbr': 326,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }, {\n                    'format_id': 'video=698000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 844,\n                    'height': 360,\n                    'tbr': 698,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }, {\n                    'format_id': 'video=1493000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 1126,\n                    'height': 480,\n                    'tbr': 1493,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }, {\n                    'format_id': 'video=4482000',\n                    'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'ext': 'mp4',\n                    'width': 1688,\n                    'height': 720,\n                    'tbr': 4482,\n                    'format_note': 'DASH video',\n                    'container': 'mp4_dash',\n                    'vcodec': 'avc1.4D401F',\n                    'acodec': 'none',\n                    'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                    'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                    'protocol': 'http_dash_segments',\n                }],\n                {\n                    'en': [\n                        {\n                            'ext': 'mp4',\n                            'manifest_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                            'url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/manifest.mpd',\n                            'fragment_base_url': 'https://sdn-global-streaming-cache-3qsdn.akamaized.net/stream/3144/files/17/07/672975/3144-kZT4LWMQw6Rh7Kpd.ism/dash/',\n                            'protocol': 'http_dash_segments',\n                        }\n                    ]\n                },\n            )\n        ]\n\n        for mpd_file, mpd_url, mpd_base_url, expected_formats, expected_subtitles in _TEST_CASES:\n            with open('./test/testdata/mpd/%s.mpd' % mpd_file,\n                      mode='r', encoding='utf-8') as f:\n                formats, subtitles = self.ie._parse_mpd_formats_and_subtitles(\n                    compat_etree_fromstring(f.read().encode('utf-8')),\n                    mpd_base_url=mpd_base_url, mpd_url=mpd_url)\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n                expect_value(self, subtitles, expected_subtitles, None)\n\n    def test_parse_f4m_formats(self):\n        _TEST_CASES = [\n            (\n                # https://github.com/ytdl-org/youtube-dl/issues/14660\n                'custom_base_url',\n                'http://api.new.livestream.com/accounts/6115179/events/6764928/videos/144884262.f4m',\n                [{\n                    'manifest_url': 'http://api.new.livestream.com/accounts/6115179/events/6764928/videos/144884262.f4m',\n                    'ext': 'flv',\n                    'format_id': '2148',\n                    'protocol': 'f4m',\n                    'tbr': 2148,\n                    'width': 1280,\n                    'height': 720,\n                }]\n            ),\n        ]\n\n        for f4m_file, f4m_url, expected_formats in _TEST_CASES:\n            with open('./test/testdata/f4m/%s.f4m' % f4m_file,\n                      mode='r', encoding='utf-8') as f:\n                formats = self.ie._parse_f4m_formats(\n                    compat_etree_fromstring(f.read().encode('utf-8')),\n                    f4m_url, None)\n                self.ie._sort_formats(formats)\n                expect_value(self, formats, expected_formats, None)\n\n    def test_parse_xspf(self):\n        _TEST_CASES = [\n            (\n                'foo_xspf',\n                'https://example.org/src/foo_xspf.xspf',\n                [{\n                    'id': 'foo_xspf',\n                    'title': 'Pandemonium',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 202.416,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/src/cd1/track%201.mp3',\n                    }],\n                }, {\n                    'id': 'foo_xspf',\n                    'title': 'Final Cartridge (Nichico Twelve Remix)',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 255.857,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/%E3%83%88%E3%83%A9%E3%83%83%E3%82%AF%E3%80%80%EF%BC%92.mp3',\n                    }],\n                }, {\n                    'id': 'foo_xspf',\n                    'title': 'Rebuilding Nightingale',\n                    'description': 'Visit http://bigbrother404.bandcamp.com',\n                    'duration': 287.915,\n                    'formats': [{\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.org/src/track3.mp3',\n                    }, {\n                        'manifest_url': 'https://example.org/src/foo_xspf.xspf',\n                        'url': 'https://example.com/track3.mp3',\n                    }]\n                }]\n            ),\n        ]\n\n        for xspf_file, xspf_url, expected_entries in _TEST_CASES:\n            with open('./test/testdata/xspf/%s.xspf' % xspf_file,\n                      mode='r', encoding='utf-8') as f:\n                entries = self.ie._parse_xspf(\n                    compat_etree_fromstring(f.read().encode('utf-8')),\n                    xspf_file, xspf_url=xspf_url, xspf_base_url=xspf_url)\n                expect_value(self, entries, expected_entries, None)\n                for i in range(len(entries)):\n                    expect_dict(self, entries[i], expected_entries[i])\n\n    def test_response_with_expected_status_returns_content(self):\n        # Checks for mitigations against the effects of\n        # <https://bugs.python.org/issue15002> that affect Python 3.4.1+, which\n        # manifest as `_download_webpage`, `_download_xml`, `_download_json`,\n        # or the underlying `_download_webpage_handle` returning no content\n        # when a response matches `expected_status`.\n\n        httpd = compat_http_server.HTTPServer(\n            ('127.0.0.1', 0), InfoExtractorTestRequestHandler)\n        port = http_server_port(httpd)\n        server_thread = threading.Thread(target=httpd.serve_forever)\n        server_thread.daemon = True\n        server_thread.start()\n\n        (content, urlh) = self.ie._download_webpage_handle(\n            'http://127.0.0.1:%d/teapot' % port, None,\n            expected_status=TEAPOT_RESPONSE_STATUS)\n        self.assertEqual(content, TEAPOT_RESPONSE_BODY)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_YoutubeDL.py": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport copy\nimport json\n\nfrom test.helper import (\n    FakeYDL,\n    assertRegexpMatches,\n    try_rm,\n)\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.compat import (\n    compat_http_cookiejar_Cookie,\n    compat_http_cookies_SimpleCookie,\n    compat_kwargs,\n    compat_open as open,\n    compat_str,\n    compat_urllib_error,\n)\n\nfrom youtube_dl.extractor import YoutubeIE\nfrom youtube_dl.extractor.common import InfoExtractor\nfrom youtube_dl.postprocessor.common import PostProcessor\nfrom youtube_dl.utils import (\n    ExtractorError,\n    match_filter_func,\n    traverse_obj,\n)\n\nTEST_URL = 'http://localhost/sample.mp4'\n\n\nclass YDL(FakeYDL):\n    def __init__(self, *args, **kwargs):\n        super(YDL, self).__init__(*args, **kwargs)\n        self.downloaded_info_dicts = []\n        self.msgs = []\n\n    def process_info(self, info_dict):\n        self.downloaded_info_dicts.append(info_dict.copy())\n\n    def to_screen(self, msg):\n        self.msgs.append(msg)\n\n    def dl(self, *args, **kwargs):\n        assert False, 'Downloader must not be invoked for test_YoutubeDL'\n\n\ndef _make_result(formats, **kwargs):\n    res = {\n        'formats': formats,\n        'id': 'testid',\n        'title': 'testttitle',\n        'extractor': 'testex',\n        'extractor_key': 'TestEx',\n        'webpage_url': 'http://example.com/watch?v=shenanigans',\n    }\n    res.update(**compat_kwargs(kwargs))\n    return res\n\n\nclass TestFormatSelection(unittest.TestCase):\n    def test_prefer_free_formats(self):\n        # Same resolution => download webm\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = True\n        formats = [\n            {'ext': 'webm', 'height': 460, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 460, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'webm')\n\n        # Different resolution => download best quality (mp4)\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = True\n        formats = [\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 1080, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        # No prefer_free_formats => prefer mp4 and flv for greater compatibility\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = False\n        formats = [\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n            {'ext': 'mp4', 'height': 720, 'url': TEST_URL},\n            {'ext': 'flv', 'height': 720, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        ydl = YDL()\n        ydl.params['prefer_free_formats'] = False\n        formats = [\n            {'ext': 'flv', 'height': 720, 'url': TEST_URL},\n            {'ext': 'webm', 'height': 720, 'url': TEST_URL},\n        ]\n        info_dict['formats'] = formats\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['ext'], 'flv')\n\n    def test_format_selection(self):\n        formats = [\n            {'format_id': '35', 'ext': 'mp4', 'preference': 1, 'url': TEST_URL},\n            {'format_id': 'example-with-dashes', 'ext': 'webm', 'preference': 1, 'url': TEST_URL},\n            {'format_id': '45', 'ext': 'webm', 'preference': 2, 'url': TEST_URL},\n            {'format_id': '47', 'ext': 'webm', 'preference': 3, 'url': TEST_URL},\n            {'format_id': '2', 'ext': 'flv', 'preference': 4, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': '20/47'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '47')\n\n        ydl = YDL({'format': '20/71/worst'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '35')\n\n        ydl = YDL()\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '2')\n\n        ydl = YDL({'format': 'webm/mp4'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '47')\n\n        ydl = YDL({'format': '3gp/40/mp4'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '35')\n\n        ydl = YDL({'format': 'example-with-dashes'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'example-with-dashes')\n\n    def test_format_selection_audio(self):\n        formats = [\n            {'format_id': 'audio-low', 'ext': 'webm', 'preference': 1, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio-mid', 'ext': 'webm', 'preference': 2, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio-high', 'ext': 'flv', 'preference': 3, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vid', 'ext': 'mp4', 'preference': 4, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'audio-high')\n\n        ydl = YDL({'format': 'worstaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'audio-low')\n\n        formats = [\n            {'format_id': 'vid-low', 'ext': 'mp4', 'preference': 1, 'url': TEST_URL},\n            {'format_id': 'vid-high', 'ext': 'mp4', 'preference': 2, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestaudio/worstaudio/best'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vid-high')\n\n    def test_format_selection_audio_exts(self):\n        formats = [\n            {'format_id': 'mp3-64', 'ext': 'mp3', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'ogg-64', 'ext': 'ogg', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'aac-64', 'ext': 'aac', 'abr': 64, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'mp3-32', 'ext': 'mp3', 'abr': 32, 'url': 'http://_', 'vcodec': 'none'},\n            {'format_id': 'aac-32', 'ext': 'aac', 'abr': 32, 'url': 'http://_', 'vcodec': 'none'},\n        ]\n\n        info_dict = _make_result(formats)\n        ydl = YDL({'format': 'best'})\n        ie = YoutubeIE(ydl)\n        ie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'aac-64')\n\n        ydl = YDL({'format': 'mp3'})\n        ie = YoutubeIE(ydl)\n        ie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'mp3-64')\n\n        ydl = YDL({'prefer_free_formats': True})\n        ie = YoutubeIE(ydl)\n        ie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(copy.deepcopy(info_dict))\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'ogg-64')\n\n    def test_format_selection_video(self):\n        formats = [\n            {'format_id': 'dash-video-low', 'ext': 'mp4', 'preference': 1, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'dash-video-high', 'ext': 'mp4', 'preference': 2, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'vid', 'ext': 'mp4', 'preference': 3, 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestvideo'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-high')\n\n        ydl = YDL({'format': 'worstvideo'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-low')\n\n        ydl = YDL({'format': 'bestvideo[format_id^=dash][format_id$=low]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'dash-video-low')\n\n        formats = [\n            {'format_id': 'vid-vcodec-dot', 'ext': 'mp4', 'preference': 1, 'vcodec': 'avc1.123456', 'acodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'bestvideo[vcodec=avc1.123456]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'vid-vcodec-dot')\n\n    def test_format_selection_string_ops(self):\n        formats = [\n            {'format_id': 'abc-cba', 'ext': 'mp4', 'url': TEST_URL},\n            {'format_id': 'zxc-cxz', 'ext': 'webm', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # equals (=)\n        ydl = YDL({'format': '[format_id=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not equal (!=)\n        ydl = YDL({'format': '[format_id!=abc-cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!=abc-cba][format_id!=zxc-cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # starts with (^=)\n        ydl = YDL({'format': '[format_id^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not start with (!^=)\n        ydl = YDL({'format': '[format_id!^=abc]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!^=abc][format_id!^=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # ends with ($=)\n        ydl = YDL({'format': '[format_id$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not end with (!$=)\n        ydl = YDL({'format': '[format_id!$=cba]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!$=cba][format_id!$=cxz]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        # contains (*=)\n        ydl = YDL({'format': '[format_id*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'abc-cba')\n\n        # does not contain (!*=)\n        ydl = YDL({'format': '[format_id!*=bc-cb]'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'zxc-cxz')\n\n        ydl = YDL({'format': '[format_id!*=abc][format_id!*=zxc]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n        ydl = YDL({'format': '[format_id!*=-]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n    def test_youtube_format_selection(self):\n        order = [\n            '38', '37', '46', '22', '45', '35', '44', '18', '34', '43', '6', '5', '17', '36', '13',\n            # Apple HTTP Live Streaming\n            '96', '95', '94', '93', '92', '132', '151',\n            # 3D\n            '85', '84', '102', '83', '101', '82', '100',\n            # Dash video\n            '137', '248', '136', '247', '135', '246',\n            '245', '244', '134', '243', '133', '242', '160',\n            # Dash audio\n            '141', '172', '140', '171', '139',\n        ]\n\n        def format_info(f_id):\n            info = YoutubeIE._formats[f_id].copy()\n\n            # XXX: In real cases InfoExtractor._parse_mpd_formats() fills up 'acodec'\n            # and 'vcodec', while in tests such information is incomplete since\n            # commit a6c2c24479e5f4827ceb06f64d855329c0a6f593\n            # test_YoutubeDL.test_youtube_format_selection is broken without\n            # this fix\n            if 'acodec' in info and 'vcodec' not in info:\n                info['vcodec'] = 'none'\n            elif 'vcodec' in info and 'acodec' not in info:\n                info['acodec'] = 'none'\n\n            info['format_id'] = f_id\n            info['url'] = 'url:' + f_id\n            return info\n        formats_order = [format_info(f_id) for f_id in order]\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '137+141')\n        self.assertEqual(downloaded['ext'], 'mp4')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo[height>=999999]+bestaudio/best'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], '38')\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': 'bestvideo/best,bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['137', '141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['137+141', '248+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=mp4],bestvideo[ext=webm])[height<=720]+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['136+141', '247+141'])\n\n        info_dict = _make_result(list(formats_order), extractor='youtube')\n        ydl = YDL({'format': '(bestvideo[ext=none]/bestvideo[ext=webm])+bestaudio'})\n        yie = YoutubeIE(ydl)\n        yie._sort_formats(info_dict['formats'])\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['248+141'])\n\n        for f1, f2 in zip(formats_order, formats_order[1:]):\n            info_dict = _make_result([f1, f2], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            yie = YoutubeIE(ydl)\n            yie._sort_formats(info_dict['formats'])\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])\n\n            info_dict = _make_result([f2, f1], extractor='youtube')\n            ydl = YDL({'format': 'best/bestvideo'})\n            yie = YoutubeIE(ydl)\n            yie._sort_formats(info_dict['formats'])\n            ydl.process_ie_result(info_dict)\n            downloaded = ydl.downloaded_info_dicts[0]\n            self.assertEqual(downloaded['format_id'], f1['format_id'])\n\n    def test_audio_only_extractor_format_selection(self):\n        # For extractors with incomplete formats (all formats are audio-only or\n        # video-only) best and worst should fallback to corresponding best/worst\n        # video-only or audio-only formats (as per\n        # https://github.com/ytdl-org/youtube-dl/pull/5556)\n        formats = [\n            {'format_id': 'low', 'ext': 'mp3', 'preference': 1, 'vcodec': 'none', 'url': TEST_URL},\n            {'format_id': 'high', 'ext': 'mp3', 'preference': 2, 'vcodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'best'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'high')\n\n        ydl = YDL({'format': 'worst'})\n        ydl.process_ie_result(info_dict.copy())\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'low')\n\n    def test_format_not_available(self):\n        formats = [\n            {'format_id': 'regular', 'ext': 'mp4', 'height': 360, 'url': TEST_URL},\n            {'format_id': 'video', 'ext': 'mp4', 'height': 720, 'acodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        # This must fail since complete video-audio format does not match filter\n        # and extractor does not provide incomplete only formats (i.e. only\n        # video-only or audio-only).\n        ydl = YDL({'format': 'best[height>360]'})\n        self.assertRaises(ExtractorError, ydl.process_ie_result, info_dict.copy())\n\n    def test_format_selection_issue_10083(self):\n        # See https://github.com/ytdl-org/youtube-dl/issues/10083\n        formats = [\n            {'format_id': 'regular', 'height': 360, 'url': TEST_URL},\n            {'format_id': 'video', 'height': 720, 'acodec': 'none', 'url': TEST_URL},\n            {'format_id': 'audio', 'vcodec': 'none', 'url': TEST_URL},\n        ]\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'best[height>360]/bestvideo[height>360]+bestaudio'})\n        ydl.process_ie_result(info_dict.copy())\n        self.assertEqual(ydl.downloaded_info_dicts[0]['format_id'], 'video+audio')\n\n    def test_invalid_format_specs(self):\n        def assert_syntax_error(format_spec):\n            ydl = YDL({'format': format_spec})\n            info_dict = _make_result([{'format_id': 'foo', 'url': TEST_URL}])\n            self.assertRaises(SyntaxError, ydl.process_ie_result, info_dict)\n\n        assert_syntax_error('bestvideo,,best')\n        assert_syntax_error('+bestaudio')\n        assert_syntax_error('bestvideo+')\n        assert_syntax_error('/')\n        assert_syntax_error('bestvideo+bestvideo+bestaudio')\n\n    def test_format_filtering(self):\n        formats = [\n            {'format_id': 'A', 'filesize': 500, 'width': 1000},\n            {'format_id': 'B', 'filesize': 1000, 'width': 500},\n            {'format_id': 'C', 'filesize': 1000, 'width': 400},\n            {'format_id': 'D', 'filesize': 2000, 'width': 600},\n            {'format_id': 'E', 'filesize': 3000},\n            {'format_id': 'F'},\n            {'format_id': 'G', 'filesize': 1000000},\n        ]\n        for f in formats:\n            f['url'] = 'http://_/'\n            f['ext'] = 'unknown'\n        info_dict = _make_result(formats)\n\n        ydl = YDL({'format': 'best[filesize<3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'D')\n\n        ydl = YDL({'format': 'best[filesize<=3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'E')\n\n        ydl = YDL({'format': 'best[filesize <= ? 3000]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'F')\n\n        ydl = YDL({'format': 'best [filesize = 1000] [width>450]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'B')\n\n        ydl = YDL({'format': 'best [filesize = 1000] [width!=450]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'C')\n\n        ydl = YDL({'format': '[filesize>?1]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'G')\n\n        ydl = YDL({'format': '[filesize<1M]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'E')\n\n        ydl = YDL({'format': '[filesize<1MiB]'})\n        ydl.process_ie_result(info_dict)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['format_id'], 'G')\n\n        ydl = YDL({'format': 'all[width>=400][width<=600]'})\n        ydl.process_ie_result(info_dict)\n        downloaded_ids = [info['format_id'] for info in ydl.downloaded_info_dicts]\n        self.assertEqual(downloaded_ids, ['B', 'C', 'D'])\n\n        ydl = YDL({'format': 'best[height<40]'})\n        try:\n            ydl.process_ie_result(info_dict)\n        except ExtractorError:\n            pass\n        self.assertEqual(ydl.downloaded_info_dicts, [])\n\n    def test_default_format_spec(self):\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({}), 'bestvideo+bestaudio/best')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({'simulate': True})\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'bestvideo+bestaudio/best')\n\n        ydl = YDL({'outtmpl': '-'})\n        self.assertEqual(ydl._default_format_spec({}), 'best/bestvideo+bestaudio')\n\n        ydl = YDL({})\n        self.assertEqual(ydl._default_format_spec({}, download=False), 'bestvideo+bestaudio/best')\n        self.assertEqual(ydl._default_format_spec({'is_live': True}), 'best/bestvideo+bestaudio')\n\n\nclass TestYoutubeDL(unittest.TestCase):\n    def test_subtitles(self):\n        def s_formats(lang, autocaption=False):\n            return [{\n                'ext': ext,\n                'url': 'http://localhost/video.%s.%s' % (lang, ext),\n                '_auto': autocaption,\n            } for ext in ['vtt', 'srt', 'ass']]\n        subtitles = dict((l, s_formats(l)) for l in ['en', 'fr', 'es'])\n        auto_captions = dict((l, s_formats(l, True)) for l in ['it', 'pt', 'es'])\n        info_dict = {\n            'id': 'test',\n            'title': 'Test',\n            'url': 'http://localhost/video.mp4',\n            'subtitles': subtitles,\n            'automatic_captions': auto_captions,\n            'extractor': 'TEST',\n        }\n\n        def get_info(params={}):\n            params.setdefault('simulate', True)\n            ydl = YDL(params)\n            ydl.report_warning = lambda *args, **kargs: None\n            return ydl.process_video_result(info_dict, download=False)\n\n        result = get_info()\n        self.assertFalse(result.get('requested_subtitles'))\n        self.assertEqual(result['subtitles'], subtitles)\n        self.assertEqual(result['automatic_captions'], auto_captions)\n\n        result = get_info({'writesubtitles': True})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), set(['en']))\n        self.assertTrue(subs['en'].get('data') is None)\n        self.assertEqual(subs['en']['ext'], 'ass')\n\n        result = get_info({'writesubtitles': True, 'subtitlesformat': 'foo/srt'})\n        subs = result['requested_subtitles']\n        self.assertEqual(subs['en']['ext'], 'srt')\n\n        result = get_info({'writesubtitles': True, 'subtitleslangs': ['es', 'fr', 'it']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), set(['es', 'fr']))\n\n        result = get_info({'writesubtitles': True, 'writeautomaticsub': True, 'subtitleslangs': ['es', 'pt']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), set(['es', 'pt']))\n        self.assertFalse(subs['es']['_auto'])\n        self.assertTrue(subs['pt']['_auto'])\n\n        result = get_info({'writeautomaticsub': True, 'subtitleslangs': ['es', 'pt']})\n        subs = result['requested_subtitles']\n        self.assertTrue(subs)\n        self.assertEqual(set(subs.keys()), set(['es', 'pt']))\n        self.assertTrue(subs['es']['_auto'])\n        self.assertTrue(subs['pt']['_auto'])\n\n    def test_add_extra_info(self):\n        test_dict = {\n            'extractor': 'Foo',\n        }\n        extra_info = {\n            'extractor': 'Bar',\n            'playlist': 'funny videos',\n        }\n        YDL.add_extra_info(test_dict, extra_info)\n        self.assertEqual(test_dict['extractor'], 'Foo')\n        self.assertEqual(test_dict['playlist'], 'funny videos')\n\n    def test_prepare_filename(self):\n        info = {\n            'id': '1234',\n            'ext': 'mp4',\n            'width': None,\n            'height': 1080,\n            'title1': '$PATH',\n            'title2': '%PATH%',\n        }\n\n        def fname(templ, na_placeholder='NA'):\n            params = {'outtmpl': templ}\n            if na_placeholder != 'NA':\n                params['outtmpl_na_placeholder'] = na_placeholder\n            ydl = YoutubeDL(params)\n            return ydl.prepare_filename(info)\n        self.assertEqual(fname('%(id)s.%(ext)s'), '1234.mp4')\n        self.assertEqual(fname('%(id)s-%(width)s.%(ext)s'), '1234-NA.mp4')\n        NA_TEST_OUTTMPL = '%(uploader_date)s-%(width)d-%(id)s.%(ext)s'\n        # Replace missing fields with 'NA' by default\n        self.assertEqual(fname(NA_TEST_OUTTMPL), 'NA-NA-1234.mp4')\n        # Or by provided placeholder\n        self.assertEqual(fname(NA_TEST_OUTTMPL, na_placeholder='none'), 'none-none-1234.mp4')\n        self.assertEqual(fname(NA_TEST_OUTTMPL, na_placeholder=''), '--1234.mp4')\n        self.assertEqual(fname('%(height)d.%(ext)s'), '1080.mp4')\n        self.assertEqual(fname('%(height)6d.%(ext)s'), '  1080.mp4')\n        self.assertEqual(fname('%(height)-6d.%(ext)s'), '1080  .mp4')\n        self.assertEqual(fname('%(height)06d.%(ext)s'), '001080.mp4')\n        self.assertEqual(fname('%(height) 06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   06d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0 6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%(height)   0   6d.%(ext)s'), ' 01080.mp4')\n        self.assertEqual(fname('%%'), '%')\n        self.assertEqual(fname('%%%%'), '%%')\n        self.assertEqual(fname('%%(height)06d.%(ext)s'), '%(height)06d.mp4')\n        self.assertEqual(fname('%(width)06d.%(ext)s'), 'NA.mp4')\n        self.assertEqual(fname('%(width)06d.%%(ext)s'), 'NA.%(ext)s')\n        self.assertEqual(fname('%%(width)06d.%(ext)s'), '%(width)06d.mp4')\n        self.assertEqual(fname('Hello %(title1)s'), 'Hello $PATH')\n        self.assertEqual(fname('Hello %(title2)s'), 'Hello %PATH%')\n\n    def test_format_note(self):\n        ydl = YoutubeDL()\n        self.assertEqual(ydl._format_note({}), '')\n        assertRegexpMatches(self, ydl._format_note({\n            'vbr': 10,\n        }), r'^\\s*10k$')\n        assertRegexpMatches(self, ydl._format_note({\n            'fps': 30,\n        }), r'^30fps$')\n\n    def test_postprocessors(self):\n        filename = 'post-processor-testfile.mp4'\n        audiofile = filename + '.mp3'\n\n        class SimplePP(PostProcessor):\n            def run(self, info):\n                with open(audiofile, 'w') as f:\n                    f.write('EXAMPLE')\n                return [info['filepath']], info\n\n        def run_pp(params, PP):\n            with open(filename, 'w') as f:\n                f.write('EXAMPLE')\n            ydl = YoutubeDL(params)\n            ydl.add_post_processor(PP())\n            ydl.post_process(filename, {'filepath': filename})\n\n        run_pp({'keepvideo': True}, SimplePP)\n        self.assertTrue(os.path.exists(filename), '%s doesn\\'t exist' % filename)\n        self.assertTrue(os.path.exists(audiofile), '%s doesn\\'t exist' % audiofile)\n        os.unlink(filename)\n        os.unlink(audiofile)\n\n        run_pp({'keepvideo': False}, SimplePP)\n        self.assertFalse(os.path.exists(filename), '%s exists' % filename)\n        self.assertTrue(os.path.exists(audiofile), '%s doesn\\'t exist' % audiofile)\n        os.unlink(audiofile)\n\n        class ModifierPP(PostProcessor):\n            def run(self, info):\n                with open(info['filepath'], 'w') as f:\n                    f.write('MODIFIED')\n                return [], info\n\n        run_pp({'keepvideo': False}, ModifierPP)\n        self.assertTrue(os.path.exists(filename), '%s doesn\\'t exist' % filename)\n        os.unlink(filename)\n\n    def test_match_filter(self):\n        class FilterYDL(YDL):\n            def __init__(self, *args, **kwargs):\n                super(FilterYDL, self).__init__(*args, **kwargs)\n                self.params['simulate'] = True\n\n            def process_info(self, info_dict):\n                super(YDL, self).process_info(info_dict)\n\n            def _match_entry(self, info_dict, incomplete):\n                res = super(FilterYDL, self)._match_entry(info_dict, incomplete)\n                if res is None:\n                    self.downloaded_info_dicts.append(info_dict)\n                return res\n\n        first = {\n            'id': '1',\n            'url': TEST_URL,\n            'title': 'one',\n            'extractor': 'TEST',\n            'duration': 30,\n            'filesize': 10 * 1024,\n            'playlist_id': '42',\n            'uploader': \"變態妍字幕版 太妍 тест\",\n            'creator': \"тест ' 123 ' тест--\",\n        }\n        second = {\n            'id': '2',\n            'url': TEST_URL,\n            'title': 'two',\n            'extractor': 'TEST',\n            'duration': 10,\n            'description': 'foo',\n            'filesize': 5 * 1024,\n            'playlist_id': '43',\n            'uploader': \"тест 123\",\n        }\n        videos = [first, second]\n\n        def get_videos(filter_=None):\n            ydl = FilterYDL({'match_filter': filter_})\n            for v in videos:\n                ydl.process_ie_result(v, download=True)\n            return [v['id'] for v in ydl.downloaded_info_dicts]\n\n        res = get_videos()\n        self.assertEqual(res, ['1', '2'])\n\n        def f(v):\n            if v['id'] == '1':\n                return None\n            else:\n                return 'Video id is not 1'\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('duration < 30')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description = foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('description =? foo')\n        res = get_videos(f)\n        self.assertEqual(res, ['1', '2'])\n\n        f = match_filter_func('filesize > 5KiB')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('playlist_id = 42')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('uploader = \"變態妍字幕版 太妍 тест\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func('uploader != \"變態妍字幕版 太妍 тест\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['2'])\n\n        f = match_filter_func('creator = \"тест \\' 123 \\' тест--\"')\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func(\"creator = 'тест \\\\' 123 \\\\' тест--'\")\n        res = get_videos(f)\n        self.assertEqual(res, ['1'])\n\n        f = match_filter_func(r\"creator = 'тест \\' 123 \\' тест--' & duration > 30\")\n        res = get_videos(f)\n        self.assertEqual(res, [])\n\n    def test_playlist_items_selection(self):\n        entries = [{\n            'id': compat_str(i),\n            'title': compat_str(i),\n            'url': TEST_URL,\n        } for i in range(1, 5)]\n        playlist = {\n            '_type': 'playlist',\n            'id': 'test',\n            'entries': entries,\n            'extractor': 'test:playlist',\n            'extractor_key': 'test:playlist',\n            'webpage_url': 'http://example.com',\n        }\n\n        def get_downloaded_info_dicts(params):\n            ydl = YDL(params)\n            # make a deep copy because the dictionary and nested entries\n            # can be modified\n            ydl.process_ie_result(copy.deepcopy(playlist))\n            return ydl.downloaded_info_dicts\n\n        def get_ids(params):\n            return [int(v['id']) for v in get_downloaded_info_dicts(params)]\n\n        result = get_ids({})\n        self.assertEqual(result, [1, 2, 3, 4])\n\n        result = get_ids({'playlistend': 10})\n        self.assertEqual(result, [1, 2, 3, 4])\n\n        result = get_ids({'playlistend': 2})\n        self.assertEqual(result, [1, 2])\n\n        result = get_ids({'playliststart': 10})\n        self.assertEqual(result, [])\n\n        result = get_ids({'playliststart': 2})\n        self.assertEqual(result, [2, 3, 4])\n\n        result = get_ids({'playlist_items': '2-4'})\n        self.assertEqual(result, [2, 3, 4])\n\n        result = get_ids({'playlist_items': '2,4'})\n        self.assertEqual(result, [2, 4])\n\n        result = get_ids({'playlist_items': '10'})\n        self.assertEqual(result, [])\n\n        result = get_ids({'playlist_items': '3-10'})\n        self.assertEqual(result, [3, 4])\n\n        result = get_ids({'playlist_items': '2-4,3-4,3'})\n        self.assertEqual(result, [2, 3, 4])\n\n        # Tests for https://github.com/ytdl-org/youtube-dl/issues/10591\n        # @{\n        result = get_downloaded_info_dicts({'playlist_items': '2-4,3-4,3'})\n        self.assertEqual(result[0]['playlist_index'], 2)\n        self.assertEqual(result[1]['playlist_index'], 3)\n\n        result = get_downloaded_info_dicts({'playlist_items': '2-4,3-4,3'})\n        self.assertEqual(result[0]['playlist_index'], 2)\n        self.assertEqual(result[1]['playlist_index'], 3)\n        self.assertEqual(result[2]['playlist_index'], 4)\n\n        result = get_downloaded_info_dicts({'playlist_items': '4,2'})\n        self.assertEqual(result[0]['playlist_index'], 4)\n        self.assertEqual(result[1]['playlist_index'], 2)\n        # @}\n\n    def test_urlopen_no_file_protocol(self):\n        # see https://github.com/ytdl-org/youtube-dl/issues/8227\n        ydl = YDL()\n        self.assertRaises(compat_urllib_error.URLError, ydl.urlopen, 'file:///etc/passwd')\n\n    def test_do_not_override_ie_key_in_url_transparent(self):\n        ydl = YDL()\n\n        class Foo1IE(InfoExtractor):\n            _VALID_URL = r'foo1:'\n\n            def _real_extract(self, url):\n                return {\n                    '_type': 'url_transparent',\n                    'url': 'foo2:',\n                    'ie_key': 'Foo2',\n                    'title': 'foo1 title',\n                    'id': 'foo1_id',\n                }\n\n        class Foo2IE(InfoExtractor):\n            _VALID_URL = r'foo2:'\n\n            def _real_extract(self, url):\n                return {\n                    '_type': 'url',\n                    'url': 'foo3:',\n                    'ie_key': 'Foo3',\n                }\n\n        class Foo3IE(InfoExtractor):\n            _VALID_URL = r'foo3:'\n\n            def _real_extract(self, url):\n                return _make_result([{'url': TEST_URL}], title='foo3 title')\n\n        ydl.add_info_extractor(Foo1IE(ydl))\n        ydl.add_info_extractor(Foo2IE(ydl))\n        ydl.add_info_extractor(Foo3IE(ydl))\n        ydl.extract_info('foo1:')\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(downloaded['url'], TEST_URL)\n        self.assertEqual(downloaded['title'], 'foo1 title')\n        self.assertEqual(downloaded['id'], 'testid')\n        self.assertEqual(downloaded['extractor'], 'testex')\n        self.assertEqual(downloaded['extractor_key'], 'TestEx')\n\n    # Test case for https://github.com/ytdl-org/youtube-dl/issues/27064\n    def test_ignoreerrors_for_playlist_with_url_transparent_iterable_entries(self):\n\n        ydl = YDL({\n            'format': 'extra',\n            'ignoreerrors': True,\n        })\n        ydl.trouble = lambda *_, **__: None\n\n        class VideoIE(InfoExtractor):\n            _VALID_URL = r'video:(?P<id>\\d+)'\n\n            def _real_extract(self, url):\n                video_id = self._match_id(url)\n                formats = [{\n                    'format_id': 'default',\n                    'url': 'url:',\n                }]\n                if video_id == '0':\n                    raise ExtractorError('foo')\n                if video_id == '2':\n                    formats.append({\n                        'format_id': 'extra',\n                        'url': TEST_URL,\n                    })\n                return {\n                    'id': video_id,\n                    'title': 'Video %s' % video_id,\n                    'formats': formats,\n                }\n\n        class PlaylistIE(InfoExtractor):\n            _VALID_URL = r'playlist:'\n\n            def _entries(self):\n                for n in range(3):\n                    video_id = compat_str(n)\n                    yield {\n                        '_type': 'url_transparent',\n                        'ie_key': VideoIE.ie_key(),\n                        'id': video_id,\n                        'url': 'video:%s' % video_id,\n                        'title': 'Video Transparent %s' % video_id,\n                    }\n\n            def _real_extract(self, url):\n                return self.playlist_result(self._entries())\n\n        ydl.add_info_extractor(VideoIE(ydl))\n        ydl.add_info_extractor(PlaylistIE(ydl))\n        info = ydl.extract_info('playlist:')\n        entries = info['entries']\n        self.assertEqual(len(entries), 3)\n        self.assertTrue(entries[0] is None)\n        self.assertTrue(entries[1] is None)\n        self.assertEqual(len(ydl.downloaded_info_dicts), 1)\n        downloaded = ydl.downloaded_info_dicts[0]\n        self.assertEqual(entries[2], downloaded)\n        self.assertEqual(downloaded['url'], TEST_URL)\n        self.assertEqual(downloaded['title'], 'Video Transparent 2')\n        self.assertEqual(downloaded['id'], '2')\n        self.assertEqual(downloaded['extractor'], 'Video')\n        self.assertEqual(downloaded['extractor_key'], 'Video')\n\n    def test_default_times(self):\n        \"\"\"Test addition of missing upload/release/_date from /release_/timestamp\"\"\"\n        info = {\n            'id': '1234',\n            'url': TEST_URL,\n            'title': 'Title',\n            'ext': 'mp4',\n            'timestamp': 1631352900,\n            'release_timestamp': 1632995931,\n        }\n\n        params = {'simulate': True, }\n        ydl = FakeYDL(params)\n        out_info = ydl.process_ie_result(info)\n        self.assertTrue(isinstance(out_info['upload_date'], compat_str))\n        self.assertEqual(out_info['upload_date'], '20210911')\n        self.assertTrue(isinstance(out_info['release_date'], compat_str))\n        self.assertEqual(out_info['release_date'], '20210930')\n\n\nclass TestYoutubeDLCookies(unittest.TestCase):\n\n    @staticmethod\n    def encode_cookie(cookie):\n        if not isinstance(cookie, dict):\n            cookie = vars(cookie)\n        for name, value in cookie.items():\n            yield name, compat_str(value)\n\n    @classmethod\n    def comparable_cookies(cls, cookies):\n        # Work around cookiejar cookies not being unicode strings\n        return sorted(map(tuple, map(sorted, map(cls.encode_cookie, cookies))))\n\n    def assertSameCookies(self, c1, c2, msg=None):\n        return self.assertEqual(\n            *map(self.comparable_cookies, (c1, c2)),\n            msg=msg)\n\n    def assertSameCookieStrings(self, c1, c2, msg=None):\n        return self.assertSameCookies(\n            *map(lambda c: compat_http_cookies_SimpleCookie(c).values(), (c1, c2)),\n            msg=msg)\n\n    def test_header_cookies(self):\n\n        ydl = FakeYDL()\n        ydl.report_warning = lambda *_, **__: None\n\n        def cookie(name, value, version=None, domain='', path='', secure=False, expires=None):\n            return compat_http_cookiejar_Cookie(\n                version or 0, name, value, None, False,\n                domain, bool(domain), bool(domain), path, bool(path),\n                secure, expires, False, None, None, rest={})\n\n        test_url, test_domain = (t % ('yt.dl',) for t in ('https://%s/test', '.%s'))\n\n        def test(encoded_cookies, cookies, headers=False, round_trip=None, error_re=None):\n            def _test():\n                ydl.cookiejar.clear()\n                ydl._load_cookies(encoded_cookies, autoscope=headers)\n                if headers:\n                    ydl._apply_header_cookies(test_url)\n                data = {'url': test_url}\n                ydl._calc_headers(data)\n                self.assertSameCookies(\n                    cookies, ydl.cookiejar,\n                    'Extracted cookiejar.Cookie is not the same')\n                if not headers:\n                    self.assertSameCookieStrings(\n                        data.get('cookies'), round_trip or encoded_cookies,\n                        msg='Cookie is not the same as round trip')\n                ydl.__dict__['_YoutubeDL__header_cookies'] = []\n\n            try:\n                _test()\n            except AssertionError:\n                raise\n            except Exception as e:\n                if not error_re:\n                    raise\n                assertRegexpMatches(self, e.args[0], error_re.join(('.*',) * 2))\n\n        test('test=value; Domain=' + test_domain, [cookie('test', 'value', domain=test_domain)])\n        test('test=value', [cookie('test', 'value')], error_re='Unscoped cookies are not allowed')\n        test('cookie1=value1; Domain={0}; Path=/test; cookie2=value2; Domain={0}; Path=/'.format(test_domain), [\n            cookie('cookie1', 'value1', domain=test_domain, path='/test'),\n            cookie('cookie2', 'value2', domain=test_domain, path='/')])\n        cookie_kw = compat_kwargs(\n            {'domain': test_domain, 'path': '/test', 'secure': True, 'expires': '9999999999', })\n        test('test=value; Domain={domain}; Path={path}; Secure; Expires={expires}'.format(**cookie_kw), [\n            cookie('test', 'value', **cookie_kw)])\n        test('test=\"value; \"; path=/test; domain=' + test_domain, [\n            cookie('test', 'value; ', domain=test_domain, path='/test')],\n            round_trip='test=\"value\\\\073 \"; Domain={0}; Path=/test'.format(test_domain))\n        test('name=; Domain=' + test_domain, [cookie('name', '', domain=test_domain)],\n             round_trip='name=\"\"; Domain=' + test_domain)\n        test('test=value', [cookie('test', 'value', domain=test_domain)], headers=True)\n        test('cookie1=value; Domain={0}; cookie2=value'.format(test_domain), [],\n             headers=True, error_re='Invalid syntax')\n        ydl.report_warning = ydl.report_error\n        test('test=value', [], headers=True, error_re='Passing cookies as a header is a potential security risk')\n\n    def test_infojson_cookies(self):\n        TEST_FILE = 'test_infojson_cookies.info.json'\n        TEST_URL = 'https://example.com/example.mp4'\n        COOKIES = 'a=b; Domain=.example.com; c=d; Domain=.example.com'\n        COOKIE_HEADER = {'Cookie': 'a=b; c=d'}\n\n        ydl = FakeYDL()\n        ydl.process_info = lambda x: ydl._write_info_json('test', x, TEST_FILE)\n\n        def make_info(info_header_cookies=False, fmts_header_cookies=False, cookies_field=False):\n            fmt = {'url': TEST_URL}\n            if fmts_header_cookies:\n                fmt['http_headers'] = COOKIE_HEADER\n            if cookies_field:\n                fmt['cookies'] = COOKIES\n            return _make_result([fmt], http_headers=COOKIE_HEADER if info_header_cookies else None)\n\n        def test(initial_info, note):\n\n            def failure_msg(why):\n                return ' when '.join((why, note))\n\n            result = {}\n            result['processed'] = ydl.process_ie_result(initial_info)\n            self.assertTrue(ydl.cookiejar.get_cookies_for_url(TEST_URL),\n                            msg=failure_msg('No cookies set in cookiejar after initial process'))\n            ydl.cookiejar.clear()\n            with open(TEST_FILE) as infojson:\n                result['loaded'] = ydl.sanitize_info(json.load(infojson), True)\n            result['final'] = ydl.process_ie_result(result['loaded'].copy(), download=False)\n            self.assertTrue(ydl.cookiejar.get_cookies_for_url(TEST_URL),\n                            msg=failure_msg('No cookies set in cookiejar after final process'))\n            ydl.cookiejar.clear()\n            for key in ('processed', 'loaded', 'final'):\n                info = result[key]\n                self.assertIsNone(\n                    traverse_obj(info, ((None, ('formats', 0)), 'http_headers', 'Cookie'), casesense=False, get_all=False),\n                    msg=failure_msg('Cookie header not removed in {0} result'.format(key)))\n                self.assertSameCookieStrings(\n                    traverse_obj(info, ((None, ('formats', 0)), 'cookies'), get_all=False), COOKIES,\n                    msg=failure_msg('No cookies field found in {0} result'.format(key)))\n\n        test({'url': TEST_URL, 'http_headers': COOKIE_HEADER, 'id': '1', 'title': 'x'}, 'no formats field')\n        test(make_info(info_header_cookies=True), 'info_dict header cokies')\n        test(make_info(fmts_header_cookies=True), 'format header cookies')\n        test(make_info(info_header_cookies=True, fmts_header_cookies=True), 'info_dict and format header cookies')\n        test(make_info(info_header_cookies=True, fmts_header_cookies=True, cookies_field=True), 'all cookies fields')\n        test(make_info(cookies_field=True), 'cookies format field')\n        test({'url': TEST_URL, 'cookies': COOKIES, 'id': '1', 'title': 'x'}, 'info_dict cookies field only')\n\n        try_rm(TEST_FILE)\n\n    def test_add_headers_cookie(self):\n        def check_for_cookie_header(result):\n            return traverse_obj(result, ((None, ('formats', 0)), 'http_headers', 'Cookie'), casesense=False, get_all=False)\n\n        ydl = FakeYDL({'http_headers': {'Cookie': 'a=b'}})\n        ydl._apply_header_cookies(_make_result([])['webpage_url'])  # Scope to input webpage URL: .example.com\n\n        fmt = {'url': 'https://example.com/video.mp4'}\n        result = ydl.process_ie_result(_make_result([fmt]), download=False)\n        self.assertIsNone(check_for_cookie_header(result), msg='http_headers cookies in result info_dict')\n        self.assertEqual(result.get('cookies'), 'a=b; Domain=.example.com', msg='No cookies were set in cookies field')\n        self.assertIn('a=b', ydl.cookiejar.get_cookie_header(fmt['url']), msg='No cookies were set in cookiejar')\n\n        fmt = {'url': 'https://wrong.com/video.mp4'}\n        result = ydl.process_ie_result(_make_result([fmt]), download=False)\n        self.assertIsNone(check_for_cookie_header(result), msg='http_headers cookies for wrong domain')\n        self.assertFalse(result.get('cookies'), msg='Cookies set in cookies field for wrong domain')\n        self.assertFalse(ydl.cookiejar.get_cookie_header(fmt['url']), msg='Cookies set in cookiejar for wrong domain')\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_YoutubeDLCookieJar.py": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\nimport os\nimport re\nimport sys\nimport tempfile\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.utils import YoutubeDLCookieJar\n\n\nclass TestYoutubeDLCookieJar(unittest.TestCase):\n    def test_keep_session_cookies(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/session_cookies.txt')\n        cookiejar.load(ignore_discard=True, ignore_expires=True)\n        tf = tempfile.NamedTemporaryFile(delete=False)\n        try:\n            cookiejar.save(filename=tf.name, ignore_discard=True, ignore_expires=True)\n            temp = tf.read().decode('utf-8')\n            self.assertTrue(re.search(\n                r'www\\.foobar\\.foobar\\s+FALSE\\s+/\\s+TRUE\\s+0\\s+YoutubeDLExpiresEmpty\\s+YoutubeDLExpiresEmptyValue', temp))\n            self.assertTrue(re.search(\n                r'www\\.foobar\\.foobar\\s+FALSE\\s+/\\s+TRUE\\s+0\\s+YoutubeDLExpires0\\s+YoutubeDLExpires0Value', temp))\n        finally:\n            tf.close()\n            os.remove(tf.name)\n\n    def test_strip_httponly_prefix(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/httponly_cookies.txt')\n        cookiejar.load(ignore_discard=True, ignore_expires=True)\n\n        def assert_cookie_has_value(key):\n            self.assertEqual(cookiejar._cookies['www.foobar.foobar']['/'][key].value, key + '_VALUE')\n\n        assert_cookie_has_value('HTTPONLY_COOKIE')\n        assert_cookie_has_value('JS_ACCESSIBLE_COOKIE')\n\n    def test_malformed_cookies(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/malformed_cookies.txt')\n        cookiejar.load(ignore_discard=True, ignore_expires=True)\n        # Cookies should be empty since all malformed cookie file entries\n        # will be ignored\n        self.assertFalse(cookiejar._cookies)\n\n    def test_get_cookie_header(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/httponly_cookies.txt')\n        cookiejar.load(ignore_discard=True, ignore_expires=True)\n        header = cookiejar.get_cookie_header('https://www.foobar.foobar')\n        self.assertIn('HTTPONLY_COOKIE', header)\n\n    def test_get_cookies_for_url(self):\n        cookiejar = YoutubeDLCookieJar('./test/testdata/cookies/session_cookies.txt')\n        cookiejar.load(ignore_discard=True, ignore_expires=True)\n        cookies = cookiejar.get_cookies_for_url('https://www.foobar.foobar/')\n        self.assertEqual(len(cookies), 2)\n        cookies = cookiejar.get_cookies_for_url('https://foobar.foobar/')\n        self.assertFalse(cookies)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_aes.py": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom youtube_dl.aes import aes_decrypt, aes_encrypt, aes_cbc_decrypt, aes_cbc_encrypt, aes_decrypt_text, aes_ecb_encrypt\nfrom youtube_dl.utils import bytes_to_intlist, intlist_to_bytes\nimport base64\n\n# the encrypted data can be generate with 'devscripts/generate_aes_testdata.py'\n\n\nclass TestAES(unittest.TestCase):\n    def setUp(self):\n        self.key = self.iv = [0x20, 0x15] + 14 * [0]\n        self.secret_msg = b'Secret message goes here'\n\n    def test_encrypt(self):\n        msg = b'message'\n        key = list(range(16))\n        encrypted = aes_encrypt(bytes_to_intlist(msg), key)\n        decrypted = intlist_to_bytes(aes_decrypt(encrypted, key))\n        self.assertEqual(decrypted, msg)\n\n    def test_cbc_decrypt(self):\n        data = bytes_to_intlist(\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\"\n        )\n        decrypted = intlist_to_bytes(aes_cbc_decrypt(data, self.key, self.iv))\n        self.assertEqual(decrypted.rstrip(b'\\x08'), self.secret_msg)\n\n    def test_cbc_encrypt(self):\n        data = bytes_to_intlist(self.secret_msg)\n        encrypted = intlist_to_bytes(aes_cbc_encrypt(data, self.key, self.iv))\n        self.assertEqual(\n            encrypted,\n            b\"\\x97\\x92+\\xe5\\x0b\\xc3\\x18\\x91ky9m&\\xb3\\xb5@\\xe6'\\xc2\\x96.\\xc8u\\x88\\xab9-[\\x9e|\\xf1\\xcd\")\n\n    def test_decrypt_text(self):\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8])\n            + b'\\x17\\x15\\x93\\xab\\x8d\\x80V\\xcdV\\xe0\\t\\xcdo\\xc2\\xa5\\xd8ksM\\r\\xe27N\\xae'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 16))\n        self.assertEqual(decrypted, self.secret_msg)\n\n        password = intlist_to_bytes(self.key).decode('utf-8')\n        encrypted = base64.b64encode(\n            intlist_to_bytes(self.iv[:8])\n            + b'\\x0b\\xe6\\xa4\\xd9z\\x0e\\xb8\\xb9\\xd0\\xd4i_\\x85\\x1d\\x99\\x98_\\xe5\\x80\\xe7.\\xbf\\xa5\\x83'\n        ).decode('utf-8')\n        decrypted = (aes_decrypt_text(encrypted, password, 32))\n        self.assertEqual(decrypted, self.secret_msg)\n\n    def test_ecb_encrypt(self):\n        data = bytes_to_intlist(self.secret_msg)\n        encrypted = intlist_to_bytes(aes_ecb_encrypt(data, self.key))\n        self.assertEqual(\n            encrypted,\n            b'\\xaa\\x86]\\x81\\x97>\\x02\\x92\\x9d\\x1bR[[L/u\\xd3&\\xd1(h\\xde{\\x81\\x94\\xba\\x02\\xae\\xbd\\xa6\\xd0:')\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_age_restriction.py": "#!/usr/bin/env python\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nfrom test.helper import try_rm\n\n\nfrom youtube_dl import YoutubeDL\nfrom youtube_dl.utils import DownloadError\n\n\ndef _download_restricted(url, filename, age):\n    \"\"\" Returns true if the file has been downloaded \"\"\"\n\n    params = {\n        'age_limit': age,\n        'skip_download': True,\n        'writeinfojson': True,\n        'outtmpl': '%(id)s.%(ext)s',\n    }\n    ydl = YoutubeDL(params)\n    ydl.add_default_info_extractors()\n    json_filename = os.path.splitext(filename)[0] + '.info.json'\n    try_rm(json_filename)\n    try:\n        ydl.download([url])\n    except DownloadError:\n        try_rm(json_filename)\n    res = os.path.exists(json_filename)\n    try_rm(json_filename)\n    return res\n\n\nclass TestAgeRestriction(unittest.TestCase):\n    def _assert_restricted(self, url, filename, age, old_age=None):\n        self.assertTrue(_download_restricted(url, filename, old_age))\n        self.assertFalse(_download_restricted(url, filename, age))\n\n    def test_youtube(self):\n        self._assert_restricted('HtVdAasjOgU', 'HtVdAasjOgU.mp4', 10)\n\n    def test_youporn(self):\n        self._assert_restricted(\n            'https://www.youporn.com/watch/16715086/sex-ed-in-detention-18-asmr/',\n            '16715086.mp4', 2, old_age=25)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_all_urls.py": "#!/usr/bin/env python\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nimport collections\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\n\nfrom test.helper import gettestcases\n\nfrom youtube_dl.extractor import (\n    FacebookIE,\n    gen_extractors,\n    YoutubeIE,\n)\n\n\nclass TestAllURLsMatching(unittest.TestCase):\n    def setUp(self):\n        self.ies = gen_extractors()\n\n    def matching_ies(self, url):\n        return [ie.IE_NAME for ie in self.ies if ie.suitable(url) and ie.IE_NAME != 'generic']\n\n    def assertMatch(self, url, ie_list):\n        self.assertEqual(self.matching_ies(url), ie_list)\n\n    def test_youtube_playlist_matching(self):\n        assertPlaylist = lambda url: self.assertMatch(url, ['youtube:playlist'])\n        assertTab = lambda url: self.assertMatch(url, ['youtube:tab'])\n        assertPlaylist('ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertPlaylist('UUBABnxM4Ar9ten8Mdjj1j0Q')  # 585\n        assertPlaylist('PL63F0C78739B09958')\n        assertTab('https://www.youtube.com/playlist?list=UUBABnxM4Ar9ten8Mdjj1j0Q')\n        assertTab('https://www.youtube.com/course?list=ECUl4u3cNGP61MdtwGTqZA0MreSaDybji8')\n        assertTab('https://www.youtube.com/playlist?list=PLwP_SiAcdui0KVebT0mU9Apz359a4ubsC')\n        assertTab('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012')  # 668\n        self.assertFalse('youtube:playlist' in self.matching_ies('PLtS2H6bU1M'))\n        # Top tracks\n        assertTab('https://www.youtube.com/playlist?list=MCUS.20142101')\n\n    def test_youtube_matching(self):\n        self.assertTrue(YoutubeIE.suitable('PLtS2H6bU1M'))\n        self.assertFalse(YoutubeIE.suitable('https://www.youtube.com/watch?v=AV6J6_AeFEQ&playnext=1&list=PL4023E734DA416012'))  # 668\n        self.assertMatch('http://youtu.be/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.youtube.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('https://youtube.googleapis.com/v/BaW_jenozKc', ['youtube'])\n        self.assertMatch('http://www.cleanvideosearch.com/media/action/yt/watch?videoId=8v_4O44sfjM', ['youtube'])\n\n    def test_youtube_channel_matching(self):\n        assertChannel = lambda url: self.assertMatch(url, ['youtube:tab'])\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM?feature=gb_ch_rec')\n        assertChannel('https://www.youtube.com/channel/HCtnHdj3df7iM/videos')\n\n    def test_youtube_user_matching(self):\n        self.assertMatch('http://www.youtube.com/NASAgovVideo/videos', ['youtube:tab'])\n\n    def test_youtube_feeds(self):\n        self.assertMatch('https://www.youtube.com/feed/library', ['youtube:tab'])\n        self.assertMatch('https://www.youtube.com/feed/history', ['youtube:tab'])\n        self.assertMatch('https://www.youtube.com/feed/watch_later', ['youtube:tab'])\n        self.assertMatch('https://www.youtube.com/feed/subscriptions', ['youtube:tab'])\n\n    def test_youtube_search_matching(self):\n        self.assertMatch('http://www.youtube.com/results?search_query=making+mustard', ['youtube:search_url'])\n        self.assertMatch('https://www.youtube.com/results?baz=bar&search_query=youtube-dl+test+video&filters=video&lclk=video', ['youtube:search_url'])\n\n    def test_facebook_matching(self):\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/Shiniknoh#!/photo.php?v=10153317450565268'))\n        self.assertTrue(FacebookIE.suitable('https://www.facebook.com/cindyweather?fref=ts#!/photo.php?v=10152183998945793'))\n\n    def test_no_duplicates(self):\n        ies = gen_extractors()\n        for tc in gettestcases(include_onlymatching=True):\n            url = tc['url']\n            for ie in ies:\n                if type(ie).__name__ in ('GenericIE', tc['name'] + 'IE'):\n                    self.assertTrue(ie.suitable(url), '%s should match URL %r' % (type(ie).__name__, url))\n                else:\n                    self.assertFalse(\n                        ie.suitable(url),\n                        '%s should not match URL %r . That URL belongs to %s.' % (type(ie).__name__, url, tc['name']))\n\n    def test_keywords(self):\n        self.assertMatch(':ytsubs', ['youtube:subscriptions'])\n        self.assertMatch(':ytsubscriptions', ['youtube:subscriptions'])\n        self.assertMatch(':ythistory', ['youtube:history'])\n\n    def test_vimeo_matching(self):\n        self.assertMatch('https://vimeo.com/channels/tributes', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259', ['vimeo:channel'])\n        self.assertMatch('https://vimeo.com/channels/31259/53576664', ['vimeo'])\n        self.assertMatch('https://vimeo.com/user7108434', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user7108434/videos', ['vimeo:user'])\n        self.assertMatch('https://vimeo.com/user21297594/review/75524534/3c257a1b5d', ['vimeo:review'])\n\n    # https://github.com/ytdl-org/youtube-dl/issues/1930\n    def test_soundcloud_not_matching_sets(self):\n        self.assertMatch('http://soundcloud.com/floex/sets/gone-ep', ['soundcloud:set'])\n\n    def test_tumblr(self):\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430/orphan-black-dvd-extra-behind-the-scenes', ['Tumblr'])\n        self.assertMatch('http://tatianamaslanydaily.tumblr.com/post/54196191430', ['Tumblr'])\n\n    def test_pbs(self):\n        # https://github.com/ytdl-org/youtube-dl/issues/2350\n        self.assertMatch('http://video.pbs.org/viralplayer/2365173446/', ['pbs'])\n        self.assertMatch('http://video.pbs.org/widget/partnerplayer/980042464/', ['pbs'])\n\n    def test_no_duplicated_ie_names(self):\n        name_accu = collections.defaultdict(list)\n        for ie in self.ies:\n            name_accu[ie.IE_NAME.lower()].append(type(ie).__name__)\n        for (ie_name, ie_list) in name_accu.items():\n            self.assertEqual(\n                len(ie_list), 1,\n                'Multiple extractors with the same IE_NAME \"%s\" (%s)' % (ie_name, ', '.join(ie_list)))\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "test/test_cache.py": "#!/usr/bin/env python\n# coding: utf-8\n\nfrom __future__ import unicode_literals\n\n# Allow direct execution\nimport os\nimport sys\nimport unittest\nsys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n\nimport shutil\n\nfrom test.helper import FakeYDL\nfrom youtube_dl.cache import Cache\nfrom youtube_dl.utils import version_tuple\nfrom youtube_dl.version import __version__\n\n\ndef _is_empty(d):\n    return not bool(os.listdir(d))\n\n\ndef _mkdir(d):\n    if not os.path.exists(d):\n        os.mkdir(d)\n\n\nclass TestCache(unittest.TestCase):\n    def setUp(self):\n        TEST_DIR = os.path.dirname(os.path.abspath(__file__))\n        TESTDATA_DIR = os.path.join(TEST_DIR, 'testdata')\n        _mkdir(TESTDATA_DIR)\n        self.test_dir = os.path.join(TESTDATA_DIR, 'cache_test')\n        self.tearDown()\n\n    def tearDown(self):\n        if os.path.exists(self.test_dir):\n            shutil.rmtree(self.test_dir)\n\n    def test_cache(self):\n        ydl = FakeYDL({\n            'cachedir': self.test_dir,\n        })\n        c = Cache(ydl)\n        obj = {'x': 1, 'y': ['ä', '\\\\a', True]}\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n        c.store('test_cache', 'k.', obj)\n        self.assertEqual(c.load('test_cache', 'k2'), None)\n        self.assertFalse(_is_empty(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), obj)\n        self.assertEqual(c.load('test_cache', 'y'), None)\n        self.assertEqual(c.load('test_cache2', 'k.'), None)\n        c.remove()\n        self.assertFalse(os.path.exists(self.test_dir))\n        self.assertEqual(c.load('test_cache', 'k.'), None)\n\n    def test_cache_validation(self):\n        ydl = FakeYDL({\n            'cachedir': self.test_dir,\n        })\n        c = Cache(ydl)\n        obj = {'x': 1, 'y': ['ä', '\\\\a', True]}\n        c.store('test_cache', 'k.', obj)\n        self.assertEqual(c.load('test_cache', 'k.', min_ver='1970.01.01'), obj)\n        new_version = '.'.join(('%d' % ((v + 1) if i == 0 else v, )) for i, v in enumerate(version_tuple(__version__)))\n        self.assertIs(c.load('test_cache', 'k.', min_ver=new_version), None)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  "requirements": null
}