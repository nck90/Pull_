{
  "repo_name": "charlax/professional-programming",
  "repo_url": "https://github.com/charlax/professional-programming",
  "description": "A collection of learning resources for curious software engineers",
  "stars": 47422,
  "language": "Python",
  "created_at": "2015-11-07T05:07:52Z",
  "updated_at": "2025-03-19T07:05:29Z",
  "files": {
    "antipatterns/python-examples/reraise_exceptions_bad.py": "from collections import namedtuple\n\nBread = namedtuple(\"Bread\", \"color\")\n\n\nclass ToastException(Exception):\n    pass\n\n\ndef toast(bread):\n    try:\n        put_in_toaster(bread)\n    except:\n        raise ToastException(\"Could not toast bread\")\n\n\ndef put_in_toaster(bread):\n    brad.color = \"light_brown\"  # Note the typo\n\n\ntoast(Bread(\"yellow\"))\n",
    "antipatterns/python-examples/reraise_exceptions_good.py": "from collections import namedtuple\n\nBread = namedtuple(\"Bread\", \"color\")\n\n\nclass ToastException(Exception):\n    pass\n\n\ndef toast(bread):\n    try:\n        put_in_toaster(bread)\n    except:\n        print(\"Got exception while trying to toast\")\n        raise\n\n\ndef put_in_toaster(bread):\n    brad.color = \"light_brown\"  # Note the typo\n\n\ntoast(Bread(\"yellow\"))\n",
    "antipatterns/sqlalchemy-examples/exists.py": "from sqlalchemy import create_engine\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.orm import sessionmaker\nfrom sqlalchemy.ext.declarative import declarative_base\n\n\nengine = create_engine(\"sqlite:///:memory:\", echo=True)\nSession = sessionmaker(bind=engine)\nBase = declarative_base()\n\n\nclass Toaster(Base):\n    __tablename__ = \"toasters\"\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    color = Column(String)\n\n\ndef toaster_exists_bad(toaster_id):\n    session = Session()\n    return bool(session.query(Toaster).filter_by(id=toaster_id).first())\n\n\ndef toaster_exists_good(toaster_id):\n    session = Session()\n    query = session.query(Toaster).filter_by(id=toaster_id)\n    return session.query(query.exists()).scalar()\n\n\ndef main():\n    Base.metadata.create_all(engine)\n\n    toaster_exists_bad(1)\n    toaster_exists_good(2)\n\n\nif __name__ == \"__main__\":\n    main()\n"
  },
  "requirements": null
}