{
  "repo_name": "localstack/localstack",
  "repo_url": "https://github.com/localstack/localstack",
  "description": "ðŸ’» A fully functional local AWS cloud stack. Develop and test your cloud & Serverless apps offline",
  "stars": 58079,
  "language": "Python",
  "created_at": "2016-10-25T23:48:03Z",
  "updated_at": "2025-03-19T06:10:20Z",
  "files": {
    "localstack-core/localstack/services/stepfunctions/asl/component/test_state/program/test_state_program.py": "import logging\nimport threading\nfrom typing import Final\n\nfrom localstack.aws.api.stepfunctions import (\n    ExecutionFailedEventDetails,\n)\nfrom localstack.services.stepfunctions.asl.component.common.error_name.failure_event import (\n    FailureEventException,\n)\nfrom localstack.services.stepfunctions.asl.component.common.error_name.states_error_name import (\n    StatesErrorName,\n)\nfrom localstack.services.stepfunctions.asl.component.common.error_name.states_error_name_type import (\n    StatesErrorNameType,\n)\nfrom localstack.services.stepfunctions.asl.component.eval_component import EvalComponent\nfrom localstack.services.stepfunctions.asl.component.state.state import CommonStateField\nfrom localstack.services.stepfunctions.asl.eval.test_state.environment import TestStateEnvironment\nfrom localstack.services.stepfunctions.asl.utils.encoding import to_json_str\nfrom localstack.utils.threads import TMP_THREADS\n\nLOG = logging.getLogger(__name__)\n\nTEST_CASE_EXECUTION_TIMEOUT_SECONDS: Final[int] = 300  # 5 minutes.\n\n\nclass TestStateProgram(EvalComponent):\n    test_state: Final[CommonStateField]\n\n    def __init__(\n        self,\n        test_state: CommonStateField,\n    ):\n        self.test_state = test_state\n\n    def eval(self, env: TestStateEnvironment) -> None:\n        env.next_state_name = self.test_state.name\n        worker_thread = threading.Thread(target=super().eval, args=(env,), daemon=True)\n        TMP_THREADS.append(worker_thread)\n        worker_thread.start()\n        worker_thread.join(timeout=TEST_CASE_EXECUTION_TIMEOUT_SECONDS)\n        is_timeout = worker_thread.is_alive()\n        if is_timeout:\n            env.set_timed_out()\n\n    def _eval_body(self, env: TestStateEnvironment) -> None:\n        try:\n            env.inspection_data[\"input\"] = to_json_str(env.states.get_input())\n            self.test_state.eval(env=env)\n        except FailureEventException as ex:\n            env.set_error(error=ex.get_execution_failed_event_details())\n        except Exception as ex:\n            cause = f\"{type(ex).__name__}({str(ex)})\"\n            LOG.error(\"Stepfunctions computation ended with exception '%s'.\", cause)\n            env.set_error(\n                ExecutionFailedEventDetails(\n                    error=StatesErrorName(typ=StatesErrorNameType.StatesRuntime).error_name,\n                    cause=cause,\n                )\n            )\n",
    "localstack-core/localstack/services/stepfunctions/asl/component/test_state/state/test_state_state_props.py": "from typing import Any, Final\n\nfrom localstack.services.stepfunctions.asl.component.common.parargs import Parargs\nfrom localstack.services.stepfunctions.asl.component.common.path.input_path import InputPath\nfrom localstack.services.stepfunctions.asl.component.common.path.result_path import ResultPath\nfrom localstack.services.stepfunctions.asl.component.common.result_selector import ResultSelector\nfrom localstack.services.stepfunctions.asl.component.state.state_pass.result import Result\nfrom localstack.services.stepfunctions.asl.component.state.state_props import StateProps\n\nEQUAL_SUBTYPES: Final[list[type]] = [InputPath, Parargs, ResultSelector, ResultPath, Result]\n\n\nclass TestStateStateProps(StateProps):\n    def add(self, instance: Any) -> None:\n        inst_type = type(instance)\n        # Subclasses\n        for typ in EQUAL_SUBTYPES:\n            if issubclass(inst_type, typ):\n                self._add(typ, instance)\n                return\n        super().add(instance=instance)\n",
    "localstack-core/localstack/services/stepfunctions/asl/eval/test_state/environment.py": "from __future__ import annotations\n\nfrom typing import Optional\n\nfrom localstack.aws.api.stepfunctions import Arn, InspectionData, StateMachineType\nfrom localstack.services.stepfunctions.asl.eval.environment import Environment\nfrom localstack.services.stepfunctions.asl.eval.evaluation_details import AWSExecutionDetails\nfrom localstack.services.stepfunctions.asl.eval.event.event_manager import (\n    EventHistoryContext,\n)\nfrom localstack.services.stepfunctions.asl.eval.event.logging import (\n    CloudWatchLoggingSession,\n)\nfrom localstack.services.stepfunctions.asl.eval.program_state import (\n    ProgramRunning,\n)\nfrom localstack.services.stepfunctions.asl.eval.states import ContextObjectData\nfrom localstack.services.stepfunctions.asl.eval.test_state.program_state import (\n    ProgramChoiceSelected,\n)\nfrom localstack.services.stepfunctions.asl.eval.variable_store import VariableStore\nfrom localstack.services.stepfunctions.backend.activity import Activity\n\n\nclass TestStateEnvironment(Environment):\n    inspection_data: InspectionData\n\n    def __init__(\n        self,\n        aws_execution_details: AWSExecutionDetails,\n        execution_type: StateMachineType,\n        context: ContextObjectData,\n        event_history_context: EventHistoryContext,\n        activity_store: dict[Arn, Activity],\n        cloud_watch_logging_session: Optional[CloudWatchLoggingSession] = None,\n    ):\n        super().__init__(\n            aws_execution_details=aws_execution_details,\n            execution_type=execution_type,\n            context=context,\n            event_history_context=event_history_context,\n            cloud_watch_logging_session=cloud_watch_logging_session,\n            activity_store=activity_store,\n        )\n        self.inspection_data = InspectionData()\n\n    def as_frame_of(\n        cls,\n        env: TestStateEnvironment,\n        event_history_frame_cache: Optional[EventHistoryContext] = None,\n    ) -> Environment:\n        frame = super().as_frame_of(env=env, event_history_frame_cache=event_history_frame_cache)\n        frame.inspection_data = env.inspection_data\n        return frame\n\n    def as_inner_frame_of(\n        cls,\n        env: TestStateEnvironment,\n        variable_store: VariableStore,\n        event_history_frame_cache: Optional[EventHistoryContext] = None,\n    ) -> Environment:\n        frame = super().as_inner_frame_of(\n            env=env,\n            event_history_frame_cache=event_history_frame_cache,\n            variable_store=variable_store,\n        )\n        frame.inspection_data = env.inspection_data\n        return frame\n\n    def set_choice_selected(self, next_state_name: str) -> None:\n        with self._state_mutex:\n            if isinstance(self._program_state, ProgramRunning):\n                self._program_state = ProgramChoiceSelected(next_state_name=next_state_name)\n                self.program_state_event.set()\n                self.program_state_event.clear()\n            else:\n                raise RuntimeError(\"Cannot set choice selected for non running ProgramState.\")\n",
    "localstack-core/localstack/services/stepfunctions/asl/eval/test_state/program_state.py": "from typing import Final\n\nfrom localstack.services.stepfunctions.asl.eval.program_state import ProgramState\n\n\nclass ProgramChoiceSelected(ProgramState):\n    next_state_name: Final[str]\n\n    def __init__(self, next_state_name: str):\n        super().__init__()\n        self.next_state_name = next_state_name\n",
    "localstack-core/localstack/services/stepfunctions/asl/parse/test_state/asl_parser.py": "from antlr4 import CommonTokenStream, InputStream, ParserRuleContext\n\nfrom localstack.services.stepfunctions.asl.antlr.runtime.ASLLexer import ASLLexer\nfrom localstack.services.stepfunctions.asl.antlr.runtime.ASLParser import ASLParser\nfrom localstack.services.stepfunctions.asl.component.eval_component import EvalComponent\nfrom localstack.services.stepfunctions.asl.parse.asl_parser import (\n    AmazonStateLanguageParser,\n    ASLParserException,\n    SyntaxErrorListener,\n)\nfrom localstack.services.stepfunctions.asl.parse.test_state.preprocessor import (\n    TestStatePreprocessor,\n)\n\n\nclass TestStateAmazonStateLanguageParser(AmazonStateLanguageParser):\n    @staticmethod\n    def parse(definition: str) -> tuple[EvalComponent, ParserRuleContext]:\n        # Attempt to build the AST and look out for syntax errors.\n        syntax_error_listener = SyntaxErrorListener()\n\n        input_stream = InputStream(definition)\n        lexer = ASLLexer(input_stream)\n        stream = CommonTokenStream(lexer)\n        parser = ASLParser(stream)\n        parser.removeErrorListeners()\n        parser.addErrorListener(syntax_error_listener)\n        # Unlike the main Program parser, TestState parsing occurs at a state declaration level.\n        tree = parser.state_decl_body()\n\n        errors = syntax_error_listener.errors\n        if errors:\n            raise ASLParserException(errors=errors)\n\n        # Attempt to preprocess the AST into evaluation components.\n        preprocessor = TestStatePreprocessor()\n        test_state_program = preprocessor.visit(tree)\n\n        return test_state_program, tree\n"
  },
  "requirements": null
}