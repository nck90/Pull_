{
  "repo_name": "donnemartin/system-design-primer",
  "repo_url": "https://github.com/donnemartin/system-design-primer",
  "description": "Learn how to design large-scale systems. Prep for the system design interview.  Includes Anki flashcards.",
  "stars": 293169,
  "language": "Python",
  "created_at": "2017-02-26T16:15:28Z",
  "updated_at": "2025-03-19T06:50:10Z",
  "files": {
    "solutions/object_oriented_design/call_center/call_center.py": "from abc import ABCMeta, abstractmethod\nfrom collections import deque\nfrom enum import Enum\n\n\nclass Rank(Enum):\n\n    OPERATOR = 0\n    SUPERVISOR = 1\n    DIRECTOR = 2\n\n\nclass Employee(metaclass=ABCMeta):\n\n    def __init__(self, employee_id, name, rank, call_center):\n        self.employee_id = employee_id\n        self.name = name\n        self.rank = rank\n        self.call = None\n        self.call_center = call_center\n\n    def take_call(self, call):\n        \"\"\"Assume the employee will always successfully take the call.\"\"\"\n        self.call = call\n        self.call.employee = self\n        self.call.state = CallState.IN_PROGRESS\n\n    def complete_call(self):\n        self.call.state = CallState.COMPLETE\n        self.call_center.notify_call_completed(self.call)\n\n    @abstractmethod\n    def escalate_call(self):\n        pass\n\n    def _escalate_call(self):\n        self.call.state = CallState.READY\n        call = self.call\n        self.call = None\n        self.call_center.notify_call_escalated(call)\n\n\nclass Operator(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.OPERATOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.SUPERVISOR\n        self._escalate_call()\n\n\nclass Supervisor(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.SUPERVISOR)\n\n    def escalate_call(self):\n        self.call.level = Rank.DIRECTOR\n        self._escalate_call()\n\n\nclass Director(Employee):\n\n    def __init__(self, employee_id, name):\n        super(Operator, self).__init__(employee_id, name, Rank.DIRECTOR)\n\n    def escalate_call(self):\n        raise NotImplementedError('Directors must be able to handle any call')\n\n\nclass CallState(Enum):\n\n    READY = 0\n    IN_PROGRESS = 1\n    COMPLETE = 2\n\n\nclass Call(object):\n\n    def __init__(self, rank):\n        self.state = CallState.READY\n        self.rank = rank\n        self.employee = None\n\n\nclass CallCenter(object):\n\n    def __init__(self, operators, supervisors, directors):\n        self.operators = operators\n        self.supervisors = supervisors\n        self.directors = directors\n        self.queued_calls = deque()\n\n    def dispatch_call(self, call):\n        if call.rank not in (Rank.OPERATOR, Rank.SUPERVISOR, Rank.DIRECTOR):\n            raise ValueError('Invalid call rank: {}'.format(call.rank))\n        employee = None\n        if call.rank == Rank.OPERATOR:\n            employee = self._dispatch_call(call, self.operators)\n        if call.rank == Rank.SUPERVISOR or employee is None:\n            employee = self._dispatch_call(call, self.supervisors)\n        if call.rank == Rank.DIRECTOR or employee is None:\n            employee = self._dispatch_call(call, self.directors)\n        if employee is None:\n            self.queued_calls.append(call)\n\n    def _dispatch_call(self, call, employees):\n        for employee in employees:\n            if employee.call is None:\n                employee.take_call(call)\n                return employee\n        return None\n\n    def notify_call_escalated(self, call):\n        pass\n\n    def notify_call_completed(self, call):\n        pass\n\n    def dispatch_queued_call_to_newly_freed_employee(self, call, employee):\n        pass\n",
    "solutions/object_oriented_design/deck_of_cards/deck_of_cards.py": "from abc import ABCMeta, abstractmethod\nfrom enum import Enum\nimport sys\n\n\nclass Suit(Enum):\n\n    HEART = 0\n    DIAMOND = 1\n    CLUBS = 2\n    SPADE = 3\n\n\nclass Card(metaclass=ABCMeta):\n\n    def __init__(self, value, suit):\n        self.value = value\n        self.suit = suit\n        self.is_available = True\n\n    @property\n    @abstractmethod\n    def value(self):\n        pass\n\n    @value.setter\n    @abstractmethod\n    def value(self, other):\n        pass\n\n\nclass BlackJackCard(Card):\n\n    def __init__(self, value, suit):\n        super(BlackJackCard, self).__init__(value, suit)\n\n    def is_ace(self):\n        return True if self._value == 1 else False\n\n    def is_face_card(self):\n        \"\"\"Jack = 11, Queen = 12, King = 13\"\"\"\n        return True if 10 < self._value <= 13 else False\n\n    @property\n    def value(self):\n        if self.is_ace() == 1:\n            return 1\n        elif self.is_face_card():\n            return 10\n        else:\n            return self._value\n\n    @value.setter\n    def value(self, new_value):\n        if 1 <= new_value <= 13:\n            self._value = new_value\n        else:\n            raise ValueError('Invalid card value: {}'.format(new_value))\n\n\nclass Hand(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n\n    def add_card(self, card):\n        self.cards.append(card)\n\n    def score(self):\n        total_value = 0\n        for card in self.cards:\n            total_value += card.value\n        return total_value\n\n\nclass BlackJackHand(Hand):\n\n    BLACKJACK = 21\n\n    def __init__(self, cards):\n        super(BlackJackHand, self).__init__(cards)\n\n    def score(self):\n        min_over = sys.MAXSIZE\n        max_under = -sys.MAXSIZE\n        for score in self.possible_scores():\n            if self.BLACKJACK < score < min_over:\n                min_over = score\n            elif max_under < score <= self.BLACKJACK:\n                max_under = score\n        return max_under if max_under != -sys.MAXSIZE else min_over\n\n    def possible_scores(self):\n        \"\"\"Return a list of possible scores, taking Aces into account.\"\"\"\n        pass\n\n\nclass Deck(object):\n\n    def __init__(self, cards):\n        self.cards = cards\n        self.deal_index = 0\n\n    def remaining_cards(self):\n        return len(self.cards) - self.deal_index\n\n    def deal_card(self):\n        try:\n            card = self.cards[self.deal_index]\n            card.is_available = False\n            self.deal_index += 1\n        except IndexError:\n            return None\n        return card\n\n    def shuffle(self):\n        pass\n",
    "solutions/object_oriented_design/hash_table/hash_map.py": "class Item(object):\n\n    def __init__(self, key, value):\n        self.key = key\n        self.value = value\n\n\nclass HashTable(object):\n\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(self.size)]\n\n    def _hash_function(self, key):\n        return key % self.size\n\n    def set(self, key, value):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                item.value = value\n                return\n        self.table[hash_index].append(Item(key, value))\n\n    def get(self, key):\n        hash_index = self._hash_function(key)\n        for item in self.table[hash_index]:\n            if item.key == key:\n                return item.value\n        raise KeyError('Key not found')\n\n    def remove(self, key):\n        hash_index = self._hash_function(key)\n        for index, item in enumerate(self.table[hash_index]):\n            if item.key == key:\n                del self.table[hash_index][index]\n                return\n        raise KeyError('Key not found')\n",
    "solutions/object_oriented_design/lru_cache/lru_cache.py": "class Node(object):\n\n    def __init__(self, results):\n        self.results = results\n        self.next = next\n\n\nclass LinkedList(object):\n\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def move_to_front(self, node):\n        pass\n\n    def append_to_front(self, node):\n        pass\n\n    def remove_from_tail(self):\n        pass\n\n\nclass Cache(object):\n\n    def __init__(self, MAX_SIZE):\n        self.MAX_SIZE = MAX_SIZE\n        self.size = 0\n        self.lookup = {}  # key: query, value: node\n        self.linked_list = LinkedList()\n\n    def get(self, query):\n        \"\"\"Get the stored query result from the cache.\n\n        Accessing a node updates its position to the front of the LRU list.\n        \"\"\"\n        node = self.lookup.get(query)\n        if node is None:\n            return None\n        self.linked_list.move_to_front(node)\n        return node.results\n\n    def set(self, results, query):\n        \"\"\"Set the result for the given query key in the cache.\n\n        When updating an entry, updates its position to the front of the LRU list.\n        If the entry is new and the cache is at capacity, removes the oldest entry\n        before the new entry is added.\n        \"\"\"\n        node = self.lookup.get(query)\n        if node is not None:\n            # Key exists in cache, update the value\n            node.results = results\n            self.linked_list.move_to_front(node)\n        else:\n            # Key does not exist in cache\n            if self.size == self.MAX_SIZE:\n                # Remove the oldest entry from the linked list and lookup\n                self.lookup.pop(self.linked_list.tail.query, None)\n                self.linked_list.remove_from_tail()\n            else:\n                self.size += 1\n            # Add the new key and value\n            new_node = Node(results)\n            self.linked_list.append_to_front(new_node)\n            self.lookup[query] = new_node\n",
    "solutions/object_oriented_design/online_chat/online_chat.py": "from abc import ABCMeta\nfrom enum import Enum\n\n\nclass UserService(object):\n\n    def __init__(self):\n        self.users_by_id = {}  # key: user id, value: User\n\n    def add_user(self, user_id, name, pass_hash):\n        pass\n\n    def remove_user(self, user_id):\n        pass\n\n    def add_friend_request(self, from_user_id, to_user_id):\n        pass\n\n    def approve_friend_request(self, from_user_id, to_user_id):\n        pass\n\n    def reject_friend_request(self, from_user_id, to_user_id):\n        pass\n\n\nclass User(object):\n\n    def __init__(self, user_id, name, pass_hash):\n        self.user_id = user_id\n        self.name = name\n        self.pass_hash = pass_hash\n        self.friends_by_id = {}  # key: friend id, value: User\n        self.friend_ids_to_private_chats = {}  # key: friend id, value: private chats\n        self.group_chats_by_id = {}  # key: chat id, value: GroupChat\n        self.received_friend_requests_by_friend_id = {}  # key: friend id, value: AddRequest\n        self.sent_friend_requests_by_friend_id = {}  # key: friend id, value: AddRequest\n\n    def message_user(self, friend_id, message):\n        pass\n\n    def message_group(self, group_id, message):\n        pass\n\n    def send_friend_request(self, friend_id):\n        pass\n\n    def receive_friend_request(self, friend_id):\n        pass\n\n    def approve_friend_request(self, friend_id):\n        pass\n\n    def reject_friend_request(self, friend_id):\n        pass\n\n\nclass Chat(metaclass=ABCMeta):\n\n    def __init__(self, chat_id):\n        self.chat_id = chat_id\n        self.users = []\n        self.messages = []\n\n\nclass PrivateChat(Chat):\n\n    def __init__(self, first_user, second_user):\n        super(PrivateChat, self).__init__()\n        self.users.append(first_user)\n        self.users.append(second_user)\n\n\nclass GroupChat(Chat):\n\n    def add_user(self, user):\n        pass\n\n    def remove_user(self, user):\n        pass\n\n\nclass Message(object):\n\n    def __init__(self, message_id, message, timestamp):\n        self.message_id = message_id\n        self.message = message\n        self.timestamp = timestamp\n\n\nclass AddRequest(object):\n\n    def __init__(self, from_user_id, to_user_id, request_status, timestamp):\n        self.from_user_id = from_user_id\n        self.to_user_id = to_user_id\n        self.request_status = request_status\n        self.timestamp = timestamp\n\n\nclass RequestStatus(Enum):\n\n    UNREAD = 0\n    READ = 1\n    ACCEPTED = 2\n    REJECTED = 3\n"
  },
  "requirements": null
}