{
  "repo_name": "soimort/you-get",
  "repo_url": "https://github.com/soimort/you-get",
  "description": ":arrow_double_down: Dumb downloader that scrapes the web",
  "stars": 55329,
  "language": "Python",
  "created_at": "2012-08-20T15:53:36Z",
  "updated_at": "2025-03-19T02:14:42Z",
  "files": {
    "tests/test.py": "#!/usr/bin/env python\n\nimport unittest\n\nfrom you_get.extractors import (\n    imgur,\n    magisto,\n    youtube,\n    missevan,\n    acfun,\n    bilibili,\n    soundcloud,\n    tiktok,\n    twitter,\n    miaopai\n)\n\n\nclass YouGetTests(unittest.TestCase):\n    def test_imgur(self):\n        imgur.download('http://imgur.com/WVLk5nD', info_only=True)\n        imgur.download('https://imgur.com/we-should-have-listened-WVLk5nD', info_only=True)\n\n    def test_magisto(self):\n        magisto.download(\n            'http://www.magisto.com/album/video/f3x9AAQORAkfDnIFDA',\n            info_only=True\n        )\n\n    #def test_youtube(self):\n        #youtube.download(\n        #    'http://www.youtube.com/watch?v=pzKerr0JIPA', info_only=True\n        #)\n        #youtube.download('http://youtu.be/pzKerr0JIPA', info_only=True)\n        #youtube.download(\n        #    'http://www.youtube.com/attribution_link?u=/watch?v%3DldAKIzq7bvs%26feature%3Dshare',  # noqa\n        #    info_only=True\n        #)\n        #youtube.download(\n        #    'https://www.youtube.com/watch?v=oRdxUFDoQe0', info_only=True\n        #)\n\n    def test_acfun(self):\n        acfun.download('https://www.acfun.cn/v/ac44560432', info_only=True)\n\n    #def test_bilibili(self):\n        #bilibili.download('https://www.bilibili.com/video/BV1sL4y177sC', info_only=True)\n\n    #def test_soundcloud(self):\n        ## single song\n        #soundcloud.download(\n        #    'https://soundcloud.com/keiny-pham/impure-bird', info_only=True\n        #)\n        ## playlist\n        #soundcloud.download(\n        #    'https://soundcloud.com/anthony-flieger/sets/cytus', info_only=True\n        #)\n\n    def test_tiktok(self):\n        tiktok.download('https://www.tiktok.com/@zukky_48/video/7398162058153315605', info_only=True)\n        tiktok.download('https://www.tiktok.com/@/video/7398162058153315605', info_only=True)\n        tiktok.download('https://t.tiktok.com/i18n/share/video/7398162058153315605/', info_only=True)\n        tiktok.download('https://vt.tiktok.com/ZSYKjKt6M/', info_only=True)\n\n    def test_twitter(self):\n        twitter.download('https://twitter.com/elonmusk/status/1530516552084234244', info_only=True)\n        twitter.download('https://x.com/elonmusk/status/1530516552084234244', info_only=True)\n\n    def test_weibo(self):\n        miaopai.download('https://video.weibo.com/show?fid=1034:4825403706245135', info_only=True)\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "tests/test_common.py": "#!/usr/bin/env python\n\nimport unittest\n\nfrom you_get.common import *\n\nclass TestCommon(unittest.TestCase):\n    \n    def test_match1(self):\n        self.assertEqual(match1('http://youtu.be/1234567890A', r'youtu.be/([^/]+)'), '1234567890A')\n        self.assertEqual(match1('http://youtu.be/1234567890A', r'youtu.be/([^/]+)', r'youtu.(\\w+)'), ['1234567890A', 'be'])\n",
    "tests/test_util.py": "#!/usr/bin/env python\n\nimport unittest\n\nfrom you_get.util.fs import *\n\nclass TestUtil(unittest.TestCase):\n    def test_legitimize(self):\n        self.assertEqual(legitimize(\"1*2\", os=\"linux\"), \"1*2\")\n        self.assertEqual(legitimize(\"1*2\", os=\"mac\"), \"1*2\")\n        self.assertEqual(legitimize(\"1*2\", os=\"windows\"), \"1-2\")\n        self.assertEqual(legitimize(\"1*2\", os=\"wsl\"), \"1-2\")\n",
    "setup.py": "#!/usr/bin/env python3\n\nPROJ_NAME = 'you-get'\nPACKAGE_NAME = 'you_get'\n\nPROJ_METADATA = '%s.json' % PROJ_NAME\n\nimport importlib.util\nimport importlib.machinery\n\ndef load_source(modname, filename):\n    loader = importlib.machinery.SourceFileLoader(modname, filename)\n    spec = importlib.util.spec_from_file_location(modname, filename, loader=loader)\n    module = importlib.util.module_from_spec(spec)\n    # The module is always executed and not cached in sys.modules.\n    # Uncomment the following line to cache the module.\n    # sys.modules[module.__name__] = module\n    loader.exec_module(module)\n    return module\n\nimport os, json\nhere = os.path.abspath(os.path.dirname(__file__))\nproj_info = json.loads(open(os.path.join(here, PROJ_METADATA), encoding='utf-8').read())\ntry:\n    README = open(os.path.join(here, 'README.rst'), encoding='utf-8').read()\nexcept:\n    README = \"\"\nCHANGELOG = open(os.path.join(here, 'CHANGELOG.rst'), encoding='utf-8').read()\nVERSION = load_source('version', os.path.join(here, 'src/%s/version.py' % PACKAGE_NAME)).__version__\n\nfrom setuptools import setup, find_packages\nsetup(\n    name = proj_info['name'],\n    version = VERSION,\n\n    author = proj_info['author'],\n    author_email = proj_info['author_email'],\n    url = proj_info['url'],\n    license = proj_info['license'],\n\n    description = proj_info['description'],\n    keywords = proj_info['keywords'],\n\n    long_description = README,\n\n    packages = find_packages('src'),\n    package_dir = {'' : 'src'},\n\n    test_suite = 'tests',\n\n    platforms = 'any',\n    zip_safe = True,\n    include_package_data = True,\n\n    classifiers = proj_info['classifiers'],\n\n    entry_points = {'console_scripts': proj_info['console_scripts']},\n\n    install_requires = ['dukpy'],\n    extras_require = {\n        'socks': ['PySocks'],\n    }\n)\n",
    "src/you_get/__init__.py": "#!/usr/bin/env python\n# This file is Python 2 compliant.\n\nimport sys\n\nif sys.version_info[0] == 3:\n    #from .extractor import Extractor, VideoExtractor\n    #from .util import log\n\n    from .__main__ import *\n\n    #from .common import *\n    #from .version import *\n    #from .cli_wrapper import *\n    #from .extractor import *\nelse:\n    # Don't import anything.\n    pass\n",
    "src/you_get/__main__.py": "#!/usr/bin/env python\n\nimport getopt\nimport os\nimport platform\nimport sys\nfrom .version import script_name, __version__\nfrom .util import git, log\n\n_options = [\n    'help',\n    'version',\n    'gui',\n    'force',\n    'playlists',\n]\n_short_options = 'hVgfl'\n\n_help = \"\"\"Usage: {} [OPTION]... [URL]...\nTODO\n\"\"\".format(script_name)\n\n# TBD\ndef main_dev(**kwargs):\n    \"\"\"Main entry point.\n    you-get-dev\n    \"\"\"\n\n    # Get (branch, commit) if running from a git repo.\n    head = git.get_head(kwargs['repo_path'])\n\n    # Get options and arguments.\n    try:\n        opts, args = getopt.getopt(sys.argv[1:], _short_options, _options)\n    except getopt.GetoptError as e:\n        log.wtf(\"\"\"\n    [Fatal] {}.\n    Try '{} --help' for more options.\"\"\".format(e, script_name))\n\n    if not opts and not args:\n        # Display help.\n        print(_help)\n        # Enter GUI mode.\n        #from .gui import gui_main\n        #gui_main()\n    else:\n        conf = {}\n        for opt, arg in opts:\n            if opt in ('-h', '--help'):\n                # Display help.\n                print(_help)\n\n            elif opt in ('-V', '--version'):\n                # Display version.\n                log.println(\"you-get:\", log.BOLD)\n                log.println(\"    version:  {}\".format(__version__))\n                if head is not None:\n                    log.println(\"    branch:   {}\\n    commit:   {}\".format(*head))\n                else:\n                    log.println(\"    branch:   {}\\n    commit:   {}\".format(\"(stable)\", \"(tag v{})\".format(__version__)))\n\n                log.println(\"    platform: {}\".format(platform.platform()))\n                log.println(\"    python:   {}\".format(sys.version.split('\\n')[0]))\n\n            elif opt in ('-g', '--gui'):\n                # Run using GUI.\n                conf['gui'] = True\n\n            elif opt in ('-f', '--force'):\n                # Force download.\n                conf['force'] = True\n\n            elif opt in ('-l', '--playlist', '--playlists'):\n                # Download playlist whenever possible.\n                conf['playlist'] = True\n\n        if args:\n            if 'gui' in conf and conf['gui']:\n                # Enter GUI mode.\n                from .gui import gui_main\n                gui_main(*args, **conf)\n            else:\n                # Enter console mode.\n                from .console import console_main\n                console_main(*args, **conf)\n\ndef main(**kwargs):\n    \"\"\"Main entry point.\n    you-get (legacy)\n    \"\"\"\n    from .common import main\n    main(**kwargs)\n\nif __name__ == '__main__':\n    main()\n"
  },
  "requirements": "# runtime dependencies\ndukpy\n"
}