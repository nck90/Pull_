{
  "repo_name": "bregman-arie/devops-exercises",
  "repo_url": "https://github.com/bregman-arie/devops-exercises",
  "description": "Linux, Jenkins, AWS, SRE, Prometheus, Docker, Python, Ansible, Git, Kubernetes, Terraform, OpenStack, SQL, NoSQL, Azure, GCP, DNS, Elastic, Network, Virtualization. DevOps Interview Questions",
  "stars": 70516,
  "language": "Python",
  "created_at": "2019-10-03T17:31:21Z",
  "updated_at": "2025-03-19T06:59:22Z",
  "files": {
    "tests/scripts_question_utils_unittest.py": "import unittest\nfrom pathlib import Path\nfrom typing import List\nfrom scripts.question_utils import get_answered_questions, get_question_list\n\n\ndef open_test_case_file(n: int) -> List[bytes]:\n    tests_path = Path(__file__).parent.joinpath()\n\n    with open(f'{tests_path}/testcases/testcase{n}.md', 'rb') as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    return file_list\n\n\nclass QuestionCount(unittest.TestCase):\n\n    def test_case_1(self):\n        raw_list = open_test_case_file(1)\n        question_list = get_question_list(raw_list)\n        answers = get_answered_questions(question_list)\n\n        self.assertEqual(len(question_list), 11)\n        self.assertEqual(len(answers), 3)\n\n    def test_case_2(self):\n        raw_list = open_test_case_file(2)\n        question_list = get_question_list(raw_list)\n        answers = get_answered_questions(question_list)\n\n        self.assertEqual(len(question_list), 16)\n        self.assertEqual(len(answers), 11)\n",
    "tests/syntax_checker_unittest.py": "\"\"\"\nWIP\n\nYes, we do write tests for our tests.\n\"\"\"\nfrom pathlib import Path\nfrom typing import List\nfrom unittest import TestCase\nfrom tests import syntax_lint\n\n\ndef open_test_case_file(n: int) -> List[bytes]:\n    tests_path = Path(__file__).parent.joinpath()\n\n    with open(f'{tests_path}/testcases/testcase{n}.md', 'rb') as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    return file_list\n\n\ntest_case_1 = open_test_case_file(1)\ntest_case_2 = open_test_case_file(2)\ntest_case_3 = open_test_case_file(3)\n\n\nclass TestSyntax(TestCase):\n\n    def test_details_count_case1(self):\n        self.assertTrue(syntax_lint.count_details(test_case_1))\n\n    def test_details_count_case2(self):\n        self.assertTrue(syntax_lint.count_details(test_case_2))\n\n    def test_details_errors_1(self):\n        syntax_lint.check_details_tag(test_case_1)\n        self.assertFalse(syntax_lint.errors)\n\n    def test_details_errors_2(self):\n        syntax_lint.check_details_tag(test_case_2)\n        self.assertFalse(syntax_lint.errors)\n    #\n    # def test_details_error_exist_1(self):\n    #     syntax_checker.check_details_tag(test_case_3)\n    #     print(syntax_checker.errors)\n    #     self.assertEqual(len(syntax_checker.errors), 3)\n",
    "tests/syntax_lint.py": "\"\"\"\nTesting suite for https://github.com/bregman-arie/devops-interview-questions\nwritten by surister\n\nEven though both check_details_tag and check_summary_tags are practically the\nsame, due to readability and functionality it was decided to be split like\nthat.\n\nUsage:\n$ python tests/syntax_lint.py\n\n\"\"\"\n\nimport sys\n\np = sys.argv[1]\n\n\nerrors = []\n\n\ndef count_details(file_list):\n    \"\"\"\n    Counts the total amount of <details> and </details>\n\n    Used for debugging purpose, not meant to be used in actual tests\n    \"\"\"\n    details_final_count = 0\n    details_count = 0\n\n    for line_number, line in enumerate(file_list):\n        if b\"<details>\" in line:\n            details_count += 1\n        if b\"</details>\" in line:\n            details_final_count += 1\n\n    return details_count == details_final_count\n\n\ndef count_summary(file_list):\n    \"\"\"\n    Counts the total amount of <details> and </details>\n\n    Used for debugging purpose, not meant to be used in actual tests\n    \"\"\"\n    details_final_count = 0\n    details_count = 0\n\n    for line_number, line in enumerate(file_list):\n        if b\"<summary>\" in line:\n            details_count += 1\n        if b\"</summary>\" in line:\n            details_final_count += 1\n\n    return details_count == details_final_count\n\n\ndef check_details_tag(file_list):\n    \"\"\"\n    Check whether the structure:\n    <details>\n    ...\n    </details>\n\n    Is correctly followed, if not generates an error.\n\n    \"\"\"\n\n    after_detail = False\n    error = False\n    err_message = \"\"\n    for line_number, line in enumerate(file_list):\n        if b\"<details>\" in line and b\"</details>\" in line:\n            pass\n        else:\n            if b\"<details>\" in line and after_detail:\n                err_message = f\"Missing closing detail tag round line {line_number - 1}\"\n                error = True\n            if b\"</details>\" in line and not after_detail:\n                err_message = f\"Missing opening detail tag round line {line_number - 1}\"\n                error = True\n\n            if b\"<details>\" in line:\n                after_detail = True\n\n            if b\"</details>\" in line and after_detail:\n                after_detail = False\n\n            if error:\n                errors.append(err_message)\n\n        error = False\n\n\ndef check_summary_tag(file_list):\n    \"\"\"\n    Check whether the structure:\n    <summary>\n    ...\n    </summary>\n\n    Is correctly followed, if not generates an error.\n\n    \"\"\"\n\n    after_summary = False\n    error = False\n    err_message = \"\"\n    for idx, line in enumerate(file_list):\n        line_number = idx + 1\n        if b\"<summary>\" in line and b\"</summary>\" in line:\n            if after_summary:\n                err_message = f\"Missing closing summary tag around line {line_number}\"\n                error = True\n\n        else:\n            if b\"<summary>\" in line and after_summary:\n                err_message = f\"Missing closing summary tag around line {line_number}\"\n                error = True\n            if b\"</summary>\" in line and not after_summary:\n                err_message = f\"Missing opening summary tag around line {line_number}\"\n                error = True\n\n            if b\"<summary>\" in line:\n                after_summary = True\n\n            if b\"</summary>\" in line and after_summary:\n                after_summary = False\n\n        if error:\n            errors.append(err_message)\n\n        error = False\n\n\ndef check_md_file(file_name):\n    with open(p, \"rb\") as f:\n        file_list = [line.rstrip() for line in f.readlines()]\n    check_details_tag(file_list)\n    check_summary_tag(file_list)\n\n\nif __name__ == \"__main__\":\n    print(f\"..........Checking {p}..........\")\n    check_md_file(p)\n    if errors:\n        print(f\"{p} failed\", file=sys.stderr)\n        for error in errors:\n            print(error, file=sys.stderr)\n        exit(1)\n\n    print(\"Tests passed successfully.\")\n",
    "topics/flask_container_ci/app/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport unittest\n\nfrom config import basedir\nfrom app import app\nfrom app import db\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['WTF_CSRF_ENABLED'] = False\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(\n            basedir, 'test.db')\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "topics/flask_container_ci/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport unittest\n\nfrom app import main\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.app = main.app.test_client()\n\n    def test_main_page(self):\n        response = self.app.get('/', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n    def test_users_page(self):\n        response = self.app.get('/users', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "topics/flask_container_ci2/app/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport os\nimport unittest\n\nfrom config import basedir\nfrom app import app\nfrom app import db\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        app.config['TESTING'] = True\n        app.config['WTF_CSRF_ENABLED'] = False\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///' + os.path.join(\n            basedir, 'test.db')\n        self.app = app.test_client()\n        db.create_all()\n\n    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n\n\nif __name__ == '__main__':\n    unittest.main()\n",
    "topics/flask_container_ci2/tests.py": "#!/usr/bin/env python\n# coding=utf-8\n\nimport unittest\n\nfrom app import main\n\n\nclass TestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.app = main.app.test_client()\n\n    def test_main_page(self):\n        response = self.app.get('/', follow_redirects=True)\n        self.assertEqual(response.status_code, 200)\n\n    def test_matrix(self):\n        response = self.app.get('/matrix/123n459,789', follow_redirects=True)\n        # Change when the matrix route is fixed and returning the actual matrix\n        self.assertEqual(response.status_code, 500)\n\n\nif __name__ == '__main__':\n    unittest.main()\n"
  },
  "requirements": null
}