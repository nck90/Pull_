{
  "repo_name": "521xueweihan/HelloGitHub",
  "repo_url": "https://github.com/521xueweihan/HelloGitHub",
  "description": ":octocat: 分享 GitHub 上有趣、入门级的开源项目。Share interesting, entry-level open source projects on GitHub.",
  "stars": 99905,
  "language": "Python",
  "created_at": "2016-05-04T06:24:11Z",
  "updated_at": "2025-03-19T06:50:58Z",
  "files": {
    "script/github_bot/github_bot.py": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n#   Author  :   XueWeiHan\n#   E-mail  :   595666367@qq.com\n#   Date    :   16/8/30 下午10:43\n#   Desc    :   Github Bot\nimport os\nimport logging\nimport smtplib\nimport datetime\nfrom operator import itemgetter\nfrom email.mime.text import MIMEText\nfrom email.header import Header\n\nimport requests\n\nlogging.basicConfig(\n    level=logging.WARNING,\n    filename=os.path.join(os.path.dirname(__file__), 'bot_log.txt'),\n    filemode='a',\n    format='%(name)s %(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'\n)\nlogger = logging.getLogger('Bot')  # 设置log名称\n# github帐号\nACCOUNT = {\n    'username': '',\n    'password': ''\n}\n\nAPI = {\n    'events': 'https://api.github.com/users/{username}/received_events'.format(username=ACCOUNT['username'])\n}\n\n# 发送邮件，邮箱的信息\nMAIL = {\n    'mail': '',  # 发送邮件的邮箱地址\n    'username': '',\n    'password': '',\n    'host': 'smtp.qq.com',\n    'port': 465\n}\n\n# 接收邮件的邮箱地址\nRECEIVERS = []\n\n# 几天前\nDAY = 1\n\n# 项目stars临界值\nSTARS = 100\n\n# qq邮件服务文档：http://service.mail.qq.com/cgi-bin/help?id=28\n\n\nCONTENT_FORMAT = \"\"\"\n    <table border=\"2\" align=\"center\">\n      <tr>\n        <th>头像</th>\n        <th>用户名</th>\n        <th>项目名</th>\n        <th>starred 日期</th>\n        <th>项目 star 数量</th>\n      </tr>\n      {project_info_string}\n    </table>\n\"\"\"\n\n\ndef get_data(page=1):\n    \"\"\"\n    从目标源获取数据\n    https://developer.github.com/v3/activity/events/\n    GitHub 规定：默认每页 30 条，最多 300 条目\n    \"\"\"\n\n    args = '?page={page}'.format(page=page)\n\n    response = requests.get(API['events']+args,\n                            auth=(ACCOUNT['username'], ACCOUNT['password']))\n    status_code = response.status_code\n    if status_code == 200:\n        resp_json = response.json()\n        return resp_json\n    else:\n        logging.error('请求 event api 失败：', status_code)\n        return []\n\n\ndef get_all_data():\n    \"\"\"\n    获取全部 300 条的数据\n    https://developer.github.com/v3/activity/events/\n    GitHub 规定：默认每页 30 条，最多 300 条目\n    \"\"\"\n    all_data_list = []\n    for i in range(10):\n        response_json = get_data(i+1)\n        if response_json:\n            all_data_list.extend(response_json)\n    return all_data_list\n\n\ndef check_condition(data):\n    \"\"\"\n    过滤条件\n    \"\"\"\n    create_time = datetime.datetime.strptime(\n        data['created_at'], \"%Y-%m-%dT%H:%M:%SZ\") + datetime.timedelta(hours=8)\n    date_condition = create_time >= (datetime.datetime.now()\n                                     - datetime.timedelta(days=DAY))\n    if (data['type'] == 'WatchEvent') and date_condition:\n        # 不统计自己项目的star事件\n        if data['payload']['action'] == 'started' and \\\n           ACCOUNT['username'] not in data['repo']['name']:\n            data['date_time'] = create_time.strftime(\"%Y-%m-%d %H:%M:%S\")\n            return True\n    else:\n        return False\n\n\ndef analyze(json_data):\n    \"\"\"\n    分析获取的数据\n    :return 符合过滤条件的数据\n    \"\"\"\n    result_data = []\n    for fi_data in json_data:\n        if check_condition(fi_data):\n            result_data.append(fi_data)\n    return result_data\n\n\ndef get_stars(data):\n    \"\"\"\n    获取stars数量，同时过滤掉stars数量少的项目\n    \"\"\"\n    project_info_list = []\n    for fi_data in data:\n        project_info = dict()\n        project_info['user'] = fi_data['actor']['login']\n        project_info['user_url'] = 'https://github.com/' + project_info['user']\n        project_info['avatar_url'] = fi_data['actor']['avatar_url']\n        project_info['repo_name'] = fi_data['repo']['name']\n        project_info['repo_url'] = 'https://github.com/' + project_info['repo_name']\n        project_info['date_time'] = fi_data['date_time']\n        try:\n            repo_stars = requests.get(fi_data['repo']['url'], timeout=2).json()\n            if repo_stars:\n                project_info['repo_stars'] = int(repo_stars['stargazers_count'])\n            else:\n                project_info['repo_stars'] = -1\n        except Exception as e:\n            project_info['repo_stars'] = -1\n            logger.warning(u'获取：{} 项目星数失败——{}'.format(\n                project_info['repo_name'], e))\n        finally:\n            if project_info['repo_stars'] >= STARS or project_info['repo_stars'] == -1:\n                # 过滤掉star数量低于临界值的项目\n                project_info_list.append(project_info)\n    project_info_list = sorted(project_info_list, key=itemgetter('repo_stars'), reverse=True)\n    return project_info_list\n\n\ndef make_content():\n    \"\"\"\n    生成发布邮件的内容\n    \"\"\"\n    json_data = get_all_data()\n    data = analyze(json_data)\n    content = []\n    project_info_list = get_stars(data)\n    for project_info in project_info_list:\n        project_info_string = \"\"\"<tr>\n                                <td><img src={avatar_url} width=32px></img></td>\n                                <td><a href={user_url}>{user}</a></td>\n                                <td><a href={repo_url}>{repo_name}</a></td>\n                                <td>{date_time}</td>\n                                <td>{repo_stars}</td>\n                              </tr>\n                           \"\"\".format(**project_info)\n        content.append(project_info_string)\n    return content\n\n\ndef send_email(receivers, email_content):\n    \"\"\"\n    发送邮件\n    \"\"\"\n    sender = MAIL['mail']  # 发送邮件的邮箱\n    receivers = receivers   # 接收邮件的邮箱，可设置多个\n\n    # 三个参数：第一个为文本内容，第二个 html 设置文本格式，第三个 utf-8 设置编码\n    message = MIMEText(\n        CONTENT_FORMAT.format(project_info_string=''.join(email_content)),\n        'html', 'utf-8'\n    )\n    message['From'] = Header(u'GitHub 机器人', 'utf-8')\n    message['To'] = Header(u'削微寒', 'utf-8')\n\n    subject = u'今日 GitHub 热点'  # 设置邮件主题\n    message['Subject'] = Header(subject, 'utf-8')\n    try:\n        smtp_obj = smtplib.SMTP_SSL()  # qq邮箱要求是https连接，所以需要用SMTP_SSL\n        smtp_obj.connect(MAIL['host'], MAIL['port'])    # 设置SMTP地址和端口号\n        smtp_obj.login(MAIL['username'], MAIL['password'])\n        smtp_obj.sendmail(sender, receivers, message.as_string())\n    except smtplib.SMTPException as e:\n        logger.error(u\"无法发送邮件: {}\".format(e))\n\nif __name__ == '__main__':\n    content = make_content()\n    send_email(RECEIVERS, content)\n",
    "script/make_content/make_content.py": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n#   Author  :   XueWeiHan\n#   E-mail  :   595666367@qq.com\n#   Date    :   16/10/21 下午1:41\n#   Desc    :   HelloGitHub项目——生成月刊脚本\n\"\"\"\n该脚本主要用于：生成月刊\n\n《HelloGitHub》月刊每期内容都遵循统一格式，如果需要对通用部分的内容进行修改，需要手动修改每一\n期的内容，这是不优雅的。\n\n所以，我打算写个脚本，用于生成月刊，这样如果修改了通用内容部分，就只需要重新生成月刊，而不需要\n手动修改已发布的所有期的内容。\n\"\"\"\nfrom __future__ import print_function\nimport sys\nimport os\n\nCONTENT_FLAG = '{{ hello_github_content }}'\nNUM_FLAG = '{{ hello_github_num }}'\n\n\nclass InputError(Exception):\n    def __init__(self, message):\n        self.message = message\n\n    def __str__(self):\n        return repr(self.message)\n\n\ndef check_path(path):\n    \"\"\"\n    检查路径是否存在\n    \"\"\"\n    if not os.path.exists(path):\n        print('not exist: {path}'.format(path=path))\n        return False\n    else:\n        return True\n\n\ndef read_file(input_path):\n    with open(input_path, 'r') as fb:\n        return fb.read()\n\n\ndef write_file(output_path, output_data):\n    with open(output_path, 'w') as fb:\n        fb.write(output_data)\n\n\ndef make_content(num):\n    template_path = os.path.join(os.path.abspath(os.curdir), 'template.md')\n    output_path = os.path.join(os.path.abspath(os.curdir), num)\n    content_path = os.path.join(output_path, 'content'+num+'.md')\n    if not (check_path(content_path) and check_path(template_path)):\n        # 如果 content 和 template 文件不存在\n        return None\n    temple_data = read_file(template_path).replace(NUM_FLAG, num)\n\n    content_data = read_file(content_path)\n\n    output_data = temple_data.replace(CONTENT_FLAG, content_data)\n\n    write_file(os.path.join(output_path, 'HelloGitHub{num}.md'.format(num=num)), output_data)\n    print('Make 《GitHub月刊{num}》 successful！'.format(num=num))\n\n\ndef make_all_content():\n    dir_list = os.listdir(os.path.abspath(os.curdir))\n    for fi_dir in dir_list:\n        # 忽略‘script’的目录\n        if os.path.isdir(fi_dir) and 'script' not in fi_dir:\n            make_content(fi_dir)\n\n\ndef main():\n    \"\"\"\n    入口方法\n    \"\"\"\n    input_list = sys.argv  # 获取输入的参数\n\n    if len(input_list) != 2:\n        raise InputError('Input error: Need a param')\n    else:\n        try:\n            input_arg = input_list[1]\n        except Exception:\n            raise InputError('Input error: Must be number')\n    if len(input_arg) == 1:\n        make_content('0' + input_arg)\n    elif input_arg == 'all':\n        make_all_content()\n    else:\n        make_content(input_arg)\n\nif __name__ == '__main__':\n    main()\n"
  },
  "requirements": null
}