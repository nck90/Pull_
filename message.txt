import httpx
import asyncio
import json
import os
from concurrent.futures import ThreadPoolExecutor
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.environ.get('TOKEN')

async def fetch(client, url):
    return await client.get(url, timeout=10)

async def fetch_all(client, urls):
    tasks = [fetch(client, url) for url in urls]
    return await asyncio.gather(*tasks)

def filter_files(tree_data):
    return [f['path'] for f in tree_data.get('tree', []) if 'test' in f['path'].lower() and f['path'].endswith('.py')][:5]

async def process_repo(client, repo):
    owner, name = repo['owner']['login'], repo['name']
    tree_url = f"https://api.github.com/repos/{owner}/{name}/git/trees/main?recursive=1"
    response = await fetch(client, tree_url)
    tree_data = response.json()
    if any(f['path'] == 'requirements.txt' for f in tree_data.get('tree', [])):
        return {'repo': f"{owner}/{name}", 'test_files': filter_files(tree_data)}
    return None

async def main():
    async with httpx.AsyncClient(headers={'Authorization': f'token {TOKEN}'}) as client:
        search_url = 'https://api.github.com/search/repositories?q=language:Python+pytest+fastapi+in:readme+fork:false&sort=updated&per_page=100'
        page_urls = [f"{search_url}&page={i}" for i in range(1, 11)]
        pages = await fetch_all(client, page_urls)
        
        repos = [repo for page in pages for repo in page.json().get('items', [])]
        processed = set(json.load(open('processed_repos.json', 'r')) if os.path.exists('processed_repos.json') else [])
        repos = [r for r in repos if r['full_name'] not in processed]
        
        tasks = [process_repo(client, repo) for repo in repos]
        results = [r for r in await asyncio.gather(*tasks) if r]
        
        with open('result.json', 'w', encoding='utf-8') as f:
            json.dump(results, f, indent=2)
        
        processed.update(r['full_name'] for r in repos)
        with open('processed_repos.json', 'w') as f:
            json.dump(list(processed), f)
        
        print(f"총 {len(results)}개 레포지토리 처리 완료")

if __name__ == "__main__":
    if not TOKEN:
        print("GitHub 토큰을 설정하세요: export GITHUB_TOKEN='your_token_here'")
    else:
        asyncio.run(main())